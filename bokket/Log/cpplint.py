





<!DOCTYPE html>
<html lang="en" >
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" integrity="sha512-D0Rgw9tUlnmEXYGiOncfR/bdvONfod9Tq1MtVoa/8VqiSJ4ZIEF2G8gbVS5UEe5UFoS0hm3GMrpBNY14KmiQhw==" rel="stylesheet" href="https://github.githubassets.com/assets/frameworks-0f4460c3db549679845d81a23a771f47.css" />
  <link crossorigin="anonymous" media="all" integrity="sha512-NyKo+xPikceXuix/22gjEgYzaeaANysAl4Wz2gO++1dv5rnCazqYgyXDctqTU94fetTdH6HlV/ll5xLf/6ummQ==" rel="stylesheet" href="https://github.githubassets.com/assets/site-3722a8fb13e291c797ba2c7fdb682312.css" />
    <link crossorigin="anonymous" media="all" integrity="sha512-o4J+tBmn3RlwVnhfBv2BySdk2NdgQAoLnJ9/EKw7Uoua6x2ERCXWLLBdx8O6SeZ1kaQtDPjg+ZxMkfFKpQYipQ==" rel="stylesheet" href="https://github.githubassets.com/assets/behaviors-a3827eb419a7dd197056785f06fd81c9.css" />
    
    
    
    <link crossorigin="anonymous" media="all" integrity="sha512-oR0opyw674cjo4f7H8E1xoCsVRUKcomwWf+4c6NGMDhSKTohjZH/QQWB41T6sYiYOondJcxf+SD75UbO/TS0ZA==" rel="stylesheet" href="https://github.githubassets.com/assets/github-a11d28a72c3aef8723a387fb1fc135c6.css" />

  <script crossorigin="anonymous" defer="defer" integrity="sha512-8K2vvwbW+6H27Nad5ydg8PA2/aMD/LKq+EiK9s0U0hhVZxCI2tWBsYk9beAtisRw2j+Or5k2/F+6dk02nmj/PA==" type="application/javascript" src="https://github.githubassets.com/assets/environment-f0adafbf.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-3yixvhtA5nOJY+pDcqvBKztKjFwZqklw1mnoaHUlxzLSqT8hc8aJ8KPa+OjVGlOvZAp2prs7kh6cAJFDQBQ1JQ==" type="application/javascript" src="https://github.githubassets.com/assets/chunk-frameworks-df28b1be.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-Bpsh6jNrHD75e3XfQQ+wdo+ky+Ig480DD8OVdZnHZglPO+r5sXnoSvs4In/HaKtH2Di2MVNL7NJFib5zmKrayQ==" type="application/javascript" src="https://github.githubassets.com/assets/chunk-vendor-069b21ea.js"></script>
  
  <script crossorigin="anonymous" defer="defer" integrity="sha512-TOWq4GrLDl5mgWizcNAEVEOywj4s3Lr0QgDdFUXLept1zNuX1ja/vDsDaU8smKjzepcaDpC+sOiyrx/RL6D04w==" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-4ce5aae0.js"></script>
  <script crossorigin="anonymous" defer="defer" integrity="sha512-AwxJjNYHMbBW1RDMWqHLbm5ef0HpZqNZm4BU62VDY1R3ClrM8cwzqMGk0YJDgSjC0X3HMnQLUYS8sIcRPYZ3aQ==" type="application/javascript" src="https://github.githubassets.com/assets/primer-030c498c.js"></script>
  
    <script crossorigin="anonymous" defer="defer" integrity="sha512-MiuFoXnjDmRNVM/xNR9yfPr8Qi8Q6+TKWIrkXp+1QJv9MW8lpBfOy0u7AuVuXQVYKIhsr5DCuCxIs1STWpujLg==" type="application/javascript" data-module-id="./chunk-color-modes.js" data-src="https://github.githubassets.com/assets/chunk-color-modes-322b85a1.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-evfy6RyDyXvLuaEEFaUaIlw9dSRgvKkF3rMeUELkvXq7sGEK/43vTg+3EE6E8nOsjpuPyYQjgS8bxzqkTjlZag==" type="application/javascript" data-module-id="./chunk-contributions-spider-graph.js" data-src="https://github.githubassets.com/assets/chunk-contributions-spider-graph-7af7f2e9.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-obMR8mPKx8OvqRe34LgnUcxeJ1qujiA4ND3H6UX13ExMlA/WfHLjEzXRmgGRcRvN/8J1nzc+Z+jgz/PLTFy6zg==" type="application/javascript" data-module-id="./chunk-drag-drop.js" data-src="https://github.githubassets.com/assets/chunk-drag-drop-a1b311f2.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-cVnIoXzYnuz2SYwsbnuCpTFzvO17cPoQV2mK82+em//c8i7V2L0VEeInplXGgfbx4d8bQGQuPPx0P0BCRfJ37g==" type="application/javascript" data-module-id="./chunk-edit.js" data-src="https://github.githubassets.com/assets/chunk-edit-7159c8a1.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-TGnbT/6B5dxVwEk7iOlwSY9mfqhfq8m05ec+KjdlfEwoieq73iBeyidClQUSmFa2snukwzF9peY8c7FJf9FARA==" type="application/javascript" data-module-id="./chunk-emoji-picker-element.js" data-src="https://github.githubassets.com/assets/chunk-emoji-picker-element-4c69db4f.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-NwYkwzxETzKUYRXumHDsBIuggkh86KmJ1WrwWZW5wTvVPf047+wOmOHI5b4D65bfdtd3WbXJ7k+3ZWoxpIaqcA==" type="application/javascript" data-module-id="./chunk-insights-graph.js" data-src="https://github.githubassets.com/assets/chunk-insights-graph-370624c3.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-ZhHO4yoDkpCF2sJkzsW3BP1RNu9ji9N6KwuBWy03eGOwkHKwBbs5gKizpeyjslAXlWOV4f9HRVN981Du0AfcvQ==" type="application/javascript" data-module-id="./chunk-jump-to.js" data-src="https://github.githubassets.com/assets/chunk-jump-to-6611cee3.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-S8aUo+fRvLif3bA63pJ03RyoYVNFJ7Q+aOmtVVHabaVFMwV1zMdE4HTEewMkbU0ZK2Ik5Q3Ob9/JE+zrNC5qaw==" type="application/javascript" data-module-id="./chunk-profile-pins-element.js" data-src="https://github.githubassets.com/assets/chunk-profile-pins-element-4bc694a3.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-E+H+wAtjiqutBvn2cnXzDIvmasIhYiS7i7JzOfFUwo+Ej8zT54OrJtP//RhwixnypgOpCF4JvqzYy6zOtORDmg==" type="application/javascript" data-module-id="./chunk-runner-groups.js" data-src="https://github.githubassets.com/assets/chunk-runner-groups-13e1fec0.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-U+Pp1bYuA3fRqhike5Go//O/vsExaZLz00lrIby+rZ88yf03nQHz3wLZR9paWkakpD7TH5nS6AUpabCc7OFWpg==" type="application/javascript" data-module-id="./chunk-sortable-behavior.js" data-src="https://github.githubassets.com/assets/chunk-sortable-behavior-53e3e9d5.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-cAsQOq53AtF8bCPWtKuMXOB2Jjt2089fKQQXtk1bNk2ZSBjx2yQOdGZWsXDfWG5H8FmjJzZsepBmOhy+wO7uAQ==" type="application/javascript" data-module-id="./chunk-toast.js" data-src="https://github.githubassets.com/assets/chunk-toast-700b103a.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-QBwrFY4kzAVN0nZmTYJLeEhi5bQ+42rE8h1g384XeZb7n62BykcUICACtaDQ473aIrRf38RSR7WDfNEIVuSlTA==" type="application/javascript" data-module-id="./chunk-tweetsodium.js" data-src="https://github.githubassets.com/assets/chunk-tweetsodium-401c2b15.js"></script>
    <script crossorigin="anonymous" defer="defer" integrity="sha512-RfbLfWsDwvP53bQvgbFm/0j3n5N7IuPQ9yyQ1ah3azz9E2KVeo5ujcUGh++d+t49H0EUTKfeAZ+g9PgCVCjErw==" type="application/javascript" data-module-id="./chunk-user-status-submit.js" data-src="https://github.githubassets.com/assets/chunk-user-status-submit-45f6cb7d.js"></script>
  
  <script crossorigin="anonymous" defer="defer" integrity="sha512-bVgr2gL7DaSaCp/Aev1O/9V1boyT/1FCjRIYcSMOG4AqUvP9e7h3hMvR9LtX0sHt/uTv7Sp1YtF1KMDQm9E6Nw==" type="application/javascript" src="https://github.githubassets.com/assets/repositories-6d582bda.js"></script>
<script crossorigin="anonymous" defer="defer" integrity="sha512-ng+rLwG9JuJBuJQWCGyT4r3VjNUz1FNWKpqbE2zWpJJZHkkwqkYWwJxo5k+PZCuWqUWZxofbuEtLrQnnjIyTqQ==" type="application/javascript" src="https://github.githubassets.com/assets/diffs-9e0fab2f.js"></script>

  <meta name="viewport" content="width=device-width">
  
  <title>styleguide/cpplint.py at gh-pages · google/styleguide · GitHub</title>
    <meta name="description" content="Style guides for Google-originated open-source projects - google/styleguide">
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">
  <meta name="apple-itunes-app" content="app-id=1477376905" />
    <meta name="twitter:image:src" content="https://avatars.githubusercontent.com/u/1342004?s=400&amp;v=4" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary" /><meta name="twitter:title" content="google/styleguide" /><meta name="twitter:description" content="Style guides for Google-originated open-source projects - google/styleguide" />
    <meta property="og:image" content="https://avatars.githubusercontent.com/u/1342004?s=400&amp;v=4" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="google/styleguide" /><meta property="og:url" content="https://github.com/google/styleguide" /><meta property="og:description" content="Style guides for Google-originated open-source projects - google/styleguide" />



    

  <link rel="assets" href="https://github.githubassets.com/">
  

  <meta name="request-id" content="ACF6:3F49:4855CC:511602:6047695F" data-pjax-transient="true"/><meta name="html-safe-nonce" content="339945ca7a856e3cc033c9d094c4f7314afbace386686d06a5a62715601e6583" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6IiIsInJlcXVlc3RfaWQiOiJBQ0Y2OjNGNDk6NDg1NUNDOjUxMTYwMjo2MDQ3Njk1RiIsInZpc2l0b3JfaWQiOiIzNjg3MjM2MDgyNDMwNjAxNTY4IiwicmVnaW9uX2VkZ2UiOiJzZWEiLCJyZWdpb25fcmVuZGVyIjoic2VhIn0=" data-pjax-transient="true"/><meta name="visitor-hmac" content="c1feb39fe5f2b007532c6c96be03c67e90a67040ccd43f230a2fc5b14e7dc193" data-pjax-transient="true"/>

    <meta name="hovercard-subject-tag" content="repository:35969061" data-pjax-transient>


  <meta name="github-keyboard-shortcuts" content="repository,source-code" data-pjax-transient="true" />

  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="c1kuD-K2HIVF635lypcsWPoD4kilo5-jA_wBFyT4uMY">
  <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">

  <meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />

  



  <meta name="optimizely-datafile" content="{&quot;version&quot;: &quot;4&quot;, &quot;rollouts&quot;: [], &quot;typedAudiences&quot;: [], &quot;anonymizeIP&quot;: true, &quot;projectId&quot;: &quot;16737760170&quot;, &quot;variables&quot;: [], &quot;featureFlags&quot;: [], &quot;experiments&quot;: [{&quot;status&quot;: &quot;Running&quot;, &quot;audienceIds&quot;: [], &quot;variations&quot;: [{&quot;variables&quot;: [], &quot;id&quot;: &quot;19739506060&quot;, &quot;key&quot;: &quot;en&quot;}, {&quot;variables&quot;: [], &quot;id&quot;: &quot;19720506378&quot;, &quot;key&quot;: &quot;pt&quot;}], &quot;id&quot;: &quot;19741925936&quot;, &quot;key&quot;: &quot;homepage_translation&quot;, &quot;layerId&quot;: &quot;19739776731&quot;, &quot;trafficAllocation&quot;: [{&quot;entityId&quot;: &quot;19720506378&quot;, &quot;endOfRange&quot;: 5000}, {&quot;entityId&quot;: &quot;19739506060&quot;, &quot;endOfRange&quot;: 10000}], &quot;forcedVariations&quot;: {}}], &quot;audiences&quot;: [{&quot;conditions&quot;: &quot;[\&quot;or\&quot;, {\&quot;match\&quot;: \&quot;exact\&quot;, \&quot;name\&quot;: \&quot;$opt_dummy_attribute\&quot;, \&quot;type\&quot;: \&quot;custom_attribute\&quot;, \&quot;value\&quot;: \&quot;$opt_dummy_value\&quot;}]&quot;, &quot;id&quot;: &quot;$opt_dummy_audience&quot;, &quot;name&quot;: &quot;Optimizely-Generated Audience for Backwards Compatibility&quot;}], &quot;groups&quot;: [{&quot;policy&quot;: &quot;random&quot;, &quot;trafficAllocation&quot;: [{&quot;entityId&quot;: &quot;20065350824&quot;, &quot;endOfRange&quot;: 10000}], &quot;experiments&quot;: [{&quot;status&quot;: &quot;Running&quot;, &quot;audienceIds&quot;: [], &quot;variations&quot;: [{&quot;variables&quot;: [], &quot;id&quot;: &quot;20061181493&quot;, &quot;key&quot;: &quot;control&quot;}, {&quot;variables&quot;: [], &quot;id&quot;: &quot;20046091568&quot;, &quot;key&quot;: &quot;most_popular&quot;}], &quot;id&quot;: &quot;20065350824&quot;, &quot;key&quot;: &quot;pricing_page&quot;, &quot;layerId&quot;: &quot;20047761391&quot;, &quot;trafficAllocation&quot;: [{&quot;entityId&quot;: &quot;20061181493&quot;, &quot;endOfRange&quot;: 5000}, {&quot;entityId&quot;: &quot;20046091568&quot;, &quot;endOfRange&quot;: 10000}], &quot;forcedVariations&quot;: {&quot;1693726779.1607624005&quot;: &quot;most_popular&quot;, &quot;b3d9f4f9910bc46c43a8d65ab83d8570&quot;: &quot;most_popular&quot;}}], &quot;id&quot;: &quot;19972601768&quot;}], &quot;attributes&quot;: [{&quot;id&quot;: &quot;16822470375&quot;, &quot;key&quot;: &quot;user_id&quot;}, {&quot;id&quot;: &quot;17143601254&quot;, &quot;key&quot;: &quot;spammy&quot;}, {&quot;id&quot;: &quot;18175660309&quot;, &quot;key&quot;: &quot;organization_plan&quot;}, {&quot;id&quot;: &quot;18813001570&quot;, &quot;key&quot;: &quot;is_logged_in&quot;}, {&quot;id&quot;: &quot;19073851829&quot;, &quot;key&quot;: &quot;geo&quot;}], &quot;botFiltering&quot;: false, &quot;accountId&quot;: &quot;16737760170&quot;, &quot;events&quot;: [{&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;17911811441&quot;, &quot;key&quot;: &quot;hydro_click.dashboard.teacher_toolbox_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18124116703&quot;, &quot;key&quot;: &quot;submit.organizations.complete_sign_up&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18145892387&quot;, &quot;key&quot;: &quot;no_metric.tracked_outside_of_optimizely&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18178755568&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.add_repo&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18180553241&quot;, &quot;key&quot;: &quot;submit.repository_imports.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18186103728&quot;, &quot;key&quot;: &quot;click.help.learn_more_about_repository_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18188530140&quot;, &quot;key&quot;: &quot;test_event.do_not_use_in_production&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18191963644&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.transfer_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18195612788&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.import_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18210945499&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.invite_members&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18211063248&quot;, &quot;key&quot;: &quot;click.empty_org_repo_cta.create_repository&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18215721889&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.update_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18224360785&quot;, &quot;key&quot;: &quot;click.org_onboarding_checklist.dismiss&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18234832286&quot;, &quot;key&quot;: &quot;submit.organization_activation.complete&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18252392383&quot;, &quot;key&quot;: &quot;submit.org_repository.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18257551537&quot;, &quot;key&quot;: &quot;submit.org_member_invitation.create&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18259522260&quot;, &quot;key&quot;: &quot;submit.organization_profile.update&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18564603625&quot;, &quot;key&quot;: &quot;view.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18568612016&quot;, &quot;key&quot;: &quot;click.classroom_sign_in_click&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18572592540&quot;, &quot;key&quot;: &quot;view.classroom_name&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18574203855&quot;, &quot;key&quot;: &quot;click.classroom_create_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18582053415&quot;, &quot;key&quot;: &quot;click.classroom_select_organization&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18589463420&quot;, &quot;key&quot;: &quot;click.classroom_create_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591323364&quot;, &quot;key&quot;: &quot;click.classroom_create_first_classroom&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18591652321&quot;, &quot;key&quot;: &quot;click.classroom_grant_access&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18607131425&quot;, &quot;key&quot;: &quot;view.classroom_creation&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;18831680583&quot;, &quot;key&quot;: &quot;upgrade_account_plan&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;19064064515&quot;, &quot;key&quot;: &quot;click.signup&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19075373687&quot;, &quot;key&quot;: &quot;click.view_account_billing_page&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19077355841&quot;, &quot;key&quot;: &quot;click.dismiss_signup_prompt&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;19079713938&quot;, &quot;key&quot;: &quot;click.contact_sales&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;19120963070&quot;, &quot;key&quot;: &quot;click.compare_account_plans&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;19151690317&quot;, &quot;key&quot;: &quot;click.upgrade_account_cta&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19424193129&quot;, &quot;key&quot;: &quot;click.open_account_switcher&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19520330825&quot;, &quot;key&quot;: &quot;click.visit_account_profile&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;19540970635&quot;, &quot;key&quot;: &quot;click.switch_account_context&quot;}, {&quot;experimentIds&quot;: [&quot;19741925936&quot;], &quot;id&quot;: &quot;19730198868&quot;, &quot;key&quot;: &quot;submit.homepage_signup&quot;}, {&quot;experimentIds&quot;: [&quot;19741925936&quot;], &quot;id&quot;: &quot;19820830627&quot;, &quot;key&quot;: &quot;click.homepage_signup&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;19988571001&quot;, &quot;key&quot;: &quot;click.create_enterprise_trial&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;20036538294&quot;, &quot;key&quot;: &quot;click.create_organization_team&quot;}, {&quot;experimentIds&quot;: [], &quot;id&quot;: &quot;20040653299&quot;, &quot;key&quot;: &quot;click.input_enterprise_trial_form&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;20062030003&quot;, &quot;key&quot;: &quot;click.continue_with_team&quot;}, {&quot;experimentIds&quot;: [&quot;20065350824&quot;], &quot;id&quot;: &quot;20068947153&quot;, &quot;key&quot;: &quot;click.create_organization_free&quot;}], &quot;revision&quot;: &quot;485&quot;}" />
  <!-- To prevent page flashing, the optimizely JS needs to be loaded in the
    <head> tag before the DOM renders -->
  <script crossorigin="anonymous" defer="defer" integrity="sha512-W1d5sgym3BsWbUe7hCryQNFytsdsH6xKMY0wpid1izznZdSd6hBG7sOj+j6ISmYkoqPonCpkWKp0aG/MGGKRKg==" type="application/javascript" src="https://github.githubassets.com/assets/optimizely-5b5779b2.js"></script>



  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="">


      <meta name="expected-hostname" content="github.com">


    <meta name="enabled-features" content="MARKETPLACE_PENDING_INSTALLATIONS,AUTOCOMPLETE_EMOJIS_IN_MARKDOWN_EDITOR">

  <meta http-equiv="x-pjax-version" content="84db0b715551bfd4ae98a016e3bf5796b2c8959c66915d70183f7e9aef5eb3e7">
  

        <link href="https://github.com/google/styleguide/commits/gh-pages.atom" rel="alternate" title="Recent Commits to styleguide:gh-pages" type="application/atom+xml">

  <meta name="go-import" content="github.com/google/styleguide git https://github.com/google/styleguide.git">

  <meta name="octolytics-dimension-user_id" content="1342004" /><meta name="octolytics-dimension-user_login" content="google" /><meta name="octolytics-dimension-repository_id" content="35969061" /><meta name="octolytics-dimension-repository_nwo" content="google/styleguide" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="35969061" /><meta name="octolytics-dimension-repository_network_root_nwo" content="google/styleguide" />



    <link rel="canonical" href="https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <meta name="browser-optimizely-client-errors-url" content="https://api.github.com/_private/browser/optimizely_client/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg">

<meta name="theme-color" content="#1e2327">


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive page-blob" style="word-wrap: break-word;">
    

    <div class="position-relative js-header-wrapper ">
      <a href="#start-of-content" class="px-2 py-4 color-bg-info-inverse color-text-white show-on-focus js-skip-to-content">Skip to content</a>
      <span class="progress-pjax-loader width-full js-pjax-loader-bar Progress position-fixed">
    <span style="background-color: #79b8ff;width: 0%;" class="Progress-item progress-pjax-loader-bar "></span>
</span>      
      


            <header class="Header-old header-logged-out js-details-container Details position-relative f4 py-2" role="banner">
  <div class="container-xl d-lg-flex flex-items-center p-responsive">
    <div class="d-flex flex-justify-between flex-items-center">
        <a class="mr-4" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
          <svg height="32" class="octicon octicon-mark-github color-text-white" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path></svg>
        </a>

          <div class="d-lg-none css-truncate css-truncate-target width-fit p-2">
            

          </div>

        <div class="d-flex flex-items-center">
              <a href="/join?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo"
                class="d-inline-block d-lg-none f5 color-text-white no-underline border color-border-tertiary rounded-2 px-2 py-1 mr-3 mr-sm-5"
                data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4b241d761dbfd3c2281b5d20e955ec29a4c63bf1df039226fabe91b0d34b2987"
                {&quot;hydro-click&quot;=&gt;&quot;{\&quot;event_type\&quot;:\&quot;analytics.click\&quot;,\&quot;payload\&quot;:{\&quot;category\&quot;:\&quot;Sign up\&quot;,\&quot;action\&quot;:\&quot;click to sign up for account\&quot;,\&quot;label\&quot;:\&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out\&quot;,\&quot;originating_url\&quot;:\&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py\&quot;,\&quot;user_id\&quot;:null}}&quot;, &quot;hydro-click-hmac&quot;=&gt;&quot;13f08a1360287b462db3022d596a63b8718b02a5c0b81dfb239cae191c3998b9&quot;}
              >
                Sign&nbsp;up
              </a>

          <button class="btn-link d-lg-none mt-1 js-details-target" type="button" aria-label="Toggle navigation" aria-expanded="false">
            <svg height="24" class="octicon octicon-three-bars color-text-white" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M1 2.75A.75.75 0 011.75 2h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 2.75zm0 5A.75.75 0 011.75 7h12.5a.75.75 0 110 1.5H1.75A.75.75 0 011 7.75zM1.75 12a.75.75 0 100 1.5h12.5a.75.75 0 100-1.5H1.75z"></path></svg>
          </button>
        </div>
    </div>

    <div class="HeaderMenu HeaderMenu--logged-out position-fixed top-0 right-0 bottom-0 height-fit position-lg-relative d-lg-flex flex-justify-between flex-items-center flex-auto">
      <div class="d-flex d-lg-none flex-justify-end border-bottom color-bg-secondary p-3">
        <button class="btn-link js-details-target" type="button" aria-label="Toggle navigation" aria-expanded="false">
          <svg height="24" class="octicon octicon-x color-text-secondary" viewBox="0 0 24 24" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M5.72 5.72a.75.75 0 011.06 0L12 10.94l5.22-5.22a.75.75 0 111.06 1.06L13.06 12l5.22 5.22a.75.75 0 11-1.06 1.06L12 13.06l-5.22 5.22a.75.75 0 01-1.06-1.06L10.94 12 5.72 6.78a.75.75 0 010-1.06z"></path></svg>
        </button>
      </div>

        <nav class="mt-0 px-3 px-lg-0 mb-5 mb-lg-0" aria-label="Global">
          <ul class="d-lg-flex list-style-none">
              <li class="d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center ">
                <details class="HeaderMenu-details details-overlay details-reset width-full">
                  <summary class="HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block">
                    Why GitHub?
                    <svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                      <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
                  </summary>
                  <div class="dropdown-menu flex-auto rounded-1 color-bg-primary px-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4">
                    <a href="/features" class="py-2 lh-condensed-ultra d-block Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Features">Features <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a>
                    <ul class="list-style-none f5 pb-3">
                        <li class="edge-item-fix"><a href="/mobile" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Mobile <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/actions" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Actions <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/codespaces" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Codespaces <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/packages" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Packages <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/security" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Security <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/code-review/" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Code review <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/project-management/" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Project management <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/features/integrations" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">Integrations <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>

                    <ul class="list-style-none mb-0 border-lg-top pt-lg-3">
                      <li class="edge-item-fix"><a href="/sponsors" class="py-2 lh-condensed-ultra d-block no-underline Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Sponsors">GitHub Sponsors <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="/customer-stories" class="py-2 lh-condensed-ultra d-block no-underline Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Customer stories">Customer stories<span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>
                  </div>
                </details>
              </li>
              <li class="border-bottom border-lg-bottom-0 mr-0 mr-lg-3">
                <a href="/team" class="HeaderMenu-link no-underline py-3 d-block d-lg-inline-block" data-ga-click="(Logged out) Header, go to Team">Team</a>
              </li>
              <li class="border-bottom border-lg-bottom-0 mr-0 mr-lg-3">
                <a href="/enterprise" class="HeaderMenu-link no-underline py-3 d-block d-lg-inline-block" data-ga-click="(Logged out) Header, go to Enterprise">Enterprise</a>
              </li>

              <li class="d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center ">
                <details class="HeaderMenu-details details-overlay details-reset width-full">
                  <summary class="HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block">
                    Explore
                    <svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                      <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
                  </summary>

                  <div class="dropdown-menu flex-auto rounded-1 color-bg-primary px-0 pt-2 pb-0 mt-0 pb-4 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4">
                    <ul class="list-style-none mb-3">
                      <li class="edge-item-fix"><a href="/explore" class="py-2 lh-condensed-ultra d-block Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Explore">Explore GitHub <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>

                    <h4 class="color-text-tertiary text-normal text-mono f5 mb-2 border-lg-top pt-lg-3">Learn and contribute</h4>
                    <ul class="list-style-none mb-3">
                      <li class="edge-item-fix"><a href="/topics" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Topics">Topics <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                        <li class="edge-item-fix"><a href="/collections" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Collections">Collections <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="/trending" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Trending">Trending <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://lab.github.com/" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Learning lab">Learning Lab <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://opensource.guide" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Open source guides">Open source guides <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>

                    <h4 class="color-text-tertiary text-normal text-mono f5 mb-2 border-lg-top pt-lg-3">Connect with others</h4>
                    <ul class="list-style-none mb-0">
                      <li class="edge-item-fix"><a href="https://github.com/readme" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover">The ReadME Project <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://github.com/events" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Events">Events <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://github.community" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Community forum">Community forum <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://education.github.com" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to GitHub Education">GitHub Education <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://stars.github.com" class="py-2 pb-0 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to GitHub Stars Program">GitHub Stars program <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>
                  </div>
                </details>
              </li>

              <li class="border-bottom border-lg-bottom-0 mr-0 mr-lg-3">
                <a href="/marketplace" class="HeaderMenu-link no-underline py-3 d-block d-lg-inline-block" data-ga-click="(Logged out) Header, go to Marketplace">Marketplace</a>
              </li>

              <li class="d-block d-lg-flex flex-lg-nowrap flex-lg-items-center border-bottom border-lg-bottom-0 mr-0 mr-lg-3 edge-item-fix position-relative flex-wrap flex-justify-between d-flex flex-items-center ">
                <details class="HeaderMenu-details details-overlay details-reset width-full">
                  <summary class="HeaderMenu-summary HeaderMenu-link px-0 py-3 border-0 no-wrap d-block d-lg-inline-block">
                    Pricing
                    <svg x="0px" y="0px" viewBox="0 0 14 8" xml:space="preserve" fill="none" class="icon-chevon-down-mktg position-absolute position-lg-relative">
                       <path d="M1,1l6.2,6L13,1"></path>
                    </svg>
                  </summary>

                  <div class="dropdown-menu flex-auto rounded-1 color-bg-primary px-0 pt-2 pb-4 mt-0 p-lg-4 position-relative position-lg-absolute left-0 left-lg-n4">
                    <a href="/pricing" class="pb-2 lh-condensed-ultra d-block Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Pricing">Plans <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a>

                    <ul class="list-style-none mb-3">
                      <li class="edge-item-fix"><a href="/pricing#feature-comparison" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Compare plans">Compare plans <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://enterprise.github.com/contact" class="py-2 lh-condensed-ultra d-block Link--secondary no-underline f5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Contact Sales">Contact Sales <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>

                    <ul class="list-style-none mb-0 border-lg-top pt-lg-3">
                      <li class="edge-item-fix"><a href="/nonprofit" class="py-2 lh-condensed-ultra d-block no-underline Link--primary no-underline h5 Bump-link--hover" data-ga-click="(Logged out) Header, go to Nonprofits">Nonprofit <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                      <li class="edge-item-fix"><a href="https://education.github.com" class="py-2 pb-0 lh-condensed-ultra d-block no-underline Link--primary no-underline h5 Bump-link--hover"  data-ga-click="(Logged out) Header, go to Education">Education <span class="Bump-link-symbol float-right text-normal color-text-tertiary pr-3">&rarr;</span></a></li>
                    </ul>
                  </div>
                </details>
              </li>
          </ul>
        </nav>

      <div class="d-lg-flex flex-items-center px-3 px-lg-0 text-center text-lg-left">
          <div class="d-lg-flex min-width-0 mb-3 mb-lg-0">
            <div class="header-search flex-auto js-site-search position-relative flex-self-stretch flex-md-self-auto mb-3 mb-md-0 mr-0 mr-md-3 scoped-search site-scoped-search js-jump-to"
  role="combobox"
  aria-owns="jump-to-results"
  aria-label="Search or jump to"
  aria-haspopup="listbox"
  aria-expanded="false"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" role="search" aria-label="Site" data-scope-type="Repository" data-scope-id="35969061" data-scoped-search-url="/google/styleguide/search" data-owner-scoped-search-url="/orgs/google/search" data-unscoped-search-url="/search" action="/google/styleguide/search" accept-charset="UTF-8" method="get">
      <label class="form-control input-sm header-search-wrapper p-0 js-chromeless-input-container header-search-wrapper-jump-to position-relative d-flex flex-justify-between flex-items-center">
        <input type="text"
          class="form-control input-sm header-search-input jump-to-field js-jump-to-field js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          aria-autocomplete="list"
          aria-controls="jump-to-results"
          aria-label="Search"
          data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations"
          spellcheck="false"
          autocomplete="off"
          >
          <input type="hidden" data-csrf="true" class="js-data-jump-to-suggestions-path-csrf" value="P7NORZNq6CpGi6FC5zIibomLQvVA7LI9muYqJQ6FungQ0ecWl0hOO3YtnN/kBNh3KEpvyxL5zxPlPWXXA/0UuQ==" />
          <input type="hidden" class="js-site-search-type-field" name="type" >
            <img src="https://github.githubassets.com/images/search-key-slash.svg" alt="" class="mr-2 header-search-key-slash">

            <div class="Box position-absolute overflow-hidden d-none jump-to-suggestions js-jump-to-suggestions-container">
              
<ul class="d-none js-jump-to-suggestions-template-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-suggestion" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="suggestion">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

</ul>

<ul class="d-none js-jump-to-no-results-template-container">
  <li class="d-flex flex-justify-center flex-items-center f5 d-none js-jump-to-suggestion p-2">
    <span class="color-text-secondary">No suggested jump to results</span>
  </li>
</ul>

<ul id="jump-to-results" role="listbox" class="p-0 m-0 js-navigation-container jump-to-suggestions-results-container js-jump-to-suggestions-results-container">
  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-owner-scoped-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="owner_scoped_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this organization">
        In this organization
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>

  

<li class="d-flex flex-justify-start flex-items-center p-0 f5 navigation-item js-navigation-item js-jump-to-global-search d-none" role="option">
  <a tabindex="-1" class="no-underline d-flex flex-auto flex-items-center jump-to-suggestions-path js-jump-to-suggestion-path js-navigation-open p-2" href="" data-item-type="global_search">
    <div class="jump-to-octicon js-jump-to-octicon flex-shrink-0 mr-2 text-center d-none">
      <svg height="16" width="16" class="octicon octicon-repo flex-shrink-0 js-jump-to-octicon-repo d-none" title="Repository" aria-label="Repository" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-project flex-shrink-0 js-jump-to-octicon-project d-none" title="Project" aria-label="Project" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M1.75 0A1.75 1.75 0 000 1.75v12.5C0 15.216.784 16 1.75 16h12.5A1.75 1.75 0 0016 14.25V1.75A1.75 1.75 0 0014.25 0H1.75zM1.5 1.75a.25.25 0 01.25-.25h12.5a.25.25 0 01.25.25v12.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25V1.75zM11.75 3a.75.75 0 00-.75.75v7.5a.75.75 0 001.5 0v-7.5a.75.75 0 00-.75-.75zm-8.25.75a.75.75 0 011.5 0v5.5a.75.75 0 01-1.5 0v-5.5zM8 3a.75.75 0 00-.75.75v3.5a.75.75 0 001.5 0v-3.5A.75.75 0 008 3z"></path></svg>
      <svg height="16" width="16" class="octicon octicon-search flex-shrink-0 js-jump-to-octicon-search d-none" title="Search" aria-label="Search" viewBox="0 0 16 16" version="1.1" role="img"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>
    </div>

    <img class="avatar mr-2 flex-shrink-0 js-jump-to-suggestion-avatar d-none" alt="" aria-label="Team" src="" width="28" height="28">

    <div class="jump-to-suggestion-name js-jump-to-suggestion-name flex-auto overflow-hidden text-left no-wrap css-truncate css-truncate-target">
    </div>

    <div class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none js-jump-to-badge-search">
      <span class="js-jump-to-badge-search-text-default d-none" aria-label="in this repository">
        In this repository
      </span>
      <span class="js-jump-to-badge-search-text-global d-none" aria-label="in all of GitHub">
        All GitHub
      </span>
      <span aria-hidden="true" class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>

    <div aria-hidden="true" class="border rounded-1 flex-shrink-0 color-bg-tertiary px-1 color-text-tertiary ml-1 f6 d-none d-on-nav-focus js-jump-to-badge-jump">
      Jump to
      <span class="d-inline-block ml-1 v-align-middle">↵</span>
    </div>
  </a>
</li>


</ul>

            </div>
      </label>
</form>  </div>
</div>

          </div>

        <a href="/login?return_to=%2Fgoogle%2Fstyleguide%2Fblob%2Fgh-pages%2Fcpplint%2Fcpplint.py"
          class="HeaderMenu-link flex-shrink-0 no-underline mr-3"
          data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c0461ef0f52eec3937d9ff6497ef25ce3c6bcbe048639bd8865fb237b365d52e"
          data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">
          Sign in
        </a>
            <a href="/join?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=google%2Fstyleguide"
              class="HeaderMenu-link flex-shrink-0 d-inline-block no-underline border color-border-tertiary rounded-1 px-2 py-1"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c0461ef0f52eec3937d9ff6497ef25ce3c6bcbe048639bd8865fb237b365d52e"
              data-hydro-click="{&quot;event_type&quot;:&quot;analytics.click&quot;,&quot;payload&quot;:{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="13f08a1360287b462db3022d596a63b8718b02a5c0b81dfb239cae191c3998b9"
            >
              Sign up
            </a>
      </div>
    </div>
  </div>
</header>

    </div>

  <div id="start-of-content" class="show-on-focus"></div>





    <div data-pjax-replace id="js-flash-container">


  <template class="js-flash-template">
    <div class="flash flash-full  {{ className }}">
  <div class=" px-2" >
    <button class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
    </button>
    
      <div>{{ message }}</div>

  </div>
</div>
  </template>
</div>


    

  <include-fragment class="js-notification-shelf-include-fragment" data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>




  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
  >
          <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" data-pjax-container >
      

      


    






  


  <div class="color-bg-secondary pt-3 hide-full-screen mb-5">

      <div class="d-flex mb-3 px-3 px-md-4 px-lg-5">

        <div class="flex-auto min-width-0 width-fit mr-3">
            <h1 class=" d-flex flex-wrap flex-items-center break-word f3 text-normal">
    <svg class="octicon octicon-repo color-text-secondary mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2 2.5A2.5 2.5 0 014.5 0h8.75a.75.75 0 01.75.75v12.5a.75.75 0 01-.75.75h-2.5a.75.75 0 110-1.5h1.75v-2h-8a1 1 0 00-.714 1.7.75.75 0 01-1.072 1.05A2.495 2.495 0 012 11.5v-9zm10.5-1V9h-8c-.356 0-.694.074-1 .208V2.5a1 1 0 011-1h8zM5 12.25v3.25a.25.25 0 00.4.2l1.45-1.087a.25.25 0 01.3 0L8.6 15.7a.25.25 0 00.4-.2v-3.25a.25.25 0 00-.25-.25h-3.5a.25.25 0 00-.25.25z"></path></svg>
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="organization" data-hovercard-url="/orgs/google/hovercard" href="/google">google</a>
    </span>
    <span class="mx-1 flex-self-stretch color-text-secondary">/</span>
  <strong itemprop="name" class="mr-2 flex-self-stretch">
    <a data-pjax="#js-repo-pjax-container" class="" href="/google/styleguide">styleguide</a>
  </strong>
  
</h1>


        </div>

          <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">

  <li>
      <a class="tooltipped tooltipped-s btn btn-sm rounded-right-0" aria-label="You must be signed in to change notification settings" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="14aef6562db2d649d22e307165c5d97c7852957d268fab26a47c638a922be548" href="/login?return_to=%2Fgoogle%2Fstyleguide">
    <svg class="octicon octicon-bell" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path d="M8 16a2 2 0 001.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 008 16z"></path><path fill-rule="evenodd" d="M8 1.5A3.5 3.5 0 004.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.018.018 0 00-.003.01l.001.006c0 .002.002.004.004.006a.017.017 0 00.006.004l.007.001h10.964l.007-.001a.016.016 0 00.006-.004.016.016 0 00.004-.006l.001-.007a.017.017 0 00-.003-.01l-1.703-2.554a1.75 1.75 0 01-.294-.97V5A3.5 3.5 0 008 1.5zM3 5a5 5 0 0110 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.518 1.518 0 0113.482 13H2.518a1.518 1.518 0 01-1.263-2.36l1.703-2.554A.25.25 0 003 7.947V5z"></path></svg>
    Notifications
</a>
  </li>

  <li>
          <a class="btn btn-sm btn-with-count  tooltipped tooltipped-s" aria-label="You must be signed in to star a repository" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:35969061,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="6a729aaa25ae93b332248f823dad4832afe16f78cfa91363c1e64c901036bb7e" href="/login?return_to=%2Fgoogle%2Fstyleguide">
      <svg class="octicon octicon-star v-align-text-bottom mr-1" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.75.75 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25zm0 2.445L6.615 5.5a.75.75 0 01-.564.41l-3.097.45 2.24 2.184a.75.75 0 01.216.664l-.528 3.084 2.769-1.456a.75.75 0 01.698 0l2.77 1.456-.53-3.084a.75.75 0 01.216-.664l2.24-2.183-3.096-.45a.75.75 0 01-.564-.41L8 2.694v.001z"></path></svg>
      <span>
        Star
</span></a>
    <a class="social-count js-social-count" href="/google/styleguide/stargazers"
      aria-label="27134 users starred this repository">
      27.1k
    </a>

  </li>

  <li>
        <a class="btn btn-sm btn-with-count tooltipped tooltipped-s" aria-label="You must be signed in to fork a repository" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:35969061,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="83b596fe1bb5b999af96815dc45a7ee6d329383384fad3218eb696270538b5c0" href="/login?return_to=%2Fgoogle%2Fstyleguide">
          <svg class="octicon octicon-repo-forked" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5 3.25a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm0 2.122a2.25 2.25 0 10-1.5 0v.878A2.25 2.25 0 005.75 8.5h1.5v2.128a2.251 2.251 0 101.5 0V8.5h1.5a2.25 2.25 0 002.25-2.25v-.878a2.25 2.25 0 10-1.5 0v.878a.75.75 0 01-.75.75h-4.5A.75.75 0 015 6.25v-.878zm3.75 7.378a.75.75 0 11-1.5 0 .75.75 0 011.5 0zm3-8.75a.75.75 0 100-1.5.75.75 0 000 1.5z"></path></svg>
          Fork
</a>
      <a href="/google/styleguide/network/members" class="social-count"
         aria-label="10333 users forked this repository">
        10.3k
      </a>
  </li>
</ul>

      </div>
        
<nav aria-label="Repository" data-pjax="#js-repo-pjax-container" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5 bg-gray-light">
  <ul class="UnderlineNav-body list-style-none ">
          <li class="d-flex">
        <a class="js-selected-navigation-item selected UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i0code-tab" data-hotkey="g c" data-ga-click="Repository, Navigation click, Code tab" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments /google/styleguide" href="/google/styleguide">
              <svg class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M4.72 3.22a.75.75 0 011.06 1.06L2.06 8l3.72 3.72a.75.75 0 11-1.06 1.06L.47 8.53a.75.75 0 010-1.06l4.25-4.25zm6.56 0a.75.75 0 10-1.06 1.06L13.94 8l-3.72 3.72a.75.75 0 101.06 1.06l4.25-4.25a.75.75 0 000-1.06l-4.25-4.25z"></path></svg>
            <span data-content="Code">Code</span>
              <span title="Not available" class="Counter "></span>
</a>

      </li>
      <li class="d-flex">
        <a class="js-selected-navigation-item UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i1issues-tab" data-hotkey="g i" data-ga-click="Repository, Navigation click, Issues tab" data-selected-links="repo_issues repo_labels repo_milestones /google/styleguide/issues" href="/google/styleguide/issues">
              <svg class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm9 3a1 1 0 11-2 0 1 1 0 012 0zm-.25-6.25a.75.75 0 00-1.5 0v3.5a.75.75 0 001.5 0v-3.5z"></path></svg>
            <span data-content="Issues">Issues</span>
              <span title="174" class="Counter ">174</span>
</a>

      </li>
      <li class="d-flex">
        <a class="js-selected-navigation-item UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i2pull-requests-tab" data-hotkey="g p" data-ga-click="Repository, Navigation click, Pull requests tab" data-selected-links="repo_pulls checks /google/styleguide/pulls" href="/google/styleguide/pulls">
              <svg class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.177 3.073L9.573.677A.25.25 0 0110 .854v4.792a.25.25 0 01-.427.177L7.177 3.427a.25.25 0 010-.354zM3.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122v5.256a2.251 2.251 0 11-1.5 0V5.372A2.25 2.25 0 011.5 3.25zM11 2.5h-1V4h1a1 1 0 011 1v5.628a2.251 2.251 0 101.5 0V5A2.5 2.5 0 0011 2.5zm1 10.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM3.75 12a.75.75 0 100 1.5.75.75 0 000-1.5z"></path></svg>
            <span data-content="Pull requests">Pull requests</span>
              <span title="120" class="Counter ">120</span>
</a>

      </li>
      <li class="d-flex">
        <a class="js-selected-navigation-item UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i3actions-tab" data-hotkey="g a" data-ga-click="Repository, Navigation click, Actions tab" data-selected-links="repo_actions /google/styleguide/actions" href="/google/styleguide/actions">
              <svg class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.5 8a6.5 6.5 0 1113 0 6.5 6.5 0 01-13 0zM8 0a8 8 0 100 16A8 8 0 008 0zM6.379 5.227A.25.25 0 006 5.442v5.117a.25.25 0 00.379.214l4.264-2.559a.25.25 0 000-.428L6.379 5.227z"></path></svg>
            <span data-content="Actions">Actions</span>
              <span title="Not available" class="Counter "></span>
</a>

      </li>
      <li class="d-flex">
        <a class="js-selected-navigation-item UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i4security-tab" data-hotkey="g s" data-ga-click="Repository, Navigation click, Security tab" data-selected-links="security overview alerts policy token_scanning code_scanning /google/styleguide/security" href="/google/styleguide/security">
              <svg class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.467.133a1.75 1.75 0 011.066 0l5.25 1.68A1.75 1.75 0 0115 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.7 1.7 0 01-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 011.217-1.667l5.25-1.68zm.61 1.429a.25.25 0 00-.153 0l-5.25 1.68a.25.25 0 00-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.2.2 0 00.154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.25.25 0 00-.174-.237l-5.25-1.68zM9 10.5a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.75a.75.75 0 10-1.5 0v3a.75.75 0 001.5 0v-3z"></path></svg>
            <span data-content="Security">Security</span>
              <include-fragment src="/google/styleguide/security/overall-count" accept="text/fragment+html"></include-fragment>
</a>

      </li>
      <li class="d-flex">
        <a class="js-selected-navigation-item UnderlineNav-item hx_underlinenav-item no-wrap js-responsive-underlinenav-item" data-tab-item="i5insights-tab" data-ga-click="Repository, Navigation click, Insights tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people /google/styleguide/pulse" href="/google/styleguide/pulse">
              <svg class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.5 1.75a.75.75 0 00-1.5 0v12.5c0 .414.336.75.75.75h14.5a.75.75 0 000-1.5H1.5V1.75zm14.28 2.53a.75.75 0 00-1.06-1.06L10 7.94 7.53 5.47a.75.75 0 00-1.06 0L3.22 8.72a.75.75 0 001.06 1.06L7 7.06l2.47 2.47a.75.75 0 001.06 0l5.25-5.25z"></path></svg>
            <span data-content="Insights">Insights</span>
              <span title="Not available" class="Counter "></span>
</a>

      </li>

</ul>        <div class="position-absolute right-0 pr-3 pr-md-4 pr-lg-5 js-responsive-underlinenav-overflow" style="visibility:hidden;">
      <details class="details-overlay details-reset position-relative">
  <summary role="button">          <div class="UnderlineNav-item mr-0 border-0">
            <svg class="octicon octicon-kebab-horizontal" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M8 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM1.5 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm13 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path></svg>
            <span class="sr-only">More</span>
          </div>
</summary>
  <div>          <details-menu role="menu" class="dropdown-menu dropdown-menu-sw ">
  
            <ul>
                <li data-menu-item="i0code-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide" href="/google/styleguide">
                    Code
</a>                </li>
                <li data-menu-item="i1issues-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide/issues" href="/google/styleguide/issues">
                    Issues
</a>                </li>
                <li data-menu-item="i2pull-requests-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide/pulls" href="/google/styleguide/pulls">
                    Pull requests
</a>                </li>
                <li data-menu-item="i3actions-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide/actions" href="/google/styleguide/actions">
                    Actions
</a>                </li>
                <li data-menu-item="i4security-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide/security" href="/google/styleguide/security">
                    Security
</a>                </li>
                <li data-menu-item="i5insights-tab" hidden>
                  <a role="menuitem" class="js-selected-navigation-item dropdown-item" data-selected-links=" /google/styleguide/pulse" href="/google/styleguide/pulse">
                    Insights
</a>                </li>
            </ul>

</details-menu></div>
</details>    </div>

</nav>
  </div>


<div class="container-xl clearfix new-discussion-timeline px-3 px-md-4 px-lg-5">
  <div id="repo-content-pjax-container" class="repository-content " >

    
      
    

<div>
  


    <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/google/styleguide/blob/6e239d7f906ee456b926be229f3e4ee6bad53e42/cpplint/cpplint.py">Permalink</a>

    <!-- blob contrib key: blob_contributors:v22:36ff8f3526d373702e043749d73a183586dd4e812a591d517213eeea78bfd746 -->

    <div class="d-flex flex-items-start flex-shrink-0 pb-3 flex-wrap flex-md-nowrap flex-justify-between flex-md-justify-start">
      
<div class="position-relative">
  <details class="details-reset details-overlay mr-0 mb-0 " id="branch-select-menu">
    <summary class="btn css-truncate"
            data-hotkey="w"
            title="Switch branches or tags">
      <svg class="octicon octicon-git-branch text-gray" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M11.75 2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm-2.25.75a2.25 2.25 0 113 2.122V6A2.5 2.5 0 0110 8.5H6a1 1 0 00-1 1v1.128a2.251 2.251 0 11-1.5 0V5.372a2.25 2.25 0 111.5 0v1.836A2.492 2.492 0 016 7h4a1 1 0 001-1v-.628A2.25 2.25 0 019.5 3.25zM4.25 12a.75.75 0 100 1.5.75.75 0 000-1.5zM3.5 3.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0z"></path></svg>
      <span class="css-truncate-target" data-menu-button>gh-pages</span>
      <span class="dropdown-caret"></span>
    </summary>

      <div class="SelectMenu">
  <div class="SelectMenu-modal">
    <header class="SelectMenu-header">
      <span class="SelectMenu-title">Switch branches/tags</span>
      <button class="SelectMenu-closeButton" type="button" data-toggle-for="branch-select-menu"><svg aria-label="Close menu" aria-hidden="false" class="octicon octicon-x" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg></button>
    </header>

    <input-demux data-action="tab-container-change:input-demux#storeInput tab-container-changed:input-demux#updateInput">
      <tab-container class="d-flex flex-column js-branches-tags-tabs" style="min-height: 0;">
        <div class="SelectMenu-filter">
          <input data-target="input-demux.source"
                 id="context-commitish-filter-field"
                 class="SelectMenu-input form-control"
                 aria-owns="ref-list-branches"
                 data-controls-ref-menu-id="ref-list-branches"
                 autofocus
                 autocomplete="off"
                 aria-label="Filter branches/tags"
                 placeholder="Filter branches/tags"
                 type="text"
          >
        </div>

        <div class="SelectMenu-tabs" role="tablist" data-target="input-demux.control">
          <button class="SelectMenu-tab" type="button" role="tab" aria-selected="true">Branches</button>
          <button class="SelectMenu-tab" type="button" role="tab">Tags</button>
        </div>

        <div role="tabpanel" id="ref-list-branches" data-filter-placeholder="Filter branches/tags" class="d-flex flex-column flex-auto overflow-auto" tabindex="">
          <ref-selector
            type="branch"
            data-targets="input-demux.sinks"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            query-endpoint="/google/styleguide/refs"
            
            cache-key="v0:1595507953.0"
            current-committish="Z2gtcGFnZXM="
            default-branch="Z2gtcGFnZXM="
            name-with-owner="Z29vZ2xlL3N0eWxlZ3VpZGU="
          >

            <template data-target="ref-selector.noMatchTemplate">
                <div class="SelectMenu-message">Nothing to show</div>
            </template>

            <!-- TODO: this max-height is necessary or else the branch list won't scroll.  why? -->
            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list" style="max-height: 330px">
              <div class="SelectMenu-loading pt-3 pb-0" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" viewBox="0 0 16 16" fill="none" width="32" height="32">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke">
    <animateTransform attributeName="transform" type="rotate" from="0 8 8" to="360 8 8" dur="1s" repeatCount="indefinite" />
  </path>
</svg>
              </div>
            </div>

            <template data-target="ref-selector.itemTemplate">
              <a href="https://github.com/google/styleguide/blob/{{ urlEncodedRefName }}/cpplint/cpplint.py" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}">
                <svg class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"></path></svg>
                <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
                <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span> 
              </a>
            </template>
            <footer class="SelectMenu-footer"><a href="/google/styleguide/branches">View all branches</a></footer>
          </ref-selector>

        </div>

        <div role="tabpanel" id="tags-menu" data-filter-placeholder="Find a tag" class="d-flex flex-column flex-auto overflow-auto" tabindex="" hidden>
          <ref-selector
            type="tag"
            data-action="
              input-entered:ref-selector#inputEntered
              tab-selected:ref-selector#tabSelected
              focus-list:ref-selector#focusFirstListMember
            "
            data-targets="input-demux.sinks"
            query-endpoint="/google/styleguide/refs"
            cache-key="v0:1595507953.0"
            current-committish="Z2gtcGFnZXM="
            default-branch="Z2gtcGFnZXM="
            name-with-owner="Z29vZ2xlL3N0eWxlZ3VpZGU="
          >

            <template data-target="ref-selector.noMatchTemplate">
              <div class="SelectMenu-message" data-index="{{ index }}">Nothing to show</div>
            </template>

            <template data-target="ref-selector.itemTemplate">
              <a href="https://github.com/google/styleguide/blob/{{ urlEncodedRefName }}/cpplint/cpplint.py" class="SelectMenu-item" role="menuitemradio" rel="nofollow" aria-checked="{{ isCurrent }}" data-index="{{ index }}">
                <svg class="octicon octicon-check SelectMenu-icon SelectMenu-icon--check" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z"></path></svg>
                <span class="flex-1 css-truncate css-truncate-overflow {{ isFilteringClass }}">{{ refName }}</span>
                <span hidden="{{ isNotDefault }}" class="Label Label--secondary flex-self-start">default</span>
              </a>
            </template>
            <div data-target="ref-selector.listContainer" role="menu" class="SelectMenu-list" style="max-height: 330px">
              <div class="SelectMenu-loading pt-3 pb-0" aria-label="Menu is loading">
                <svg style="box-sizing: content-box; color: var(--color-icon-primary);" viewBox="0 0 16 16" fill="none" width="32" height="32">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke">
    <animateTransform attributeName="transform" type="rotate" from="0 8 8" to="360 8 8" dur="1s" repeatCount="indefinite" />
  </path>
</svg>
              </div>
            </div>
            <footer class="SelectMenu-footer"><a href="/google/styleguide/tags">View all tags</a></footer>
          </ref-selector>
        </div>
      </tab-container>
    </input-demux>
  </div>
</div>

  </details>

</div>

      <h2 id="blob-path" class="breadcrumb flex-auto flex-self-center min-width-0 text-normal mx-2 width-full width-md-auto flex-order-1 flex-md-order-none mt-3 mt-md-0">
        <span class="js-repo-root text-bold"><span class="js-path-segment d-inline-block wb-break-all"><a data-pjax="true" href="/google/styleguide"><span>styleguide</span></a></span></span><span class="separator">/</span><span class="js-path-segment d-inline-block wb-break-all"><a data-pjax="true" href="/google/styleguide/tree/gh-pages/cpplint"><span>cpplint</span></a></span><span class="separator">/</span><strong class="final-path">cpplint.py</strong>
          <span class="separator">/</span><details class="details-reset details-overlay d-inline" id="jumpto-symbol-select-menu">
  <summary class="btn-link Link--secondary css-truncate" aria-haspopup="true" data-hotkey="r" data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_blob_definitions&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_blob_definitions&quot;,&quot;repository_id&quot;:35969061,&quot;ref&quot;:&quot;gh-pages&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f21027ef349b788e464802cdd3d13c21b808ac704c7be27b6464180efca10ead">
      <svg class="octicon octicon-code" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4.72 3.22a.75.75 0 011.06 1.06L2.06 8l3.72 3.72a.75.75 0 11-1.06 1.06L.47 8.53a.75.75 0 010-1.06l4.25-4.25zm6.56 0a.75.75 0 10-1.06 1.06L13.94 8l-3.72 3.72a.75.75 0 101.06 1.06l4.25-4.25a.75.75 0 000-1.06l-4.25-4.25z"></path></svg>
    <span data-menu-button>Jump to</span>
    <span class="dropdown-caret"></span>
  </summary>
  <details-menu class="SelectMenu SelectMenu--hasFilter" role="menu">
    <div class="SelectMenu-modal">
      <header class="SelectMenu-header">
        <span class="SelectMenu-title">Code definitions</span>
        <button class="SelectMenu-closeButton" type="button" data-toggle-for="jumpto-symbol-select-menu">
          <svg aria-label="Close menu" class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" role="img"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
        </button>
      </header>
      <div class="SelectMenu-list">
          <div class="SelectMenu-blankslate">
            <p class="mb-0 color-text-secondary">
              No definitions found in this file.
            </p>
          </div>
        <div data-filterable-for="jumpto-symbols-filter-field" data-filterable-type="substring">
        </div>
      </div>
      <footer class="SelectMenu-footer">
        <div class="d-flex flex-justify-between">
          Code navigation not available for this commit
          <svg class="octicon octicon-dot-fill text-light-gray" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8z"></path></svg>
        </div>
      </footer>
    </div>
  </details-menu>
</details>

      </h2>
      <a href="/google/styleguide/find/gh-pages"
            class="js-pjax-capture-input btn mr-2 d-none d-md-block"
            data-pjax
            data-hotkey="t">
        Go to file
      </a>

      <details id="blob-more-options-details" class="details-overlay details-reset position-relative">
  <summary role="button" type="button" class="btn ">          <svg aria-label="More options" class="octicon octicon-kebab-horizontal" height="16" viewBox="0 0 16 16" version="1.1" width="16" role="img"><path d="M8 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM1.5 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm13 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path></svg>
</summary>
  <div>          <ul class="dropdown-menu dropdown-menu-sw">
            <li class="d-block d-md-none">
              <a class="dropdown-item d-flex flex-items-baseline" data-hydro-click="{&quot;event_type&quot;:&quot;repository.click&quot;,&quot;payload&quot;:{&quot;target&quot;:&quot;FIND_FILE_BUTTON&quot;,&quot;repository_id&quot;:35969061,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="31e79d530e652deaa9faadbbc1bfef9af29a6ff0ea768f15fde21637fcd6eee2" data-ga-click="Repository, find file, location:repo overview" data-hotkey="t" data-pjax="true" href="/google/styleguide/find/gh-pages">
                <span class="flex-auto">Go to file</span>
                <span class="text-small color-text-secondary" aria-hidden="true">T</span>
</a>            </li>
            <li data-toggle-for="blob-more-options-details">
              <button type="button" data-toggle-for="jumpto-line-details-dialog" class="btn-link dropdown-item">
                <span class="d-flex flex-items-baseline">
                  <span class="flex-auto">Go to line</span>
                  <span class="text-small color-text-secondary" aria-hidden="true">L</span>
                </span>
              </button>
            </li>
            <li data-toggle-for="blob-more-options-details">
              <button type="button" data-toggle-for="jumpto-symbol-select-menu" class="btn-link dropdown-item">
                <span class="d-flex flex-items-baseline">
                  <span class="flex-auto">Go to definition</span>
                  <span class="text-small color-text-secondary" aria-hidden="true">R</span>
                </span>
              </button>
            </li>
            <li class="dropdown-divider" role="none"></li>
            <li>
              <clipboard-copy value="cpplint/cpplint.py" class="dropdown-item cursor-pointer" data-toggle-for="blob-more-options-details">
                Copy path
              </clipboard-copy>
            </li>
            <li>
              <clipboard-copy value="https://github.com/google/styleguide/blob/6e239d7f906ee456b926be229f3e4ee6bad53e42/cpplint/cpplint.py" class="dropdown-item cursor-pointer" data-toggle-for="blob-more-options-details" >
                <span class="d-flex flex-items-baseline">
                  <span class="flex-auto">Copy permalink</span>
                </span>
              </clipboard-copy>
            </li>
          </ul>
</div>
</details>    </div>



    <div class="Box d-flex flex-column flex-shrink-0 mb-3">
      
  <div class="Box-header Box-header--blue Details js-details-container">
      <div class="d-flex flex-items-center">
        <span class="flex-shrink-0 ml-n1 mr-n1 mt-n1 mb-n1">
          <a rel="contributor" data-skip-pjax="true" data-hovercard-type="user" data-hovercard-url="/users/allight/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/allight"><img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/3878235?s=48&amp;v=4" width="24" height="24" alt="@allight" /></a>
        </span>
        <div class="flex-1 d-flex flex-items-center ml-3 min-width-0">
          <div class="css-truncate css-truncate-overflow">
            <a class="text-bold Link--primary" rel="contributor" data-hovercard-type="user" data-hovercard-url="/users/allight/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/allight">allight</a>

              <span>
                <a data-pjax="true" title="Update language to comply with Android&#39;s inclusive language guidance

See https://source.android.com/setup/contribute/respectful-code for
reference

cpplint.py is copied into AOSP from this github version so update it
here first.

Bug: 161896447
Test: None (comments only)" class="Link--secondary" href="/google/styleguide/commit/6c31e522d9173e2e07f6b026ecbfe6e48fe20383">Update language to comply with Android's inclusive language guidance</a>
              </span>
          </div>

            <span class="hidden-text-expander ml-1 flex-shrink-0">
              <button type="button" class="ellipsis-expander js-details-target" aria-expanded="false">&hellip;</button>
            </span>

          <span class="ml-2">
            <include-fragment accept="text/fragment+html" src="/google/styleguide/commit/6c31e522d9173e2e07f6b026ecbfe6e48fe20383/rollup?direction=e" class="d-inline"></include-fragment>
          </span>
        </div>
        <div class="ml-3 d-flex flex-shrink-0 flex-items-center flex-justify-end color-text-secondary no-wrap">
          <span class="d-none d-md-inline">
            <span>Latest commit</span>
            <a class="text-small text-mono Link--secondary" href="/google/styleguide/commit/6c31e522d9173e2e07f6b026ecbfe6e48fe20383" data-pjax>6c31e52</a>
            <span itemprop="dateModified"><relative-time datetime="2020-07-29T01:21:22Z" class="no-wrap">Jul 29, 2020</relative-time></span>
          </span>

          <a data-pjax href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py" class="ml-3 no-wrap Link--primary no-underline">
            <svg class="octicon octicon-history text-gray" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.643 3.143L.427 1.927A.25.25 0 000 2.104V5.75c0 .138.112.25.25.25h3.646a.25.25 0 00.177-.427L2.715 4.215a6.5 6.5 0 11-1.18 4.458.75.75 0 10-1.493.154 8.001 8.001 0 101.6-5.684zM7.75 4a.75.75 0 01.75.75v2.992l2.028.812a.75.75 0 01-.557 1.392l-2.5-1A.75.75 0 017 8.25v-3.5A.75.75 0 017.75 4z"></path></svg>
            <span class="d-none d-sm-inline">
              <strong>History</strong>
            </span>
          </a>
        </div>
      </div>
        <div class="Details-content--hidden ml-5 mt-2"><pre class="mt-2 f6 ws-pre-wrap">See <a href="https://source.android.com/setup/contribute/respectful-code" rel="nofollow">https://source.android.com/setup/contribute/respectful-code</a> for
reference

cpplint.py is copied into AOSP from this github version so update it
here first.

Bug: 161896447
Test: None (comments only)</pre></div>

  </div>

  <div class="Box-body d-flex flex-items-center flex-auto border-bottom-0 flex-wrap" >
    <details class="details-reset details-overlay details-overlay-dark lh-default color-text-primary float-left mr-3" id="blob_contributors_box">
      <summary class="Link--primary">
        <svg class="octicon octicon-people text-gray" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.5 3.5a2 2 0 100 4 2 2 0 000-4zM2 5.5a3.5 3.5 0 115.898 2.549 5.507 5.507 0 013.034 4.084.75.75 0 11-1.482.235 4.001 4.001 0 00-7.9 0 .75.75 0 01-1.482-.236A5.507 5.507 0 013.102 8.05 3.49 3.49 0 012 5.5zM11 4a.75.75 0 100 1.5 1.5 1.5 0 01.666 2.844.75.75 0 00-.416.672v.352a.75.75 0 00.574.73c1.2.289 2.162 1.2 2.522 2.372a.75.75 0 101.434-.44 5.01 5.01 0 00-2.56-3.012A3 3 0 0011 4z"></path></svg>
        <strong>17</strong>
        
        contributors
      </summary>
      <details-dialog
        class="Box Box--overlay d-flex flex-column anim-fade-in fast"
        aria-label="Users who have contributed to this file"
        src="/google/styleguide/contributors-list/gh-pages/cpplint/cpplint.py" preload>
        <div class="Box-header">
          <button class="Box-btn-octicon btn-octicon float-right" type="button" aria-label="Close dialog" data-close-dialog>
            <svg class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
          </button>
          <h3 class="Box-title">
            Users who have contributed to this file
          </h3>
        </div>
        <include-fragment>
          <svg style="box-sizing: content-box; color: var(--color-icon-primary);" viewBox="0 0 16 16" fill="none" width="32" height="32" class="my-3 mx-auto d-block">
  <circle cx="8" cy="8" r="7" stroke="currentColor" stroke-opacity="0.25" stroke-width="2" vector-effect="non-scaling-stroke" />
  <path d="M15 8a7.002 7.002 0 00-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" vector-effect="non-scaling-stroke">
    <animateTransform attributeName="transform" type="rotate" from="0 8 8" to="360 8 8" dur="1s" repeatCount="indefinite" />
  </path>
</svg>
        </include-fragment>
      </details-dialog>
    </details>
      <span class="">
    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/eglaysher/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=eglaysher">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/40939?s=48&amp;v=4" width="24" height="24" alt="@eglaysher" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/LukeCz/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=LukeCz">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/6900878?s=48&amp;v=4" width="24" height="24" alt="@LukeCz" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/iam/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=iam">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/11281919?s=48&amp;v=4" width="24" height="24" alt="@iam" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/lhchavez/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=lhchavez">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/168028?s=48&amp;v=4" width="24" height="24" alt="@lhchavez" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/allight/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=allight">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/3878235?s=48&amp;v=4" width="24" height="24" alt="@allight" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/eccentricon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=eccentricon">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/1280710?s=48&amp;v=4" width="24" height="24" alt="@eccentricon" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/sergeyvfx/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=sergeyvfx">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/23765?s=48&amp;v=4" width="24" height="24" alt="@sergeyvfx" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/schoetbi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=schoetbi">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/764173?s=48&amp;v=4" width="24" height="24" alt="@schoetbi" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/piotr-semenov/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=piotr-semenov">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/4867631?s=48&amp;v=4" width="24" height="24" alt="@piotr-semenov" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/a-googler/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=a-googler">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/20343323?s=48&amp;v=4" width="24" height="24" alt="@a-googler" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nealrichardson/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=nealrichardson">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/2975928?s=48&amp;v=4" width="24" height="24" alt="@nealrichardson" /> 
</a>    <a class="avatar-link" data-hovercard-type="user" data-hovercard-url="/users/m-chaturvedi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/google/styleguide/commits/gh-pages/cpplint/cpplint.py?author=m-chaturvedi">
      <img class="avatar mr-2 avatar-user" src="https://avatars.githubusercontent.com/u/1082919?s=48&amp;v=4" width="24" height="24" alt="@m-chaturvedi" /> 
</a>
    <button type="button" class="btn-link lh-default" data-toggle-for="blob_contributors_box">
      +5
    </button>
</span>

  </div>
    </div>







    <div class="Box mt-3 position-relative
      ">
      
<div class="Box-header py-2 d-flex flex-column flex-shrink-0 flex-md-row flex-md-items-center">
  <div class="text-mono f6 flex-auto pr-3 flex-order-2 flex-md-order-1 mt-2 mt-md-0">
      <include-fragment src="/google/styleguide/codeowners/gh-pages/cpplint/cpplint.py"></include-fragment>

      <span class="file-mode" title="File mode">executable file</span>
      <span class="file-info-divider"></span>
      6244 lines (5346 sloc)
      <span class="file-info-divider"></span>
    235 KB
  </div>

  <div class="d-flex py-1 py-md-0 flex-auto flex-order-1 flex-md-order-2 flex-sm-grow-0 flex-justify-between">

    <div class="BtnGroup">
      <a href="/google/styleguide/raw/gh-pages/cpplint/cpplint.py" id="raw-url" role="button" class="btn btn-sm BtnGroup-item ">Raw</a>
        <a href="/google/styleguide/blame/gh-pages/cpplint/cpplint.py" data-hotkey="b" role="button" class="btn js-update-url-with-hash btn-sm BtnGroup-item ">Blame</a>
    </div>

    <div>
          <a class="btn-octicon tooltipped tooltipped-nw js-remove-unless-platform"
             data-platforms="windows,mac"
             href="https://desktop.github.com"
             aria-label="Open this file in GitHub Desktop"
             data-ga-click="Repository, open with desktop">
              <svg class="octicon octicon-device-desktop" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.75 2.5h12.5a.25.25 0 01.25.25v7.5a.25.25 0 01-.25.25H1.75a.25.25 0 01-.25-.25v-7.5a.25.25 0 01.25-.25zM14.25 1H1.75A1.75 1.75 0 000 2.75v7.5C0 11.216.784 12 1.75 12h3.727c-.1 1.041-.52 1.872-1.292 2.757A.75.75 0 004.75 16h6.5a.75.75 0 00.565-1.243c-.772-.885-1.193-1.716-1.292-2.757h3.727A1.75 1.75 0 0016 10.25v-7.5A1.75 1.75 0 0014.25 1zM9.018 12H6.982a5.72 5.72 0 01-.765 2.5h3.566a5.72 5.72 0 01-.765-2.5z"></path></svg>
          </a>

          <a href="/login?return_to=%2Fgoogle%2Fstyleguide%2Fblob%2Fgh-pages%2Fcpplint%2Fcpplint.py" class="btn-octicon disabled tooltipped tooltipped-nw"
            aria-label="You must be signed in to make or propose changes">
            <svg class="octicon octicon-pencil" height="16" viewBox="0 0 16 16" version="1.1" width="16" aria-hidden="true"><path fill-rule="evenodd" d="M11.013 1.427a1.75 1.75 0 012.474 0l1.086 1.086a1.75 1.75 0 010 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 01-.927-.928l.929-3.25a1.75 1.75 0 01.445-.758l8.61-8.61zm1.414 1.06a.25.25 0 00-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 000-.354l-1.086-1.086zM11.189 6.25L9.75 4.81l-6.286 6.287a.25.25 0 00-.064.108l-.558 1.953 1.953-.558a.249.249 0 00.108-.064l6.286-6.286z"></path></svg>
          </a>
          <a href="/login?return_to=%2Fgoogle%2Fstyleguide%2Fblob%2Fgh-pages%2Fcpplint%2Fcpplint.py" class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw"
            aria-label="You must be signed in to make or propose changes">
            <svg class="octicon octicon-trash" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6.5 1.75a.25.25 0 01.25-.25h2.5a.25.25 0 01.25.25V3h-3V1.75zm4.5 0V3h2.25a.75.75 0 010 1.5H2.75a.75.75 0 010-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75zM4.496 6.675a.75.75 0 10-1.492.15l.66 6.6A1.75 1.75 0 005.405 15h5.19c.9 0 1.652-.681 1.741-1.576l.66-6.6a.75.75 0 00-1.492-.149l-.66 6.6a.25.25 0 01-.249.225h-5.19a.25.25 0 01-.249-.225l-.66-6.6z"></path></svg>
          </a>
    </div>
  </div>
</div>

      

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-python  gist-border-0">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8" data-paste-markdown-skip>
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#!/usr/bin/env python</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Copyright (c) 2009 Google Inc. All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Redistribution and use in source and binary forms, with or without</span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class=pl-c># modification, are permitted provided that the following conditions are</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class=pl-c># met:</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#    * Redistributions of source code must retain the above copyright</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class=pl-c># notice, this list of conditions and the following disclaimer.</span></td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#    * Redistributions in binary form must reproduce the above</span></td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class=pl-c># copyright notice, this list of conditions and the following disclaimer</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class=pl-c># in the documentation and/or other materials provided with the</span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class=pl-c># distribution.</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#    * Neither the name of Google Inc. nor the names of its</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class=pl-c># contributors may be used to endorse or promote products derived from</span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class=pl-c># this software without specific prior written permission.</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class=pl-c># THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line"><span class=pl-c># &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line"><span class=pl-c># LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class=pl-c># A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line"><span class=pl-c># OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line"><span class=pl-c># SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line"><span class=pl-c># LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line"><span class=pl-c># DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line"><span class=pl-c># THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line"><span class=pl-c># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line"><span class=pl-c># OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line"><span class=pl-s>&quot;&quot;&quot;Does google-lint on c++ files.</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line"><span class=pl-s>The goal of this script is to identify places in the code that *may*</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line"><span class=pl-s>be in non-compliance with google style.  It does not attempt to fix</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line"><span class=pl-s>up these problems -- the point is to educate.  It does also not</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line"><span class=pl-s>attempt to find all problems, or to ensure that everything it does</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line"><span class=pl-s>find is legitimately a problem.</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class=pl-s>In particular, we can get very confused by /* and // inside strings!</span></td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line"><span class=pl-s>We do a small hack, which is to ignore //&#39;s with &quot;&#39;s after them on the</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line"><span class=pl-s>same line, but it is far from perfect (in either direction).</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line"><span class=pl-s>&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>codecs</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>copy</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>getopt</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>math</span>  <span class=pl-c># for log</span></td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>os</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>re</span></td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>sre_compile</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>string</span></td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>sys</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>unicodedata</span></td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line"><span class=pl-k>import</span> <span class=pl-s1>sysconfig</span></td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line"><span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>xrange</span>          <span class=pl-c># Python 2</span></td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line"><span class=pl-k>except</span> <span class=pl-v>NameError</span>:</td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>xrange</span> <span class=pl-c1>=</span> <span class=pl-s1>range</span>  <span class=pl-c># Python 3</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_USAGE</span> <span class=pl-c1>=</span> <span class=pl-s>&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line"><span class=pl-s>Syntax: cpplint.py [--verbose=#] [--output=vs7] [--filter=-x,+y,...]</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   [--counting=total|toplevel|detailed] [--root=subdir]</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   [--linelength=digits] [--headers=x,y,...]</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   [--quiet]</span></td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        &lt;file&gt; [file] ...</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  The style guidelines this tries to follow are those in</span></td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Every problem is given a confidence score from 1-5, with 5 meaning we are</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  certain of the problem, and 1 meaning it could be a legitimate construct.</span></td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  This will miss some errors, and is not a substitute for a code review.</span></td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  To suppress false-positive errors of a certain category, add a</span></td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &#39;NOLINT(category)&#39; comment to the line.  NOLINT or NOLINT(*)</span></td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  suppresses errors of all categories on that line.</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  The files passed in will be linted; at least one file must be provided.</span></td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Default linted extensions are .cc, .cpp, .cu, .cuh and .h.  Change the</span></td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  extensions with the --extensions flag.</span></td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Flags:</span></td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    output=vs7</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      By default, the output is formatted to ease emacs parsing.  Visual Studio</span></td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      compatible output (vs7) may also be used.  Other formats are unsupported.</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    verbose=#</span></td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Specify a number 0-5 to restrict errors to certain verbosity levels.</span></td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    quiet</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Don&#39;t print anything if no errors are found.</span></td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filter=-x,+y,...</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Specify a comma-separated list of category-filters to apply: only</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error messages whose category names pass the filters will be printed.</span></td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      (Category names are printed with the message and look like</span></td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      &quot;[whitespace/indent]&quot;.)  Filters are evaluated left to right.</span></td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      &quot;-FOO&quot; and &quot;FOO&quot; means &quot;do not print categories that start with FOO&quot;.</span></td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      &quot;+FOO&quot; means &quot;do print categories that start with FOO&quot;.</span></td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Examples: --filter=-whitespace,+whitespace/braces</span></td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                --filter=whitespace,runtime/printf,+runtime/printf_format</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                --filter=-,+build/include_what_you_use</span></td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      To see a list of all the categories used in cpplint, pass no arg:</span></td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line"><span class=pl-s>         --filter=</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    counting=total|toplevel|detailed</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The total number of errors found is always printed. If</span></td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      &#39;toplevel&#39; is provided, then the count of errors in each of</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      the top-level categories like &#39;build&#39; and &#39;whitespace&#39; will</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      also be printed. If &#39;detailed&#39; is provided, then a count</span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      is provided for each category like &#39;build/class&#39;.</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    root=subdir</span></td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The root directory used for deriving header guard CPP variable.</span></td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      By default, the header guard CPP variable is calculated as the relative</span></td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      path to the directory that contains .git, .hg, or .svn.  When this flag</span></td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      is specified, the relative path is calculated from the specified</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      directory. If the specified directory does not exist, this flag is</span></td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      ignored.</span></td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Examples:</span></td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        Assuming that top/src/.git exists (and cwd=top/src), the header guard</span></td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        CPP variables for top/src/chrome/browser/ui/browser.h are:</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        No flag =&gt; CHROME_BROWSER_UI_BROWSER_H_</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --root=chrome =&gt; BROWSER_UI_BROWSER_H_</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --root=chrome/browser =&gt; UI_BROWSER_H_</span></td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --root=.. =&gt; SRC_CHROME_BROWSER_UI_BROWSER_H_</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linelength=digits</span></td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      This is the allowed line length for the project. The default value is</span></td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      80 characters.</span></td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Examples:</span></td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --linelength=120</span></td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    extensions=extension,extension,...</span></td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The allowed file extensions that cpplint will check</span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Examples:</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --extensions=hpp,cpp</span></td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    headers=x,y,...</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The header extensions that cpplint will treat as .h in checks. Values are</span></td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      automatically added to --extensions list.</span></td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Examples:</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --headers=hpp,hxx</span></td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        --headers=hpp</span></td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    cpplint.py supports per-directory configurations specified in CPPLINT.cfg</span></td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    files. CPPLINT.cfg file can contain a number of key=value pairs.</span></td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Currently the following options are supported:</span></td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      set noparent</span></td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filter=+filter1,-filter2,...</span></td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      exclude_files=regex</span></td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linelength=80</span></td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      root=subdir</span></td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      headers=x,y,...</span></td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;set noparent&quot; option prevents cpplint from traversing directory tree</span></td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    upwards looking for more .cfg files in parent directories. This option</span></td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    is usually placed in the top-level project directory.</span></td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The &quot;filter&quot; option is similar in function to --filter flag. It specifies</span></td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    message filters in addition to the |_DEFAULT_FILTERS| and those specified</span></td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    through --filter command-line flag.</span></td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;exclude_files&quot; allows to specify a regular expression to be matched against</span></td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    a file name. If the expression matches, the file is skipped and not run</span></td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    through liner.</span></td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;linelength&quot; allows to specify the allowed line length for the project.</span></td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The &quot;root&quot; option is similar in function to the --root flag (see example</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    above). Paths are relative to the directory of the CPPLINT.cfg.</span></td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The &quot;headers&quot; option is similar in function to the --headers flag</span></td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    (see example above).</span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    CPPLINT.cfg has an effect on files in the same directory and all</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    sub-directories, unless overridden by a nested configuration file.</span></td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Example file:</span></td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        filter=-build/include_order,+build/include_alpha</span></td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        exclude_files=.*\.cc</span></td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The above example disables build/include_order warning and enables</span></td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    build/include_alpha as well as excludes all .cc from being</span></td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    processed by linter, in the current directory (where the .cfg</span></td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    file is located) and all sub-directories.</span></td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line"><span class=pl-s>&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line"><span class=pl-c># We categorize each error message we print.  Here are the categories.</span></td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line"><span class=pl-c># We want an explicit list so we can list them all in cpplint --filter=.</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line"><span class=pl-c># If you add a new error message with a new category, add it to the list</span></td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line"><span class=pl-c># here!  cpplint_unittest.py should tell you if you forget to do this.</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_ERROR_CATEGORIES</span> <span class=pl-c1>=</span> [</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/class&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/c++11&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/c++14&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/c++tr1&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/deprecated&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/endif_comment&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/explicit_make_pair&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/forward_decl&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/header_guard&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/include&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/include_alpha&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/include_order&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/include_what_you_use&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/namespaces&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/printf_format&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;build/storage_class&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;legal/copyright&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/alt_tokens&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/braces&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/casting&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/check&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/constructors&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/fn_size&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/inheritance&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/multiline_comment&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/multiline_string&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/namespace&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/nolint&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/nul&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/strings&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/todo&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/utf8&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/arrays&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/casting&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/explicit&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/int&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/init&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/invalid_increment&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/member_string_references&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/memset&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/indentation_namespace&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/operator&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/printf&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/printf_format&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/references&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/string&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/threadsafe_fn&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;runtime/vlog&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/blank_line&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/braces&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/comma&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/comments&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/empty_conditional_body&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/empty_if_body&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/empty_loop_body&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/end_of_line&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/ending_newline&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/forcolon&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/indent&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/line_length&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/newline&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/operators&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/parens&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/semicolon&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/tab&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/todo&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line">    ]</td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line"><span class=pl-c># These error categories are no longer enforced by cpplint, but for backwards-</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line"><span class=pl-c># compatibility they may still appear in NOLINT comments.</span></td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_LEGACY_ERROR_CATEGORIES</span> <span class=pl-c1>=</span> [</td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/streams&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/function&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line">    ]</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The default state of the category filter. This is overridden by the --filter=</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line"><span class=pl-c># flag. By default all errors are on, so only add here categories that should be</span></td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line"><span class=pl-c># off by default (i.e., categories that must be enabled by the --filter= flags).</span></td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line"><span class=pl-c># All entries here should start with a &#39;-&#39; or &#39;+&#39;, as in the --filter= flag.</span></td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_DEFAULT_FILTERS</span> <span class=pl-c1>=</span> [<span class=pl-s>&#39;-build/include_alpha&#39;</span>]</td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The default list of categories suppressed for C (not C++) files.</span></td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_DEFAULT_C_SUPPRESSED_CATEGORIES</span> <span class=pl-c1>=</span> [</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;readability/casting&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line">    ]</td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The default list of categories suppressed for Linux Kernel files.</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES</span> <span class=pl-c1>=</span> [</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;whitespace/tab&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line">    ]</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line"><span class=pl-c># We used to check for high-bit characters, but after much discussion we</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line"><span class=pl-c># decided those were OK, as long as they were in UTF-8 and didn&#39;t represent</span></td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line"><span class=pl-c># hard-coded international strings, which belong in a separate i18n file.</span></td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line"><span class=pl-c># C++ headers</span></td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_CPP_HEADERS</span> <span class=pl-c1>=</span> <span class=pl-en>frozenset</span>([</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Legacy</span></td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;algobase.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;algo.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;alloc.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;builtinbuf.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;bvector.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;complex.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;defalloc.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;deque.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;editbuf.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;fstream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;function.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;hash_map&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;hash_map.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;hash_set&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;hash_set.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;hashtable.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;heap.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;indstream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iomanip.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iostream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;istream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iterator.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;list.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;map.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;multimap.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;multiset.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ostream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;pair.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;parsestream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;pfstream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;procbuf.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;pthread_alloc&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;pthread_alloc.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;rope&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;rope.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ropeimpl.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;set.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;slist&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;slist.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stack.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stdiostream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stl_alloc.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stl_relops.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;streambuf.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;strfile.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;strstream.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;tempbuf.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;tree.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;type_traits.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;vector.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># 17.6.1.2 C++ library headers</span></td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;algorithm&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;array&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;atomic&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;bitset&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;chrono&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;codecvt&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;complex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;condition_variable&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;deque&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;exception&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;forward_list&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;fstream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;functional&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;future&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;initializer_list&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iomanip&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ios&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iosfwd&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iostream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;istream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;iterator&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;limits&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;list&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;locale&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;map&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;memory&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;mutex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;new&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;numeric&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ostream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;queue&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;random&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ratio&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;regex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;scoped_allocator&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;set&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;sstream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stack&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;stdexcept&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;streambuf&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;string&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;strstream&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;system_error&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;thread&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;tuple&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;typeindex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;typeinfo&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;type_traits&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;unordered_map&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;unordered_set&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;utility&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;valarray&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;vector&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># 17.6.1.2 C++ headers for C library facilities</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cassert&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ccomplex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cctype&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cerrno&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cfenv&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cfloat&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cinttypes&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ciso646&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;climits&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;clocale&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cmath&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;csetjmp&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;csignal&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdalign&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdarg&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdbool&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstddef&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdint&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdio&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstdlib&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cstring&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ctgmath&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;ctime&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cuchar&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cwchar&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;cwctype&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line">    ])</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Type names</span></td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_TYPES</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;^(?:&#39;</span></td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># [dcl.type.simple]</span></td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(char(16_t|32_t)?)|wchar_t|&#39;</span></td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;bool|short|int|long|signed|unsigned|float|double|&#39;</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># [support.types]</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(ptrdiff_t|size_t|max_align_t|nullptr_t)|&#39;</span></td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># [cstdint.syn]</span></td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(u?int(_fast|_least)?(8|16|32|64)_t)|&#39;</span></td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(u?int(max|ptr)_t)|&#39;</span></td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;)$&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line"><span class=pl-c># These headers are excluded from [build/include] and [build/include_order]</span></td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line"><span class=pl-c># checks:</span></td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line"><span class=pl-c># - Anything not following google file name conventions (containing an</span></td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#   uppercase character, such as Python.h or nsStringAPI.h, for example).</span></td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line"><span class=pl-c># - Lua headers.</span></td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_THIRD_PARTY_HEADERS_PATTERN</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;^(?:[^/]*[A-Z][^/]*\.h|lua\.h|lauxlib\.h|lualib\.h)$&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Pattern for matching FileInfo.BaseName() against test file name</span></td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_TEST_FILE_SUFFIX</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;(_test|_unittest|_regtest)$&#39;</span></td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Pattern that matches only complete whitespace, possibly across multiple lines.</span></td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_EMPTY_CONDITIONAL_BODY_PATTERN</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;^\s*$&#39;</span>, <span class=pl-s1>re</span>.<span class=pl-v>DOTALL</span>)</td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Assertion macros.  These are defined in base/logging.h and</span></td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line"><span class=pl-c># testing/base/public/gunit.h.</span></td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_CHECK_MACROS</span> <span class=pl-c1>=</span> [</td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;DCHECK&#39;</span>, <span class=pl-s>&#39;CHECK&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;EXPECT_TRUE&#39;</span>, <span class=pl-s>&#39;ASSERT_TRUE&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;EXPECT_FALSE&#39;</span>, <span class=pl-s>&#39;ASSERT_FALSE&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line">    ]</td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE</span></td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_CHECK_REPLACEMENT</span> <span class=pl-c1>=</span> <span class=pl-en>dict</span>([(<span class=pl-s1>m</span>, {}) <span class=pl-k>for</span> <span class=pl-s1>m</span> <span class=pl-c1>in</span> <span class=pl-s1>_CHECK_MACROS</span>])</td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line"><span class=pl-k>for</span> <span class=pl-s1>op</span>, <span class=pl-s1>replacement</span> <span class=pl-c1>in</span> [(<span class=pl-s>&#39;==&#39;</span>, <span class=pl-s>&#39;EQ&#39;</span>), (<span class=pl-s>&#39;!=&#39;</span>, <span class=pl-s>&#39;NE&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line">                        (<span class=pl-s>&#39;&gt;=&#39;</span>, <span class=pl-s>&#39;GE&#39;</span>), (<span class=pl-s>&#39;&gt;&#39;</span>, <span class=pl-s>&#39;GT&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line">                        (<span class=pl-s>&#39;&lt;=&#39;</span>, <span class=pl-s>&#39;LE&#39;</span>), (<span class=pl-s>&#39;&lt;&#39;</span>, <span class=pl-s>&#39;LT&#39;</span>)]:</td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;DCHECK&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;DCHECK_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>replacement</span></td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;CHECK&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;CHECK_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>replacement</span></td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;EXPECT_TRUE&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;EXPECT_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>replacement</span></td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;ASSERT_TRUE&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;ASSERT_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>replacement</span></td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line"><span class=pl-k>for</span> <span class=pl-s1>op</span>, <span class=pl-s1>inv_replacement</span> <span class=pl-c1>in</span> [(<span class=pl-s>&#39;==&#39;</span>, <span class=pl-s>&#39;NE&#39;</span>), (<span class=pl-s>&#39;!=&#39;</span>, <span class=pl-s>&#39;EQ&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line">                            (<span class=pl-s>&#39;&gt;=&#39;</span>, <span class=pl-s>&#39;LT&#39;</span>), (<span class=pl-s>&#39;&gt;&#39;</span>, <span class=pl-s>&#39;LE&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line">                            (<span class=pl-s>&#39;&lt;=&#39;</span>, <span class=pl-s>&#39;GT&#39;</span>), (<span class=pl-s>&#39;&lt;&#39;</span>, <span class=pl-s>&#39;GE&#39;</span>)]:</td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;EXPECT_FALSE&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;EXPECT_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>inv_replacement</span></td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s>&#39;ASSERT_FALSE&#39;</span>][<span class=pl-s1>op</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;ASSERT_%s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>inv_replacement</span></td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Alternative tokens and their replacements.  For full list, see section 2.5</span></td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Alternative tokens [lex.digraph] in the C++ standard.</span></td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Digraphs (such as &#39;%:&#39;) are not included here since it&#39;s a mess to</span></td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line"><span class=pl-c># match those on a word boundary.</span></td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_ALT_TOKEN_REPLACEMENT</span> <span class=pl-c1>=</span> {</td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;and&#39;</span>: <span class=pl-s>&#39;&amp;&amp;&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;bitor&#39;</span>: <span class=pl-s>&#39;|&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;or&#39;</span>: <span class=pl-s>&#39;||&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;xor&#39;</span>: <span class=pl-s>&#39;^&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;compl&#39;</span>: <span class=pl-s>&#39;~&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;bitand&#39;</span>: <span class=pl-s>&#39;&amp;&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;and_eq&#39;</span>: <span class=pl-s>&#39;&amp;=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;or_eq&#39;</span>: <span class=pl-s>&#39;|=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;xor_eq&#39;</span>: <span class=pl-s>&#39;^=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;not&#39;</span>: <span class=pl-s>&#39;!&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&#39;not_eq&#39;</span>: <span class=pl-s>&#39;!=&#39;</span></td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Compile regular expression that matches all the above keywords.  The &quot;[ =()]&quot;</span></td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line"><span class=pl-c># bit is meant to avoid matching these keywords outside of boolean expressions.</span></td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line"><span class=pl-c># False positives include C-style multi-line comments and multi-line strings</span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line"><span class=pl-c># but those have always been troublesome for cpplint.</span></td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_ALT_TOKEN_REPLACEMENT_PATTERN</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;[ =()](&#39;</span> <span class=pl-c1>+</span> (<span class=pl-s>&#39;|&#39;</span>.<span class=pl-en>join</span>(<span class=pl-s1>_ALT_TOKEN_REPLACEMENT</span>.<span class=pl-en>keys</span>())) <span class=pl-c1>+</span> <span class=pl-s>r&#39;)(?=[ (]|$)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class=pl-c># These constants define types of headers for use with</span></td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line"><span class=pl-c># _IncludeState.CheckNextIncludeOrder().</span></td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_C_SYS_HEADER</span> <span class=pl-c1>=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_CPP_SYS_HEADER</span> <span class=pl-c1>=</span> <span class=pl-c1>2</span></td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_LIKELY_MY_HEADER</span> <span class=pl-c1>=</span> <span class=pl-c1>3</span></td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_POSSIBLE_MY_HEADER</span> <span class=pl-c1>=</span> <span class=pl-c1>4</span></td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_OTHER_HEADER</span> <span class=pl-c1>=</span> <span class=pl-c1>5</span></td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line"><span class=pl-c># These constants define the current inline assembly state</span></td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_NO_ASM</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span>       <span class=pl-c># Outside of inline assembly block</span></td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_INSIDE_ASM</span> <span class=pl-c1>=</span> <span class=pl-c1>1</span>   <span class=pl-c># Inside inline assembly block</span></td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_END_ASM</span> <span class=pl-c1>=</span> <span class=pl-c1>2</span>      <span class=pl-c># Last line of inline assembly block</span></td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_BLOCK_ASM</span> <span class=pl-c1>=</span> <span class=pl-c1>3</span>    <span class=pl-c># The whole block is an inline assembly block</span></td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Match start of assembly blocks</span></td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_MATCH_ASM</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;^\s*(?:asm|_asm|__asm|__asm__)&#39;</span></td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line">                        <span class=pl-s>r&#39;(?:\s+(volatile|__volatile__))?&#39;</span></td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line">                        <span class=pl-s>r&#39;\s*[{(]&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Match strings that indicate we&#39;re working on a C (not C++) file.</span></td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_SEARCH_C_FILE</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;\b(?:LINT_C_FILE|&#39;</span></td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line">                            <span class=pl-s>r&#39;vim?:\s*.*(\s*|:)filetype=c(\s*|:|$))&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Match string that indicates we&#39;re working on a Linux Kernel file.</span></td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_SEARCH_KERNEL_FILE</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;\b(?:LINT_KERNEL_FILE)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_regexp_compile_cache</span> <span class=pl-c1>=</span> {}</td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line"><span class=pl-c># {str, set(int)}: a map from error categories to sets of linenumbers</span></td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line"><span class=pl-c># on which those errors are expected and should be suppressed.</span></td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_error_suppressions</span> <span class=pl-c1>=</span> {}</td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The root directory used for deriving header guard CPP variable.</span></td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line"><span class=pl-c># This is set by --root flag.</span></td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_root</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_root_debug</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The allowed line length of files.</span></td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line"><span class=pl-c># This is set by --linelength flag.</span></td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_line_length</span> <span class=pl-c1>=</span> <span class=pl-c1>80</span></td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The allowed extensions for file names</span></td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line"><span class=pl-c># This is set by --extensions flag.</span></td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_valid_extensions</span> <span class=pl-c1>=</span> <span class=pl-en>set</span>([<span class=pl-s>&#39;cc&#39;</span>, <span class=pl-s>&#39;h&#39;</span>, <span class=pl-s>&#39;cpp&#39;</span>, <span class=pl-s>&#39;cu&#39;</span>, <span class=pl-s>&#39;cuh&#39;</span>])</td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Treat all headers starting with &#39;h&#39; equally: .h, .hpp, .hxx etc.</span></td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line"><span class=pl-c># This is set by --headers flag.</span></td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_hpp_headers</span> <span class=pl-c1>=</span> <span class=pl-en>set</span>([<span class=pl-s>&#39;h&#39;</span>])</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line"><span class=pl-c># {str, bool}: a map from error categories to booleans which indicate if the</span></td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line"><span class=pl-c># category should be suppressed for every line.</span></td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_global_error_suppressions</span> <span class=pl-c1>=</span> {}</td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessHppHeadersOption</span>(<span class=pl-s1>val</span>):</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>global</span> <span class=pl-s1>_hpp_headers</span></td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_hpp_headers</span> <span class=pl-c1>=</span> <span class=pl-en>set</span>(<span class=pl-s1>val</span>.<span class=pl-en>split</span>(<span class=pl-s>&#39;,&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Automatically append to extensions list so it does not have to be set 2 times</span></td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_valid_extensions</span>.<span class=pl-en>update</span>(<span class=pl-s1>_hpp_headers</span>)</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>except</span> <span class=pl-v>ValueError</span>:</td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;Header extensions must be comma separated list.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsHeaderExtension</span>(<span class=pl-s1>file_extension</span>):</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>file_extension</span> <span class=pl-c1>in</span> <span class=pl-s1>_hpp_headers</span></td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Updates the global list of line error-suppressions.</span></td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Parses any NOLINT comments on the current line, updating the global</span></td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  error_suppressions store.  Reports an error if the NOLINT comment</span></td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  was malformed.</span></td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: str, the name of the input file.</span></td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    raw_line: str, the line of input text, with comments.</span></td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: int, the number of the current line.</span></td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: function, an error handler.</span></td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bNOLINT(NEXTLINE)?\b(\([^)]+\))?&#39;</span>, <span class=pl-s1>raw_line</span>)</td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>suppressed_line</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>suppressed_line</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span></td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>category</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>category</span> <span class=pl-c1>in</span> (<span class=pl-c1>None</span>, <span class=pl-s>&#39;(*)&#39;</span>):  <span class=pl-c># =&gt; &quot;suppress all&quot;</span></td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_error_suppressions</span>.<span class=pl-en>setdefault</span>(<span class=pl-c1>None</span>, <span class=pl-en>set</span>()).<span class=pl-en>add</span>(<span class=pl-s1>suppressed_line</span>)</td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>category</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;(&#39;</span>) <span class=pl-c1>and</span> <span class=pl-s1>category</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;)&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>category</span> <span class=pl-c1>=</span> <span class=pl-s1>category</span>[<span class=pl-c1>1</span>:<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>category</span> <span class=pl-c1>in</span> <span class=pl-s1>_ERROR_CATEGORIES</span>:</td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>_error_suppressions</span>.<span class=pl-en>setdefault</span>(<span class=pl-s1>category</span>, <span class=pl-en>set</span>()).<span class=pl-en>add</span>(<span class=pl-s1>suppressed_line</span>)</td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>elif</span> <span class=pl-s1>category</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>_LEGACY_ERROR_CATEGORIES</span>:</td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/nolint&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Unknown NOLINT error category: %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>category</span>)</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessGlobalSuppresions</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Updates the list of global error suppressions.</span></td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Parses any lint directives in the file that have global effect.</span></td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    lines: An array of strings, each representing a line of the file, with the</span></td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           last element being empty if the file is terminated with a newline.</span></td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-s1>lines</span>:</td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_SEARCH_C_FILE</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>for</span> <span class=pl-s1>category</span> <span class=pl-c1>in</span> <span class=pl-s1>_DEFAULT_C_SUPPRESSED_CATEGORIES</span>:</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>_global_error_suppressions</span>[<span class=pl-s1>category</span>] <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_SEARCH_KERNEL_FILE</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>for</span> <span class=pl-s1>category</span> <span class=pl-c1>in</span> <span class=pl-s1>_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES</span>:</td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>_global_error_suppressions</span>[<span class=pl-s1>category</span>] <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ResetNolintSuppressions</span>():</td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Resets the set of NOLINT suppressions to empty.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_error_suppressions</span>.<span class=pl-en>clear</span>()</td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_global_error_suppressions</span>.<span class=pl-en>clear</span>()</td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsErrorSuppressedByNolint</span>(<span class=pl-s1>category</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns true if the specified error category is suppressed on this line.</span></td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Consults the global error_suppressions map populated by</span></td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  ParseNolintSuppressions/ProcessGlobalSuppresions/ResetNolintSuppressions.</span></td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    category: str, the category of the error.</span></td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: int, the current line number.</span></td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    bool, True iff the error should be suppressed due to a NOLINT comment or</span></td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    global suppression.</span></td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-s1>_global_error_suppressions</span>.<span class=pl-en>get</span>(<span class=pl-s1>category</span>, <span class=pl-c1>False</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-s1>_error_suppressions</span>.<span class=pl-en>get</span>(<span class=pl-s1>category</span>, <span class=pl-en>set</span>()) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-s1>_error_suppressions</span>.<span class=pl-en>get</span>(<span class=pl-c1>None</span>, <span class=pl-en>set</span>()))</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>Match</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>s</span>):</td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Matches the string with the pattern, caching the compiled regexp.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The regexp compilation caching is inlined in both Match and Search for</span></td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># performance reasons; factoring it out into a separate function turns out</span></td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># to be noticeably expensive.</span></td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>pattern</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>_regexp_compile_cache</span>:</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>] <span class=pl-c1>=</span> <span class=pl-s1>sre_compile</span>.<span class=pl-en>compile</span>(<span class=pl-s1>pattern</span>)</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>].<span class=pl-en>match</span>(<span class=pl-s1>s</span>)</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ReplaceAll</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>rep</span>, <span class=pl-s1>s</span>):</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Replaces instances of pattern in a string with a replacement.</span></td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  The compiled regex is kept in a cache shared by Match and Search.</span></td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    pattern: regex pattern</span></td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    rep: replacement text</span></td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    s: search string</span></td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    string with replacements made (or original string if no replacements)</span></td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>pattern</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>_regexp_compile_cache</span>:</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>] <span class=pl-c1>=</span> <span class=pl-s1>sre_compile</span>.<span class=pl-en>compile</span>(<span class=pl-s1>pattern</span>)</td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>].<span class=pl-en>sub</span>(<span class=pl-s1>rep</span>, <span class=pl-s1>s</span>)</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>Search</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>s</span>):</td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Searches the string for the pattern, caching the compiled regexp.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>pattern</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>_regexp_compile_cache</span>:</td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>] <span class=pl-c1>=</span> <span class=pl-s1>sre_compile</span>.<span class=pl-en>compile</span>(<span class=pl-s1>pattern</span>)</td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_regexp_compile_cache</span>[<span class=pl-s1>pattern</span>].<span class=pl-en>search</span>(<span class=pl-s1>s</span>)</td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_IsSourceExtension</span>(<span class=pl-s1>s</span>):</td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;File extension (excluding dot) matches a source file extension.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>s</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;c&#39;</span>, <span class=pl-s>&#39;cc&#39;</span>, <span class=pl-s>&#39;cpp&#39;</span>, <span class=pl-s>&#39;cxx&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_IncludeState</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Tracks line numbers for includes, and the order in which includes appear.</span></td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  include_list contains list of lists of (header, line number) pairs.</span></td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  It&#39;s a lists of lists rather than just one flat list to make it</span></td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  easier to update across preprocessor boundaries.</span></td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Call CheckNextIncludeOrder() once for each header in the file, passing</span></td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  in the type constants defined above. Calls in an illegal order will</span></td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  raise an _IncludeError with an appropriate error message.</span></td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># self._section will move monotonically through this set. If it ever</span></td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># needs to move backwards, CheckNextIncludeOrder will raise an error.</span></td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_INITIAL_SECTION</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_MY_H_SECTION</span> <span class=pl-c1>=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_C_SECTION</span> <span class=pl-c1>=</span> <span class=pl-c1>2</span></td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_CPP_SECTION</span> <span class=pl-c1>=</span> <span class=pl-c1>3</span></td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_OTHER_H_SECTION</span> <span class=pl-c1>=</span> <span class=pl-c1>4</span></td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_TYPE_NAMES</span> <span class=pl-c1>=</span> {</td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_C_SYS_HEADER</span>: <span class=pl-s>&#39;C system header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_CPP_SYS_HEADER</span>: <span class=pl-s>&#39;C++ system header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_LIKELY_MY_HEADER</span>: <span class=pl-s>&#39;header this file implements&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_POSSIBLE_MY_HEADER</span>: <span class=pl-s>&#39;header this file may implement&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_OTHER_HEADER</span>: <span class=pl-s>&#39;other header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_SECTION_NAMES</span> <span class=pl-c1>=</span> {</td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_INITIAL_SECTION</span>: <span class=pl-s>&quot;... nothing. (This can&#39;t be an error.)&quot;</span>,</td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_MY_H_SECTION</span>: <span class=pl-s>&#39;a header this file implements&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_C_SECTION</span>: <span class=pl-s>&#39;C system header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_CPP_SECTION</span>: <span class=pl-s>&#39;C++ system header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_OTHER_H_SECTION</span>: <span class=pl-s>&#39;other header&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>include_list</span> <span class=pl-c1>=</span> [[]]</td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-v>ResetSection</span>(<span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>FindHeader</span>(<span class=pl-s1>self</span>, <span class=pl-s1>header</span>):</td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if a header has already been included.</span></td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      header: header to check.</span></td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Line number of previous occurrence, or -1 if the header has not</span></td>
      </tr>
      <tr>
        <td id="L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="LC743" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      been seen before.</span></td>
      </tr>
      <tr>
        <td id="L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="LC744" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="LC745" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>section_list</span> <span class=pl-c1>in</span> <span class=pl-s1>self</span>.<span class=pl-s1>include_list</span>:</td>
      </tr>
      <tr>
        <td id="L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="LC746" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>for</span> <span class=pl-s1>f</span> <span class=pl-c1>in</span> <span class=pl-s1>section_list</span>:</td>
      </tr>
      <tr>
        <td id="L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="LC747" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>f</span>[<span class=pl-c1>0</span>] <span class=pl-c1>==</span> <span class=pl-s1>header</span>:</td>
      </tr>
      <tr>
        <td id="L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="LC748" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span> <span class=pl-s1>f</span>[<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="LC749" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>-</span><span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="LC750" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="LC751" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>ResetSection</span>(<span class=pl-s1>self</span>, <span class=pl-s1>directive</span>):</td>
      </tr>
      <tr>
        <td id="L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="LC752" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Reset section checking for preprocessor directive.</span></td>
      </tr>
      <tr>
        <td id="L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="LC753" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="LC754" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="LC755" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      directive: preprocessor directive (e.g. &quot;if&quot;, &quot;else&quot;).</span></td>
      </tr>
      <tr>
        <td id="L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="LC756" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="LC757" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The name of the current section.</span></td>
      </tr>
      <tr>
        <td id="L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="LC758" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_INITIAL_SECTION</span></td>
      </tr>
      <tr>
        <td id="L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="LC759" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The path of last found header.</span></td>
      </tr>
      <tr>
        <td id="L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="LC760" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="LC761" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="LC762" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Update list of includes.  Note that we never pop from the</span></td>
      </tr>
      <tr>
        <td id="L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="LC763" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># include list.</span></td>
      </tr>
      <tr>
        <td id="L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="LC764" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>directive</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;if&#39;</span>, <span class=pl-s>&#39;ifdef&#39;</span>, <span class=pl-s>&#39;ifndef&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="LC765" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>include_list</span>.<span class=pl-en>append</span>([])</td>
      </tr>
      <tr>
        <td id="L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="LC766" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>directive</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;else&#39;</span>, <span class=pl-s>&#39;elif&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="LC767" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>include_list</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="LC768" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="LC769" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetLastHeader</span>(<span class=pl-s1>self</span>, <span class=pl-s1>header_path</span>):</td>
      </tr>
      <tr>
        <td id="L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="LC770" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>=</span> <span class=pl-s1>header_path</span></td>
      </tr>
      <tr>
        <td id="L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="LC771" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="LC772" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CanonicalizeAlphabeticalOrder</span>(<span class=pl-s1>self</span>, <span class=pl-s1>header_path</span>):</td>
      </tr>
      <tr>
        <td id="L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="LC773" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Returns a path canonicalized for alphabetical comparison.</span></td>
      </tr>
      <tr>
        <td id="L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="LC774" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="LC775" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    - replaces &quot;-&quot; with &quot;_&quot; so they both cmp the same.</span></td>
      </tr>
      <tr>
        <td id="L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="LC776" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    - removes &#39;-inl&#39; since we don&#39;t require them to be after the main header.</span></td>
      </tr>
      <tr>
        <td id="L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="LC777" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    - lowercase everything, just in case.</span></td>
      </tr>
      <tr>
        <td id="L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="LC778" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="LC779" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="LC780" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      header_path: Path to be canonicalized.</span></td>
      </tr>
      <tr>
        <td id="L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="LC781" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="LC782" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="LC783" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Canonicalized path.</span></td>
      </tr>
      <tr>
        <td id="L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="LC784" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="LC785" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>header_path</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;-inl.h&#39;</span>, <span class=pl-s>&#39;.h&#39;</span>).<span class=pl-en>replace</span>(<span class=pl-s>&#39;-&#39;</span>, <span class=pl-s>&#39;_&#39;</span>).<span class=pl-en>lower</span>()</td>
      </tr>
      <tr>
        <td id="L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="LC786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="LC787" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>IsInAlphabeticalOrder</span>(<span class=pl-s1>self</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>header_path</span>):</td>
      </tr>
      <tr>
        <td id="L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="LC788" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if a header is in alphabetical order with the previous header.</span></td>
      </tr>
      <tr>
        <td id="L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="LC789" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="LC790" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="LC791" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="LC792" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="LC793" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      header_path: Canonicalized header to be checked.</span></td>
      </tr>
      <tr>
        <td id="L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="LC794" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="LC795" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="LC796" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      Returns true if the header is in alphabetical order.</span></td>
      </tr>
      <tr>
        <td id="L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="LC797" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="LC798" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If previous section is different from current section, _last_header will</span></td>
      </tr>
      <tr>
        <td id="L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="LC799" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># be reset to empty string, so it&#39;s always less than current header.</span></td>
      </tr>
      <tr>
        <td id="L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="LC800" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="LC801" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If previous line was a blank line, assume that the headers are</span></td>
      </tr>
      <tr>
        <td id="L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="LC802" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># intentionally sorted the way they are.</span></td>
      </tr>
      <tr>
        <td id="L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="LC803" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>header_path</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="LC804" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#\s*include\b&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>])):</td>
      </tr>
      <tr>
        <td id="L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="LC805" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="LC806" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="LC807" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="LC808" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckNextIncludeOrder</span>(<span class=pl-s1>self</span>, <span class=pl-s1>header_type</span>):</td>
      </tr>
      <tr>
        <td id="L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="LC809" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Returns a non-empty error message if the next header is out of order.</span></td>
      </tr>
      <tr>
        <td id="L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="LC810" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="LC811" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    This function also updates the internal state to be ready to check</span></td>
      </tr>
      <tr>
        <td id="L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="LC812" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    the next include.</span></td>
      </tr>
      <tr>
        <td id="L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="LC813" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="LC814" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="LC815" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      header_type: One of the _XXX_HEADER constants defined above.</span></td>
      </tr>
      <tr>
        <td id="L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="LC816" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="LC817" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="LC818" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The empty string if the header is in the right order, or an</span></td>
      </tr>
      <tr>
        <td id="L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="LC819" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error message describing what&#39;s wrong.</span></td>
      </tr>
      <tr>
        <td id="L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="LC820" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="LC821" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="LC822" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>error_message</span> <span class=pl-c1>=</span> (<span class=pl-s>&#39;Found %s after %s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="LC823" class="blob-code blob-code-inner js-file-line">                     (<span class=pl-s1>self</span>.<span class=pl-s1>_TYPE_NAMES</span>[<span class=pl-s1>header_type</span>],</td>
      </tr>
      <tr>
        <td id="L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="LC824" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s1>self</span>.<span class=pl-s1>_SECTION_NAMES</span>[<span class=pl-s1>self</span>.<span class=pl-s1>_section</span>]))</td>
      </tr>
      <tr>
        <td id="L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="LC825" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="LC826" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>last_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span></td>
      </tr>
      <tr>
        <td id="L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="LC827" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="LC828" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>header_type</span> <span class=pl-c1>==</span> <span class=pl-s1>_C_SYS_HEADER</span>:</td>
      </tr>
      <tr>
        <td id="L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="LC829" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>&lt;=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_C_SECTION</span>:</td>
      </tr>
      <tr>
        <td id="L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="LC830" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_C_SECTION</span></td>
      </tr>
      <tr>
        <td id="L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="LC831" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="LC832" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="LC833" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>error_message</span></td>
      </tr>
      <tr>
        <td id="L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="LC834" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>header_type</span> <span class=pl-c1>==</span> <span class=pl-s1>_CPP_SYS_HEADER</span>:</td>
      </tr>
      <tr>
        <td id="L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="LC835" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>&lt;=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_CPP_SECTION</span>:</td>
      </tr>
      <tr>
        <td id="L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="LC836" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_CPP_SECTION</span></td>
      </tr>
      <tr>
        <td id="L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="LC837" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="LC838" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="LC839" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>error_message</span></td>
      </tr>
      <tr>
        <td id="L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="LC840" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>header_type</span> <span class=pl-c1>==</span> <span class=pl-s1>_LIKELY_MY_HEADER</span>:</td>
      </tr>
      <tr>
        <td id="L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="LC841" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>&lt;=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_MY_H_SECTION</span>:</td>
      </tr>
      <tr>
        <td id="L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="LC842" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_MY_H_SECTION</span></td>
      </tr>
      <tr>
        <td id="L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="LC843" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="LC844" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_OTHER_H_SECTION</span></td>
      </tr>
      <tr>
        <td id="L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="LC845" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>header_type</span> <span class=pl-c1>==</span> <span class=pl-s1>_POSSIBLE_MY_HEADER</span>:</td>
      </tr>
      <tr>
        <td id="L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="LC846" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>&lt;=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_MY_H_SECTION</span>:</td>
      </tr>
      <tr>
        <td id="L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="LC847" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_MY_H_SECTION</span></td>
      </tr>
      <tr>
        <td id="L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="LC848" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="LC849" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># This will always be the fallback because we&#39;re not sure</span></td>
      </tr>
      <tr>
        <td id="L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="LC850" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># enough that the header is associated with this file.</span></td>
      </tr>
      <tr>
        <td id="L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="LC851" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_OTHER_H_SECTION</span></td>
      </tr>
      <tr>
        <td id="L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="LC852" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="LC853" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>assert</span> <span class=pl-s1>header_type</span> <span class=pl-c1>==</span> <span class=pl-s1>_OTHER_HEADER</span></td>
      </tr>
      <tr>
        <td id="L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="LC854" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>_section</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_OTHER_H_SECTION</span></td>
      </tr>
      <tr>
        <td id="L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="LC855" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="LC856" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>last_section</span> <span class=pl-c1>!=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_section</span>:</td>
      </tr>
      <tr>
        <td id="L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="LC857" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>_last_header</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="LC858" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="LC859" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="LC860" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="LC861" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="LC862" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_CppLintState</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="LC863" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Maintains module-wide state..&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="LC864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="LC865" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="LC866" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>verbose_level</span> <span class=pl-c1>=</span> <span class=pl-c1>1</span>  <span class=pl-c># global setting.</span></td>
      </tr>
      <tr>
        <td id="L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="LC867" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>error_count</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span>    <span class=pl-c># global count of reported errors</span></td>
      </tr>
      <tr>
        <td id="L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="LC868" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># filters to apply when emitting error messages</span></td>
      </tr>
      <tr>
        <td id="L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="LC869" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>filters</span> <span class=pl-c1>=</span> <span class=pl-s1>_DEFAULT_FILTERS</span>[:]</td>
      </tr>
      <tr>
        <td id="L870" class="blob-num js-line-number" data-line-number="870"></td>
        <td id="LC870" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># backup of filter list. Used to restore the state after each file.</span></td>
      </tr>
      <tr>
        <td id="L871" class="blob-num js-line-number" data-line-number="871"></td>
        <td id="LC871" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_filters_backup</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>filters</span>[:]</td>
      </tr>
      <tr>
        <td id="L872" class="blob-num js-line-number" data-line-number="872"></td>
        <td id="LC872" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>counting</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;total&#39;</span>  <span class=pl-c># In what way are we counting errors?</span></td>
      </tr>
      <tr>
        <td id="L873" class="blob-num js-line-number" data-line-number="873"></td>
        <td id="LC873" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span> <span class=pl-c1>=</span> {}  <span class=pl-c># string to int dict storing error counts</span></td>
      </tr>
      <tr>
        <td id="L874" class="blob-num js-line-number" data-line-number="874"></td>
        <td id="LC874" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>quiet</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span>  <span class=pl-c># Suppress non-error messagess?</span></td>
      </tr>
      <tr>
        <td id="L875" class="blob-num js-line-number" data-line-number="875"></td>
        <td id="LC875" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L876" class="blob-num js-line-number" data-line-number="876"></td>
        <td id="LC876" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># output format:</span></td>
      </tr>
      <tr>
        <td id="L877" class="blob-num js-line-number" data-line-number="877"></td>
        <td id="LC877" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># &quot;emacs&quot; - format that emacs can parse (default)</span></td>
      </tr>
      <tr>
        <td id="L878" class="blob-num js-line-number" data-line-number="878"></td>
        <td id="LC878" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># &quot;vs7&quot; - format that Microsoft Visual Studio 7 can parse</span></td>
      </tr>
      <tr>
        <td id="L879" class="blob-num js-line-number" data-line-number="879"></td>
        <td id="LC879" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>output_format</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;emacs&#39;</span></td>
      </tr>
      <tr>
        <td id="L880" class="blob-num js-line-number" data-line-number="880"></td>
        <td id="LC880" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L881" class="blob-num js-line-number" data-line-number="881"></td>
        <td id="LC881" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetOutputFormat</span>(<span class=pl-s1>self</span>, <span class=pl-s1>output_format</span>):</td>
      </tr>
      <tr>
        <td id="L882" class="blob-num js-line-number" data-line-number="882"></td>
        <td id="LC882" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the output format for errors.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L883" class="blob-num js-line-number" data-line-number="883"></td>
        <td id="LC883" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>output_format</span> <span class=pl-c1>=</span> <span class=pl-s1>output_format</span></td>
      </tr>
      <tr>
        <td id="L884" class="blob-num js-line-number" data-line-number="884"></td>
        <td id="LC884" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L885" class="blob-num js-line-number" data-line-number="885"></td>
        <td id="LC885" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetQuiet</span>(<span class=pl-s1>self</span>, <span class=pl-s1>quiet</span>):</td>
      </tr>
      <tr>
        <td id="L886" class="blob-num js-line-number" data-line-number="886"></td>
        <td id="LC886" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s quiet settings, and returns the previous setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L887" class="blob-num js-line-number" data-line-number="887"></td>
        <td id="LC887" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>last_quiet</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>quiet</span></td>
      </tr>
      <tr>
        <td id="L888" class="blob-num js-line-number" data-line-number="888"></td>
        <td id="LC888" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>quiet</span> <span class=pl-c1>=</span> <span class=pl-s1>quiet</span></td>
      </tr>
      <tr>
        <td id="L889" class="blob-num js-line-number" data-line-number="889"></td>
        <td id="LC889" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>last_quiet</span></td>
      </tr>
      <tr>
        <td id="L890" class="blob-num js-line-number" data-line-number="890"></td>
        <td id="LC890" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L891" class="blob-num js-line-number" data-line-number="891"></td>
        <td id="LC891" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetVerboseLevel</span>(<span class=pl-s1>self</span>, <span class=pl-s1>level</span>):</td>
      </tr>
      <tr>
        <td id="L892" class="blob-num js-line-number" data-line-number="892"></td>
        <td id="LC892" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s verbosity, and returns the previous setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L893" class="blob-num js-line-number" data-line-number="893"></td>
        <td id="LC893" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>last_verbose_level</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>verbose_level</span></td>
      </tr>
      <tr>
        <td id="L894" class="blob-num js-line-number" data-line-number="894"></td>
        <td id="LC894" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>verbose_level</span> <span class=pl-c1>=</span> <span class=pl-s1>level</span></td>
      </tr>
      <tr>
        <td id="L895" class="blob-num js-line-number" data-line-number="895"></td>
        <td id="LC895" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>last_verbose_level</span></td>
      </tr>
      <tr>
        <td id="L896" class="blob-num js-line-number" data-line-number="896"></td>
        <td id="LC896" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L897" class="blob-num js-line-number" data-line-number="897"></td>
        <td id="LC897" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetCountingStyle</span>(<span class=pl-s1>self</span>, <span class=pl-s1>counting_style</span>):</td>
      </tr>
      <tr>
        <td id="L898" class="blob-num js-line-number" data-line-number="898"></td>
        <td id="LC898" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s counting options.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L899" class="blob-num js-line-number" data-line-number="899"></td>
        <td id="LC899" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>counting</span> <span class=pl-c1>=</span> <span class=pl-s1>counting_style</span></td>
      </tr>
      <tr>
        <td id="L900" class="blob-num js-line-number" data-line-number="900"></td>
        <td id="LC900" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L901" class="blob-num js-line-number" data-line-number="901"></td>
        <td id="LC901" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SetFilters</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filters</span>):</td>
      </tr>
      <tr>
        <td id="L902" class="blob-num js-line-number" data-line-number="902"></td>
        <td id="LC902" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the error-message filters.</span></td>
      </tr>
      <tr>
        <td id="L903" class="blob-num js-line-number" data-line-number="903"></td>
        <td id="LC903" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L904" class="blob-num js-line-number" data-line-number="904"></td>
        <td id="LC904" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    These filters are applied when deciding whether to emit a given</span></td>
      </tr>
      <tr>
        <td id="L905" class="blob-num js-line-number" data-line-number="905"></td>
        <td id="LC905" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error message.</span></td>
      </tr>
      <tr>
        <td id="L906" class="blob-num js-line-number" data-line-number="906"></td>
        <td id="LC906" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L907" class="blob-num js-line-number" data-line-number="907"></td>
        <td id="LC907" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L908" class="blob-num js-line-number" data-line-number="908"></td>
        <td id="LC908" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filters: A string of comma-separated filters (eg &quot;+whitespace/indent&quot;).</span></td>
      </tr>
      <tr>
        <td id="L909" class="blob-num js-line-number" data-line-number="909"></td>
        <td id="LC909" class="blob-code blob-code-inner js-file-line"><span class=pl-s>               Each filter should start with + or -; else we die.</span></td>
      </tr>
      <tr>
        <td id="L910" class="blob-num js-line-number" data-line-number="910"></td>
        <td id="LC910" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L911" class="blob-num js-line-number" data-line-number="911"></td>
        <td id="LC911" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Raises:</span></td>
      </tr>
      <tr>
        <td id="L912" class="blob-num js-line-number" data-line-number="912"></td>
        <td id="LC912" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      ValueError: The comma-separated filters did not all start with &#39;+&#39; or &#39;-&#39;.</span></td>
      </tr>
      <tr>
        <td id="L913" class="blob-num js-line-number" data-line-number="913"></td>
        <td id="LC913" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                  E.g. &quot;-,+whitespace,-whitespace/indent,whitespace/badfilter&quot;</span></td>
      </tr>
      <tr>
        <td id="L914" class="blob-num js-line-number" data-line-number="914"></td>
        <td id="LC914" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L915" class="blob-num js-line-number" data-line-number="915"></td>
        <td id="LC915" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Default filters always have less priority than the flag ones.</span></td>
      </tr>
      <tr>
        <td id="L916" class="blob-num js-line-number" data-line-number="916"></td>
        <td id="LC916" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>filters</span> <span class=pl-c1>=</span> <span class=pl-s1>_DEFAULT_FILTERS</span>[:]</td>
      </tr>
      <tr>
        <td id="L917" class="blob-num js-line-number" data-line-number="917"></td>
        <td id="LC917" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-v>AddFilters</span>(<span class=pl-s1>filters</span>)</td>
      </tr>
      <tr>
        <td id="L918" class="blob-num js-line-number" data-line-number="918"></td>
        <td id="LC918" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L919" class="blob-num js-line-number" data-line-number="919"></td>
        <td id="LC919" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>AddFilters</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filters</span>):</td>
      </tr>
      <tr>
        <td id="L920" class="blob-num js-line-number" data-line-number="920"></td>
        <td id="LC920" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot; Adds more filters to the existing list of error-message filters. &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L921" class="blob-num js-line-number" data-line-number="921"></td>
        <td id="LC921" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>filt</span> <span class=pl-c1>in</span> <span class=pl-s1>filters</span>.<span class=pl-en>split</span>(<span class=pl-s>&#39;,&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L922" class="blob-num js-line-number" data-line-number="922"></td>
        <td id="LC922" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>clean_filt</span> <span class=pl-c1>=</span> <span class=pl-s1>filt</span>.<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L923" class="blob-num js-line-number" data-line-number="923"></td>
        <td id="LC923" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>clean_filt</span>:</td>
      </tr>
      <tr>
        <td id="L924" class="blob-num js-line-number" data-line-number="924"></td>
        <td id="LC924" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>filters</span>.<span class=pl-en>append</span>(<span class=pl-s1>clean_filt</span>)</td>
      </tr>
      <tr>
        <td id="L925" class="blob-num js-line-number" data-line-number="925"></td>
        <td id="LC925" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>filt</span> <span class=pl-c1>in</span> <span class=pl-s1>self</span>.<span class=pl-s1>filters</span>:</td>
      </tr>
      <tr>
        <td id="L926" class="blob-num js-line-number" data-line-number="926"></td>
        <td id="LC926" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> (<span class=pl-s1>filt</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;+&#39;</span>) <span class=pl-c1>or</span> <span class=pl-s1>filt</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;-&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L927" class="blob-num js-line-number" data-line-number="927"></td>
        <td id="LC927" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>raise</span> <span class=pl-v>ValueError</span>(<span class=pl-s>&#39;Every filter in --filters must start with + or -&#39;</span></td>
      </tr>
      <tr>
        <td id="L928" class="blob-num js-line-number" data-line-number="928"></td>
        <td id="LC928" class="blob-code blob-code-inner js-file-line">                         <span class=pl-s>&#39; (%s does not)&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>filt</span>)</td>
      </tr>
      <tr>
        <td id="L929" class="blob-num js-line-number" data-line-number="929"></td>
        <td id="LC929" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L930" class="blob-num js-line-number" data-line-number="930"></td>
        <td id="LC930" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>BackupFilters</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L931" class="blob-num js-line-number" data-line-number="931"></td>
        <td id="LC931" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot; Saves the current filter list to backup storage.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L932" class="blob-num js-line-number" data-line-number="932"></td>
        <td id="LC932" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_filters_backup</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>filters</span>[:]</td>
      </tr>
      <tr>
        <td id="L933" class="blob-num js-line-number" data-line-number="933"></td>
        <td id="LC933" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L934" class="blob-num js-line-number" data-line-number="934"></td>
        <td id="LC934" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>RestoreFilters</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L935" class="blob-num js-line-number" data-line-number="935"></td>
        <td id="LC935" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot; Restores filters previously backed up.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L936" class="blob-num js-line-number" data-line-number="936"></td>
        <td id="LC936" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>filters</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_filters_backup</span>[:]</td>
      </tr>
      <tr>
        <td id="L937" class="blob-num js-line-number" data-line-number="937"></td>
        <td id="LC937" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L938" class="blob-num js-line-number" data-line-number="938"></td>
        <td id="LC938" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>ResetErrorCounts</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L939" class="blob-num js-line-number" data-line-number="939"></td>
        <td id="LC939" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s error statistic back to zero.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L940" class="blob-num js-line-number" data-line-number="940"></td>
        <td id="LC940" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>error_count</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L941" class="blob-num js-line-number" data-line-number="941"></td>
        <td id="LC941" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span> <span class=pl-c1>=</span> {}</td>
      </tr>
      <tr>
        <td id="L942" class="blob-num js-line-number" data-line-number="942"></td>
        <td id="LC942" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L943" class="blob-num js-line-number" data-line-number="943"></td>
        <td id="LC943" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>IncrementErrorCount</span>(<span class=pl-s1>self</span>, <span class=pl-s1>category</span>):</td>
      </tr>
      <tr>
        <td id="L944" class="blob-num js-line-number" data-line-number="944"></td>
        <td id="LC944" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Bumps the module&#39;s error statistic.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L945" class="blob-num js-line-number" data-line-number="945"></td>
        <td id="LC945" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>error_count</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L946" class="blob-num js-line-number" data-line-number="946"></td>
        <td id="LC946" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>counting</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;toplevel&#39;</span>, <span class=pl-s>&#39;detailed&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L947" class="blob-num js-line-number" data-line-number="947"></td>
        <td id="LC947" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>counting</span> <span class=pl-c1>!=</span> <span class=pl-s>&#39;detailed&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L948" class="blob-num js-line-number" data-line-number="948"></td>
        <td id="LC948" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>category</span> <span class=pl-c1>=</span> <span class=pl-s1>category</span>.<span class=pl-en>split</span>(<span class=pl-s>&#39;/&#39;</span>)[<span class=pl-c1>0</span>]</td>
      </tr>
      <tr>
        <td id="L949" class="blob-num js-line-number" data-line-number="949"></td>
        <td id="LC949" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>category</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span>:</td>
      </tr>
      <tr>
        <td id="L950" class="blob-num js-line-number" data-line-number="950"></td>
        <td id="LC950" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span>[<span class=pl-s1>category</span>] <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L951" class="blob-num js-line-number" data-line-number="951"></td>
        <td id="LC951" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span>[<span class=pl-s1>category</span>] <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L952" class="blob-num js-line-number" data-line-number="952"></td>
        <td id="LC952" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L953" class="blob-num js-line-number" data-line-number="953"></td>
        <td id="LC953" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>PrintErrorCounts</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L954" class="blob-num js-line-number" data-line-number="954"></td>
        <td id="LC954" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Print a summary of errors by category, and the total.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L955" class="blob-num js-line-number" data-line-number="955"></td>
        <td id="LC955" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>category</span>, <span class=pl-s1>count</span> <span class=pl-c1>in</span> <span class=pl-s1>self</span>.<span class=pl-s1>errors_by_category</span>.<span class=pl-en>iteritems</span>():</td>
      </tr>
      <tr>
        <td id="L956" class="blob-num js-line-number" data-line-number="956"></td>
        <td id="LC956" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Category <span class=pl-cce>\&#39;</span>%s<span class=pl-cce>\&#39;</span> errors found: %d<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L957" class="blob-num js-line-number" data-line-number="957"></td>
        <td id="LC957" class="blob-code blob-code-inner js-file-line">                       (<span class=pl-s1>category</span>, <span class=pl-s1>count</span>))</td>
      </tr>
      <tr>
        <td id="L958" class="blob-num js-line-number" data-line-number="958"></td>
        <td id="LC958" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-s1>stdout</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Total errors found: %d<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>self</span>.<span class=pl-s1>error_count</span>)</td>
      </tr>
      <tr>
        <td id="L959" class="blob-num js-line-number" data-line-number="959"></td>
        <td id="LC959" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L960" class="blob-num js-line-number" data-line-number="960"></td>
        <td id="LC960" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_cpplint_state</span> <span class=pl-c1>=</span> <span class=pl-en>_CppLintState</span>()</td>
      </tr>
      <tr>
        <td id="L961" class="blob-num js-line-number" data-line-number="961"></td>
        <td id="LC961" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L962" class="blob-num js-line-number" data-line-number="962"></td>
        <td id="LC962" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L963" class="blob-num js-line-number" data-line-number="963"></td>
        <td id="LC963" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_OutputFormat</span>():</td>
      </tr>
      <tr>
        <td id="L964" class="blob-num js-line-number" data-line-number="964"></td>
        <td id="LC964" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Gets the module&#39;s output format.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L965" class="blob-num js-line-number" data-line-number="965"></td>
        <td id="LC965" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>output_format</span></td>
      </tr>
      <tr>
        <td id="L966" class="blob-num js-line-number" data-line-number="966"></td>
        <td id="LC966" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L967" class="blob-num js-line-number" data-line-number="967"></td>
        <td id="LC967" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L968" class="blob-num js-line-number" data-line-number="968"></td>
        <td id="LC968" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_SetOutputFormat</span>(<span class=pl-s1>output_format</span>):</td>
      </tr>
      <tr>
        <td id="L969" class="blob-num js-line-number" data-line-number="969"></td>
        <td id="LC969" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s output format.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L970" class="blob-num js-line-number" data-line-number="970"></td>
        <td id="LC970" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>SetOutputFormat</span>(<span class=pl-s1>output_format</span>)</td>
      </tr>
      <tr>
        <td id="L971" class="blob-num js-line-number" data-line-number="971"></td>
        <td id="LC971" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L972" class="blob-num js-line-number" data-line-number="972"></td>
        <td id="LC972" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_Quiet</span>():</td>
      </tr>
      <tr>
        <td id="L973" class="blob-num js-line-number" data-line-number="973"></td>
        <td id="LC973" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Return&#39;s the module&#39;s quiet setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L974" class="blob-num js-line-number" data-line-number="974"></td>
        <td id="LC974" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>quiet</span></td>
      </tr>
      <tr>
        <td id="L975" class="blob-num js-line-number" data-line-number="975"></td>
        <td id="LC975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L976" class="blob-num js-line-number" data-line-number="976"></td>
        <td id="LC976" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_SetQuiet</span>(<span class=pl-s1>quiet</span>):</td>
      </tr>
      <tr>
        <td id="L977" class="blob-num js-line-number" data-line-number="977"></td>
        <td id="LC977" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Set the module&#39;s quiet status, and return previous setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L978" class="blob-num js-line-number" data-line-number="978"></td>
        <td id="LC978" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>SetQuiet</span>(<span class=pl-s1>quiet</span>)</td>
      </tr>
      <tr>
        <td id="L979" class="blob-num js-line-number" data-line-number="979"></td>
        <td id="LC979" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L980" class="blob-num js-line-number" data-line-number="980"></td>
        <td id="LC980" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L981" class="blob-num js-line-number" data-line-number="981"></td>
        <td id="LC981" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_VerboseLevel</span>():</td>
      </tr>
      <tr>
        <td id="L982" class="blob-num js-line-number" data-line-number="982"></td>
        <td id="LC982" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns the module&#39;s verbosity setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L983" class="blob-num js-line-number" data-line-number="983"></td>
        <td id="LC983" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>verbose_level</span></td>
      </tr>
      <tr>
        <td id="L984" class="blob-num js-line-number" data-line-number="984"></td>
        <td id="LC984" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L985" class="blob-num js-line-number" data-line-number="985"></td>
        <td id="LC985" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L986" class="blob-num js-line-number" data-line-number="986"></td>
        <td id="LC986" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_SetVerboseLevel</span>(<span class=pl-s1>level</span>):</td>
      </tr>
      <tr>
        <td id="L987" class="blob-num js-line-number" data-line-number="987"></td>
        <td id="LC987" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s verbosity, and returns the previous setting.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L988" class="blob-num js-line-number" data-line-number="988"></td>
        <td id="LC988" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>SetVerboseLevel</span>(<span class=pl-s1>level</span>)</td>
      </tr>
      <tr>
        <td id="L989" class="blob-num js-line-number" data-line-number="989"></td>
        <td id="LC989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L990" class="blob-num js-line-number" data-line-number="990"></td>
        <td id="LC990" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L991" class="blob-num js-line-number" data-line-number="991"></td>
        <td id="LC991" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_SetCountingStyle</span>(<span class=pl-s1>level</span>):</td>
      </tr>
      <tr>
        <td id="L992" class="blob-num js-line-number" data-line-number="992"></td>
        <td id="LC992" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s counting options.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L993" class="blob-num js-line-number" data-line-number="993"></td>
        <td id="LC993" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>SetCountingStyle</span>(<span class=pl-s1>level</span>)</td>
      </tr>
      <tr>
        <td id="L994" class="blob-num js-line-number" data-line-number="994"></td>
        <td id="LC994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L995" class="blob-num js-line-number" data-line-number="995"></td>
        <td id="LC995" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L996" class="blob-num js-line-number" data-line-number="996"></td>
        <td id="LC996" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_Filters</span>():</td>
      </tr>
      <tr>
        <td id="L997" class="blob-num js-line-number" data-line-number="997"></td>
        <td id="LC997" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns the module&#39;s list of output filters, as a list.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L998" class="blob-num js-line-number" data-line-number="998"></td>
        <td id="LC998" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>filters</span></td>
      </tr>
      <tr>
        <td id="L999" class="blob-num js-line-number" data-line-number="999"></td>
        <td id="LC999" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1000" class="blob-num js-line-number" data-line-number="1000"></td>
        <td id="LC1000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1001" class="blob-num js-line-number" data-line-number="1001"></td>
        <td id="LC1001" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_SetFilters</span>(<span class=pl-s1>filters</span>):</td>
      </tr>
      <tr>
        <td id="L1002" class="blob-num js-line-number" data-line-number="1002"></td>
        <td id="LC1002" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Sets the module&#39;s error-message filters.</span></td>
      </tr>
      <tr>
        <td id="L1003" class="blob-num js-line-number" data-line-number="1003"></td>
        <td id="LC1003" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1004" class="blob-num js-line-number" data-line-number="1004"></td>
        <td id="LC1004" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  These filters are applied when deciding whether to emit a given</span></td>
      </tr>
      <tr>
        <td id="L1005" class="blob-num js-line-number" data-line-number="1005"></td>
        <td id="LC1005" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  error message.</span></td>
      </tr>
      <tr>
        <td id="L1006" class="blob-num js-line-number" data-line-number="1006"></td>
        <td id="LC1006" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1007" class="blob-num js-line-number" data-line-number="1007"></td>
        <td id="LC1007" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1008" class="blob-num js-line-number" data-line-number="1008"></td>
        <td id="LC1008" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filters: A string of comma-separated filters (eg &quot;whitespace/indent&quot;).</span></td>
      </tr>
      <tr>
        <td id="L1009" class="blob-num js-line-number" data-line-number="1009"></td>
        <td id="LC1009" class="blob-code blob-code-inner js-file-line"><span class=pl-s>             Each filter should start with + or -; else we die.</span></td>
      </tr>
      <tr>
        <td id="L1010" class="blob-num js-line-number" data-line-number="1010"></td>
        <td id="LC1010" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1011" class="blob-num js-line-number" data-line-number="1011"></td>
        <td id="LC1011" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>SetFilters</span>(<span class=pl-s1>filters</span>)</td>
      </tr>
      <tr>
        <td id="L1012" class="blob-num js-line-number" data-line-number="1012"></td>
        <td id="LC1012" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1013" class="blob-num js-line-number" data-line-number="1013"></td>
        <td id="LC1013" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_AddFilters</span>(<span class=pl-s1>filters</span>):</td>
      </tr>
      <tr>
        <td id="L1014" class="blob-num js-line-number" data-line-number="1014"></td>
        <td id="LC1014" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Adds more filter overrides.</span></td>
      </tr>
      <tr>
        <td id="L1015" class="blob-num js-line-number" data-line-number="1015"></td>
        <td id="LC1015" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1016" class="blob-num js-line-number" data-line-number="1016"></td>
        <td id="LC1016" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Unlike _SetFilters, this function does not reset the current list of filters</span></td>
      </tr>
      <tr>
        <td id="L1017" class="blob-num js-line-number" data-line-number="1017"></td>
        <td id="LC1017" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  available.</span></td>
      </tr>
      <tr>
        <td id="L1018" class="blob-num js-line-number" data-line-number="1018"></td>
        <td id="LC1018" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1019" class="blob-num js-line-number" data-line-number="1019"></td>
        <td id="LC1019" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1020" class="blob-num js-line-number" data-line-number="1020"></td>
        <td id="LC1020" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filters: A string of comma-separated filters (eg &quot;whitespace/indent&quot;).</span></td>
      </tr>
      <tr>
        <td id="L1021" class="blob-num js-line-number" data-line-number="1021"></td>
        <td id="LC1021" class="blob-code blob-code-inner js-file-line"><span class=pl-s>             Each filter should start with + or -; else we die.</span></td>
      </tr>
      <tr>
        <td id="L1022" class="blob-num js-line-number" data-line-number="1022"></td>
        <td id="LC1022" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1023" class="blob-num js-line-number" data-line-number="1023"></td>
        <td id="LC1023" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>AddFilters</span>(<span class=pl-s1>filters</span>)</td>
      </tr>
      <tr>
        <td id="L1024" class="blob-num js-line-number" data-line-number="1024"></td>
        <td id="LC1024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1025" class="blob-num js-line-number" data-line-number="1025"></td>
        <td id="LC1025" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_BackupFilters</span>():</td>
      </tr>
      <tr>
        <td id="L1026" class="blob-num js-line-number" data-line-number="1026"></td>
        <td id="LC1026" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot; Saves the current filter list to backup storage.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1027" class="blob-num js-line-number" data-line-number="1027"></td>
        <td id="LC1027" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>BackupFilters</span>()</td>
      </tr>
      <tr>
        <td id="L1028" class="blob-num js-line-number" data-line-number="1028"></td>
        <td id="LC1028" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1029" class="blob-num js-line-number" data-line-number="1029"></td>
        <td id="LC1029" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_RestoreFilters</span>():</td>
      </tr>
      <tr>
        <td id="L1030" class="blob-num js-line-number" data-line-number="1030"></td>
        <td id="LC1030" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot; Restores filters previously backed up.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1031" class="blob-num js-line-number" data-line-number="1031"></td>
        <td id="LC1031" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>RestoreFilters</span>()</td>
      </tr>
      <tr>
        <td id="L1032" class="blob-num js-line-number" data-line-number="1032"></td>
        <td id="LC1032" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1033" class="blob-num js-line-number" data-line-number="1033"></td>
        <td id="LC1033" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_FunctionState</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L1034" class="blob-num js-line-number" data-line-number="1034"></td>
        <td id="LC1034" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Tracks current function name and the number of lines in its body.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1035" class="blob-num js-line-number" data-line-number="1035"></td>
        <td id="LC1035" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1036" class="blob-num js-line-number" data-line-number="1036"></td>
        <td id="LC1036" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_NORMAL_TRIGGER</span> <span class=pl-c1>=</span> <span class=pl-c1>250</span>  <span class=pl-c># for --v=0, 500 for --v=1, etc.</span></td>
      </tr>
      <tr>
        <td id="L1037" class="blob-num js-line-number" data-line-number="1037"></td>
        <td id="LC1037" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_TEST_TRIGGER</span> <span class=pl-c1>=</span> <span class=pl-c1>400</span>    <span class=pl-c># about 50% more than _NORMAL_TRIGGER.</span></td>
      </tr>
      <tr>
        <td id="L1038" class="blob-num js-line-number" data-line-number="1038"></td>
        <td id="LC1038" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1039" class="blob-num js-line-number" data-line-number="1039"></td>
        <td id="LC1039" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1040" class="blob-num js-line-number" data-line-number="1040"></td>
        <td id="LC1040" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>in_a_function</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1041" class="blob-num js-line-number" data-line-number="1041"></td>
        <td id="LC1041" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1042" class="blob-num js-line-number" data-line-number="1042"></td>
        <td id="LC1042" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>current_function</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1043" class="blob-num js-line-number" data-line-number="1043"></td>
        <td id="LC1043" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1044" class="blob-num js-line-number" data-line-number="1044"></td>
        <td id="LC1044" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Begin</span>(<span class=pl-s1>self</span>, <span class=pl-s1>function_name</span>):</td>
      </tr>
      <tr>
        <td id="L1045" class="blob-num js-line-number" data-line-number="1045"></td>
        <td id="LC1045" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Start analyzing function body.</span></td>
      </tr>
      <tr>
        <td id="L1046" class="blob-num js-line-number" data-line-number="1046"></td>
        <td id="LC1046" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1047" class="blob-num js-line-number" data-line-number="1047"></td>
        <td id="LC1047" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L1048" class="blob-num js-line-number" data-line-number="1048"></td>
        <td id="LC1048" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      function_name: The name of the function being tracked.</span></td>
      </tr>
      <tr>
        <td id="L1049" class="blob-num js-line-number" data-line-number="1049"></td>
        <td id="LC1049" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1050" class="blob-num js-line-number" data-line-number="1050"></td>
        <td id="LC1050" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>in_a_function</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L1051" class="blob-num js-line-number" data-line-number="1051"></td>
        <td id="LC1051" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1052" class="blob-num js-line-number" data-line-number="1052"></td>
        <td id="LC1052" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>current_function</span> <span class=pl-c1>=</span> <span class=pl-s1>function_name</span></td>
      </tr>
      <tr>
        <td id="L1053" class="blob-num js-line-number" data-line-number="1053"></td>
        <td id="LC1053" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1054" class="blob-num js-line-number" data-line-number="1054"></td>
        <td id="LC1054" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Count</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1055" class="blob-num js-line-number" data-line-number="1055"></td>
        <td id="LC1055" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Count line in current function body.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1056" class="blob-num js-line-number" data-line-number="1056"></td>
        <td id="LC1056" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>in_a_function</span>:</td>
      </tr>
      <tr>
        <td id="L1057" class="blob-num js-line-number" data-line-number="1057"></td>
        <td id="LC1057" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1058" class="blob-num js-line-number" data-line-number="1058"></td>
        <td id="LC1058" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1059" class="blob-num js-line-number" data-line-number="1059"></td>
        <td id="LC1059" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Check</span>(<span class=pl-s1>self</span>, <span class=pl-s1>error</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L1060" class="blob-num js-line-number" data-line-number="1060"></td>
        <td id="LC1060" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Report if too many lines in function body.</span></td>
      </tr>
      <tr>
        <td id="L1061" class="blob-num js-line-number" data-line-number="1061"></td>
        <td id="LC1061" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1062" class="blob-num js-line-number" data-line-number="1062"></td>
        <td id="LC1062" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L1063" class="blob-num js-line-number" data-line-number="1063"></td>
        <td id="LC1063" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L1064" class="blob-num js-line-number" data-line-number="1064"></td>
        <td id="LC1064" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L1065" class="blob-num js-line-number" data-line-number="1065"></td>
        <td id="LC1065" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L1066" class="blob-num js-line-number" data-line-number="1066"></td>
        <td id="LC1066" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1067" class="blob-num js-line-number" data-line-number="1067"></td>
        <td id="LC1067" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-s1>in_a_function</span>:</td>
      </tr>
      <tr>
        <td id="L1068" class="blob-num js-line-number" data-line-number="1068"></td>
        <td id="LC1068" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1069" class="blob-num js-line-number" data-line-number="1069"></td>
        <td id="LC1069" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1070" class="blob-num js-line-number" data-line-number="1070"></td>
        <td id="LC1070" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;T(EST|est)&#39;</span>, <span class=pl-s1>self</span>.<span class=pl-s1>current_function</span>):</td>
      </tr>
      <tr>
        <td id="L1071" class="blob-num js-line-number" data-line-number="1071"></td>
        <td id="LC1071" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>base_trigger</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_TEST_TRIGGER</span></td>
      </tr>
      <tr>
        <td id="L1072" class="blob-num js-line-number" data-line-number="1072"></td>
        <td id="LC1072" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1073" class="blob-num js-line-number" data-line-number="1073"></td>
        <td id="LC1073" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>base_trigger</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>_NORMAL_TRIGGER</span></td>
      </tr>
      <tr>
        <td id="L1074" class="blob-num js-line-number" data-line-number="1074"></td>
        <td id="LC1074" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>trigger</span> <span class=pl-c1>=</span> <span class=pl-s1>base_trigger</span> <span class=pl-c1>*</span> <span class=pl-c1>2</span><span class=pl-c1>**</span><span class=pl-en>_VerboseLevel</span>()</td>
      </tr>
      <tr>
        <td id="L1075" class="blob-num js-line-number" data-line-number="1075"></td>
        <td id="LC1075" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1076" class="blob-num js-line-number" data-line-number="1076"></td>
        <td id="LC1076" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>trigger</span>:</td>
      </tr>
      <tr>
        <td id="L1077" class="blob-num js-line-number" data-line-number="1077"></td>
        <td id="LC1077" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>error_level</span> <span class=pl-c1>=</span> <span class=pl-en>int</span>(<span class=pl-s1>math</span>.<span class=pl-en>log</span>(<span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span> <span class=pl-c1>/</span> <span class=pl-s1>base_trigger</span>, <span class=pl-c1>2</span>))</td>
      </tr>
      <tr>
        <td id="L1078" class="blob-num js-line-number" data-line-number="1078"></td>
        <td id="LC1078" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 50 =&gt; 0, 100 =&gt; 1, 200 =&gt; 2, 400 =&gt; 3, 800 =&gt; 4, 1600 =&gt; 5, ...</span></td>
      </tr>
      <tr>
        <td id="L1079" class="blob-num js-line-number" data-line-number="1079"></td>
        <td id="LC1079" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>error_level</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>5</span>:</td>
      </tr>
      <tr>
        <td id="L1080" class="blob-num js-line-number" data-line-number="1080"></td>
        <td id="LC1080" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>error_level</span> <span class=pl-c1>=</span> <span class=pl-c1>5</span></td>
      </tr>
      <tr>
        <td id="L1081" class="blob-num js-line-number" data-line-number="1081"></td>
        <td id="LC1081" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/fn_size&#39;</span>, <span class=pl-s1>error_level</span>,</td>
      </tr>
      <tr>
        <td id="L1082" class="blob-num js-line-number" data-line-number="1082"></td>
        <td id="LC1082" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Small and focused functions are preferred:&#39;</span></td>
      </tr>
      <tr>
        <td id="L1083" class="blob-num js-line-number" data-line-number="1083"></td>
        <td id="LC1083" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39; %s has %d non-comment lines&#39;</span></td>
      </tr>
      <tr>
        <td id="L1084" class="blob-num js-line-number" data-line-number="1084"></td>
        <td id="LC1084" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39; (error triggered by exceeding %d lines).&#39;</span>  <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L1085" class="blob-num js-line-number" data-line-number="1085"></td>
        <td id="LC1085" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>self</span>.<span class=pl-s1>current_function</span>, <span class=pl-s1>self</span>.<span class=pl-s1>lines_in_function</span>, <span class=pl-s1>trigger</span>))</td>
      </tr>
      <tr>
        <td id="L1086" class="blob-num js-line-number" data-line-number="1086"></td>
        <td id="LC1086" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1087" class="blob-num js-line-number" data-line-number="1087"></td>
        <td id="LC1087" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>End</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1088" class="blob-num js-line-number" data-line-number="1088"></td>
        <td id="LC1088" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Stop analyzing function body.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1089" class="blob-num js-line-number" data-line-number="1089"></td>
        <td id="LC1089" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>in_a_function</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1090" class="blob-num js-line-number" data-line-number="1090"></td>
        <td id="LC1090" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1091" class="blob-num js-line-number" data-line-number="1091"></td>
        <td id="LC1091" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1092" class="blob-num js-line-number" data-line-number="1092"></td>
        <td id="LC1092" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_IncludeError</span>(<span class=pl-v>Exception</span>):</td>
      </tr>
      <tr>
        <td id="L1093" class="blob-num js-line-number" data-line-number="1093"></td>
        <td id="LC1093" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Indicates a problem with the include order in a file.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1094" class="blob-num js-line-number" data-line-number="1094"></td>
        <td id="LC1094" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L1095" class="blob-num js-line-number" data-line-number="1095"></td>
        <td id="LC1095" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1096" class="blob-num js-line-number" data-line-number="1096"></td>
        <td id="LC1096" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1097" class="blob-num js-line-number" data-line-number="1097"></td>
        <td id="LC1097" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L1098" class="blob-num js-line-number" data-line-number="1098"></td>
        <td id="LC1098" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Provides utility functions for filenames.</span></td>
      </tr>
      <tr>
        <td id="L1099" class="blob-num js-line-number" data-line-number="1099"></td>
        <td id="LC1099" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1100" class="blob-num js-line-number" data-line-number="1100"></td>
        <td id="LC1100" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  FileInfo provides easy access to the components of a file&#39;s path</span></td>
      </tr>
      <tr>
        <td id="L1101" class="blob-num js-line-number" data-line-number="1101"></td>
        <td id="LC1101" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  relative to the project root.</span></td>
      </tr>
      <tr>
        <td id="L1102" class="blob-num js-line-number" data-line-number="1102"></td>
        <td id="LC1102" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1103" class="blob-num js-line-number" data-line-number="1103"></td>
        <td id="LC1103" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1104" class="blob-num js-line-number" data-line-number="1104"></td>
        <td id="LC1104" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>):</td>
      </tr>
      <tr>
        <td id="L1105" class="blob-num js-line-number" data-line-number="1105"></td>
        <td id="LC1105" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>_filename</span> <span class=pl-c1>=</span> <span class=pl-s1>filename</span></td>
      </tr>
      <tr>
        <td id="L1106" class="blob-num js-line-number" data-line-number="1106"></td>
        <td id="LC1106" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1107" class="blob-num js-line-number" data-line-number="1107"></td>
        <td id="LC1107" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>FullName</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1108" class="blob-num js-line-number" data-line-number="1108"></td>
        <td id="LC1108" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Make Windows paths like Unix.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1109" class="blob-num js-line-number" data-line-number="1109"></td>
        <td id="LC1109" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>abspath</span>(<span class=pl-s1>self</span>.<span class=pl-s1>_filename</span>).<span class=pl-en>replace</span>(<span class=pl-s>&#39;<span class=pl-cce>\\</span>&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1110" class="blob-num js-line-number" data-line-number="1110"></td>
        <td id="LC1110" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1111" class="blob-num js-line-number" data-line-number="1111"></td>
        <td id="LC1111" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>RepositoryName</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1112" class="blob-num js-line-number" data-line-number="1112"></td>
        <td id="LC1112" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;FullName after removing the local path to the repository.</span></td>
      </tr>
      <tr>
        <td id="L1113" class="blob-num js-line-number" data-line-number="1113"></td>
        <td id="LC1113" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1114" class="blob-num js-line-number" data-line-number="1114"></td>
        <td id="LC1114" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    If we have a real absolute path name here we can try to do something smart:</span></td>
      </tr>
      <tr>
        <td id="L1115" class="blob-num js-line-number" data-line-number="1115"></td>
        <td id="LC1115" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    detecting the root of the checkout and truncating /path/to/checkout from</span></td>
      </tr>
      <tr>
        <td id="L1116" class="blob-num js-line-number" data-line-number="1116"></td>
        <td id="LC1116" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    the name so that we get header guards that don&#39;t include things like</span></td>
      </tr>
      <tr>
        <td id="L1117" class="blob-num js-line-number" data-line-number="1117"></td>
        <td id="LC1117" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;C:\Documents and Settings\...&quot; or &quot;/home/username/...&quot; in them and thus</span></td>
      </tr>
      <tr>
        <td id="L1118" class="blob-num js-line-number" data-line-number="1118"></td>
        <td id="LC1118" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    people on different computers who have checked the source out to different</span></td>
      </tr>
      <tr>
        <td id="L1119" class="blob-num js-line-number" data-line-number="1119"></td>
        <td id="LC1119" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    locations won&#39;t see bogus errors.</span></td>
      </tr>
      <tr>
        <td id="L1120" class="blob-num js-line-number" data-line-number="1120"></td>
        <td id="LC1120" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1121" class="blob-num js-line-number" data-line-number="1121"></td>
        <td id="LC1121" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>fullname</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-v>FullName</span>()</td>
      </tr>
      <tr>
        <td id="L1122" class="blob-num js-line-number" data-line-number="1122"></td>
        <td id="LC1122" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1123" class="blob-num js-line-number" data-line-number="1123"></td>
        <td id="LC1123" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>fullname</span>):</td>
      </tr>
      <tr>
        <td id="L1124" class="blob-num js-line-number" data-line-number="1124"></td>
        <td id="LC1124" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>project_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>fullname</span>)</td>
      </tr>
      <tr>
        <td id="L1125" class="blob-num js-line-number" data-line-number="1125"></td>
        <td id="LC1125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1126" class="blob-num js-line-number" data-line-number="1126"></td>
        <td id="LC1126" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>project_dir</span>, <span class=pl-s>&quot;.svn&quot;</span>)):</td>
      </tr>
      <tr>
        <td id="L1127" class="blob-num js-line-number" data-line-number="1127"></td>
        <td id="LC1127" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If there&#39;s a .svn file in the current directory, we recursively look</span></td>
      </tr>
      <tr>
        <td id="L1128" class="blob-num js-line-number" data-line-number="1128"></td>
        <td id="LC1128" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># up the directory tree for the top of the SVN checkout</span></td>
      </tr>
      <tr>
        <td id="L1129" class="blob-num js-line-number" data-line-number="1129"></td>
        <td id="LC1129" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>root_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>project_dir</span></td>
      </tr>
      <tr>
        <td id="L1130" class="blob-num js-line-number" data-line-number="1130"></td>
        <td id="LC1130" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>one_up_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>root_dir</span>)</td>
      </tr>
      <tr>
        <td id="L1131" class="blob-num js-line-number" data-line-number="1131"></td>
        <td id="LC1131" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>while</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>one_up_dir</span>, <span class=pl-s>&quot;.svn&quot;</span>)):</td>
      </tr>
      <tr>
        <td id="L1132" class="blob-num js-line-number" data-line-number="1132"></td>
        <td id="LC1132" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>root_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>root_dir</span>)</td>
      </tr>
      <tr>
        <td id="L1133" class="blob-num js-line-number" data-line-number="1133"></td>
        <td id="LC1133" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>one_up_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>one_up_dir</span>)</td>
      </tr>
      <tr>
        <td id="L1134" class="blob-num js-line-number" data-line-number="1134"></td>
        <td id="LC1134" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1135" class="blob-num js-line-number" data-line-number="1135"></td>
        <td id="LC1135" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>prefix</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>commonprefix</span>([<span class=pl-s1>root_dir</span>, <span class=pl-s1>project_dir</span>])</td>
      </tr>
      <tr>
        <td id="L1136" class="blob-num js-line-number" data-line-number="1136"></td>
        <td id="LC1136" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>fullname</span>[<span class=pl-en>len</span>(<span class=pl-s1>prefix</span>) <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L1137" class="blob-num js-line-number" data-line-number="1137"></td>
        <td id="LC1137" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1138" class="blob-num js-line-number" data-line-number="1138"></td>
        <td id="LC1138" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Not SVN &lt;= 1.6? Try to find a git, hg, or svn top level directory by</span></td>
      </tr>
      <tr>
        <td id="L1139" class="blob-num js-line-number" data-line-number="1139"></td>
        <td id="LC1139" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># searching up from the current path.</span></td>
      </tr>
      <tr>
        <td id="L1140" class="blob-num js-line-number" data-line-number="1140"></td>
        <td id="LC1140" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>root_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>current_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>fullname</span>)</td>
      </tr>
      <tr>
        <td id="L1141" class="blob-num js-line-number" data-line-number="1141"></td>
        <td id="LC1141" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-s1>current_dir</span> <span class=pl-c1>!=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>current_dir</span>):</td>
      </tr>
      <tr>
        <td id="L1142" class="blob-num js-line-number" data-line-number="1142"></td>
        <td id="LC1142" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> (<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>current_dir</span>, <span class=pl-s>&quot;.git&quot;</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1143" class="blob-num js-line-number" data-line-number="1143"></td>
        <td id="LC1143" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>current_dir</span>, <span class=pl-s>&quot;.hg&quot;</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1144" class="blob-num js-line-number" data-line-number="1144"></td>
        <td id="LC1144" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>current_dir</span>, <span class=pl-s>&quot;.svn&quot;</span>))):</td>
      </tr>
      <tr>
        <td id="L1145" class="blob-num js-line-number" data-line-number="1145"></td>
        <td id="LC1145" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>root_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>current_dir</span></td>
      </tr>
      <tr>
        <td id="L1146" class="blob-num js-line-number" data-line-number="1146"></td>
        <td id="LC1146" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>current_dir</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>current_dir</span>)</td>
      </tr>
      <tr>
        <td id="L1147" class="blob-num js-line-number" data-line-number="1147"></td>
        <td id="LC1147" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1148" class="blob-num js-line-number" data-line-number="1148"></td>
        <td id="LC1148" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>root_dir</span>, <span class=pl-s>&quot;.git&quot;</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1149" class="blob-num js-line-number" data-line-number="1149"></td>
        <td id="LC1149" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>root_dir</span>, <span class=pl-s>&quot;.hg&quot;</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1150" class="blob-num js-line-number" data-line-number="1150"></td>
        <td id="LC1150" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>root_dir</span>, <span class=pl-s>&quot;.svn&quot;</span>))):</td>
      </tr>
      <tr>
        <td id="L1151" class="blob-num js-line-number" data-line-number="1151"></td>
        <td id="LC1151" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>prefix</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>commonprefix</span>([<span class=pl-s1>root_dir</span>, <span class=pl-s1>project_dir</span>])</td>
      </tr>
      <tr>
        <td id="L1152" class="blob-num js-line-number" data-line-number="1152"></td>
        <td id="LC1152" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>fullname</span>[<span class=pl-en>len</span>(<span class=pl-s1>prefix</span>) <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L1153" class="blob-num js-line-number" data-line-number="1153"></td>
        <td id="LC1153" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1154" class="blob-num js-line-number" data-line-number="1154"></td>
        <td id="LC1154" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Don&#39;t know what to do; header guard warnings may be wrong...</span></td>
      </tr>
      <tr>
        <td id="L1155" class="blob-num js-line-number" data-line-number="1155"></td>
        <td id="LC1155" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>fullname</span></td>
      </tr>
      <tr>
        <td id="L1156" class="blob-num js-line-number" data-line-number="1156"></td>
        <td id="LC1156" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1157" class="blob-num js-line-number" data-line-number="1157"></td>
        <td id="LC1157" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Split</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1158" class="blob-num js-line-number" data-line-number="1158"></td>
        <td id="LC1158" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Splits the file into the directory, basename, and extension.</span></td>
      </tr>
      <tr>
        <td id="L1159" class="blob-num js-line-number" data-line-number="1159"></td>
        <td id="LC1159" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1160" class="blob-num js-line-number" data-line-number="1160"></td>
        <td id="LC1160" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    For &#39;chrome/browser/browser.cc&#39;, Split() would</span></td>
      </tr>
      <tr>
        <td id="L1161" class="blob-num js-line-number" data-line-number="1161"></td>
        <td id="LC1161" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    return (&#39;chrome/browser&#39;, &#39;browser&#39;, &#39;.cc&#39;)</span></td>
      </tr>
      <tr>
        <td id="L1162" class="blob-num js-line-number" data-line-number="1162"></td>
        <td id="LC1162" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1163" class="blob-num js-line-number" data-line-number="1163"></td>
        <td id="LC1163" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L1164" class="blob-num js-line-number" data-line-number="1164"></td>
        <td id="LC1164" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      A tuple of (directory, basename, extension).</span></td>
      </tr>
      <tr>
        <td id="L1165" class="blob-num js-line-number" data-line-number="1165"></td>
        <td id="LC1165" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1166" class="blob-num js-line-number" data-line-number="1166"></td>
        <td id="LC1166" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1167" class="blob-num js-line-number" data-line-number="1167"></td>
        <td id="LC1167" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>googlename</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-v>RepositoryName</span>()</td>
      </tr>
      <tr>
        <td id="L1168" class="blob-num js-line-number" data-line-number="1168"></td>
        <td id="LC1168" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>project</span>, <span class=pl-s1>rest</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>split</span>(<span class=pl-s1>googlename</span>)</td>
      </tr>
      <tr>
        <td id="L1169" class="blob-num js-line-number" data-line-number="1169"></td>
        <td id="LC1169" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-s1>project</span>,) <span class=pl-c1>+</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>splitext</span>(<span class=pl-s1>rest</span>)</td>
      </tr>
      <tr>
        <td id="L1170" class="blob-num js-line-number" data-line-number="1170"></td>
        <td id="LC1170" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1171" class="blob-num js-line-number" data-line-number="1171"></td>
        <td id="LC1171" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>BaseName</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1172" class="blob-num js-line-number" data-line-number="1172"></td>
        <td id="LC1172" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;File base name - text after the final slash, before the final period.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1173" class="blob-num js-line-number" data-line-number="1173"></td>
        <td id="LC1173" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-v>Split</span>()[<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L1174" class="blob-num js-line-number" data-line-number="1174"></td>
        <td id="LC1174" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1175" class="blob-num js-line-number" data-line-number="1175"></td>
        <td id="LC1175" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Extension</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1176" class="blob-num js-line-number" data-line-number="1176"></td>
        <td id="LC1176" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;File extension - text following the final period.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1177" class="blob-num js-line-number" data-line-number="1177"></td>
        <td id="LC1177" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-v>Split</span>()[<span class=pl-c1>2</span>]</td>
      </tr>
      <tr>
        <td id="L1178" class="blob-num js-line-number" data-line-number="1178"></td>
        <td id="LC1178" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1179" class="blob-num js-line-number" data-line-number="1179"></td>
        <td id="LC1179" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>NoExtension</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1180" class="blob-num js-line-number" data-line-number="1180"></td>
        <td id="LC1180" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;File has no source file extension.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1181" class="blob-num js-line-number" data-line-number="1181"></td>
        <td id="LC1181" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s>&#39;/&#39;</span>.<span class=pl-en>join</span>(<span class=pl-s1>self</span>.<span class=pl-v>Split</span>()[<span class=pl-c1>0</span>:<span class=pl-c1>2</span>])</td>
      </tr>
      <tr>
        <td id="L1182" class="blob-num js-line-number" data-line-number="1182"></td>
        <td id="LC1182" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1183" class="blob-num js-line-number" data-line-number="1183"></td>
        <td id="LC1183" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>IsSource</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1184" class="blob-num js-line-number" data-line-number="1184"></td>
        <td id="LC1184" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;File has a source file extension.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1185" class="blob-num js-line-number" data-line-number="1185"></td>
        <td id="LC1185" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-en>_IsSourceExtension</span>(<span class=pl-s1>self</span>.<span class=pl-v>Extension</span>()[<span class=pl-c1>1</span>:])</td>
      </tr>
      <tr>
        <td id="L1186" class="blob-num js-line-number" data-line-number="1186"></td>
        <td id="LC1186" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1187" class="blob-num js-line-number" data-line-number="1187"></td>
        <td id="LC1187" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1188" class="blob-num js-line-number" data-line-number="1188"></td>
        <td id="LC1188" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_ShouldPrintError</span>(<span class=pl-s1>category</span>, <span class=pl-s1>confidence</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L1189" class="blob-num js-line-number" data-line-number="1189"></td>
        <td id="LC1189" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;If confidence &gt;= verbose, category passes filter and is not suppressed.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1190" class="blob-num js-line-number" data-line-number="1190"></td>
        <td id="LC1190" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1191" class="blob-num js-line-number" data-line-number="1191"></td>
        <td id="LC1191" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># There are three ways we might decide not to print an error message:</span></td>
      </tr>
      <tr>
        <td id="L1192" class="blob-num js-line-number" data-line-number="1192"></td>
        <td id="LC1192" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># a &quot;NOLINT(category)&quot; comment appears in the source,</span></td>
      </tr>
      <tr>
        <td id="L1193" class="blob-num js-line-number" data-line-number="1193"></td>
        <td id="LC1193" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># the verbosity level isn&#39;t high enough, or the filters filter it out.</span></td>
      </tr>
      <tr>
        <td id="L1194" class="blob-num js-line-number" data-line-number="1194"></td>
        <td id="LC1194" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsErrorSuppressedByNolint</span>(<span class=pl-s1>category</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L1195" class="blob-num js-line-number" data-line-number="1195"></td>
        <td id="LC1195" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1196" class="blob-num js-line-number" data-line-number="1196"></td>
        <td id="LC1196" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1197" class="blob-num js-line-number" data-line-number="1197"></td>
        <td id="LC1197" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>confidence</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>verbose_level</span>:</td>
      </tr>
      <tr>
        <td id="L1198" class="blob-num js-line-number" data-line-number="1198"></td>
        <td id="LC1198" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1199" class="blob-num js-line-number" data-line-number="1199"></td>
        <td id="LC1199" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1200" class="blob-num js-line-number" data-line-number="1200"></td>
        <td id="LC1200" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>is_filtered</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1201" class="blob-num js-line-number" data-line-number="1201"></td>
        <td id="LC1201" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>one_filter</span> <span class=pl-c1>in</span> <span class=pl-en>_Filters</span>():</td>
      </tr>
      <tr>
        <td id="L1202" class="blob-num js-line-number" data-line-number="1202"></td>
        <td id="LC1202" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>one_filter</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;-&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L1203" class="blob-num js-line-number" data-line-number="1203"></td>
        <td id="LC1203" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>category</span>.<span class=pl-en>startswith</span>(<span class=pl-s1>one_filter</span>[<span class=pl-c1>1</span>:]):</td>
      </tr>
      <tr>
        <td id="L1204" class="blob-num js-line-number" data-line-number="1204"></td>
        <td id="LC1204" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>is_filtered</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L1205" class="blob-num js-line-number" data-line-number="1205"></td>
        <td id="LC1205" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>one_filter</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;+&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L1206" class="blob-num js-line-number" data-line-number="1206"></td>
        <td id="LC1206" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>category</span>.<span class=pl-en>startswith</span>(<span class=pl-s1>one_filter</span>[<span class=pl-c1>1</span>:]):</td>
      </tr>
      <tr>
        <td id="L1207" class="blob-num js-line-number" data-line-number="1207"></td>
        <td id="LC1207" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>is_filtered</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1208" class="blob-num js-line-number" data-line-number="1208"></td>
        <td id="LC1208" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1209" class="blob-num js-line-number" data-line-number="1209"></td>
        <td id="LC1209" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>assert</span> <span class=pl-c1>False</span>  <span class=pl-c># should have been checked for in SetFilter.</span></td>
      </tr>
      <tr>
        <td id="L1210" class="blob-num js-line-number" data-line-number="1210"></td>
        <td id="LC1210" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>is_filtered</span>:</td>
      </tr>
      <tr>
        <td id="L1211" class="blob-num js-line-number" data-line-number="1211"></td>
        <td id="LC1211" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1212" class="blob-num js-line-number" data-line-number="1212"></td>
        <td id="LC1212" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1213" class="blob-num js-line-number" data-line-number="1213"></td>
        <td id="LC1213" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L1214" class="blob-num js-line-number" data-line-number="1214"></td>
        <td id="LC1214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1215" class="blob-num js-line-number" data-line-number="1215"></td>
        <td id="LC1215" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1216" class="blob-num js-line-number" data-line-number="1216"></td>
        <td id="LC1216" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>Error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>category</span>, <span class=pl-s1>confidence</span>, <span class=pl-s1>message</span>):</td>
      </tr>
      <tr>
        <td id="L1217" class="blob-num js-line-number" data-line-number="1217"></td>
        <td id="LC1217" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs the fact we&#39;ve found a lint error.</span></td>
      </tr>
      <tr>
        <td id="L1218" class="blob-num js-line-number" data-line-number="1218"></td>
        <td id="LC1218" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1219" class="blob-num js-line-number" data-line-number="1219"></td>
        <td id="LC1219" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  We log where the error was found, and also our confidence in the error,</span></td>
      </tr>
      <tr>
        <td id="L1220" class="blob-num js-line-number" data-line-number="1220"></td>
        <td id="LC1220" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  that is, how certain we are this is a legitimate style regression, and</span></td>
      </tr>
      <tr>
        <td id="L1221" class="blob-num js-line-number" data-line-number="1221"></td>
        <td id="LC1221" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  not a misidentification or a use that&#39;s sometimes justified.</span></td>
      </tr>
      <tr>
        <td id="L1222" class="blob-num js-line-number" data-line-number="1222"></td>
        <td id="LC1222" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1223" class="blob-num js-line-number" data-line-number="1223"></td>
        <td id="LC1223" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  False positives can be suppressed by the use of</span></td>
      </tr>
      <tr>
        <td id="L1224" class="blob-num js-line-number" data-line-number="1224"></td>
        <td id="LC1224" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;cpplint(category)&quot;  comments on the offending line.  These are</span></td>
      </tr>
      <tr>
        <td id="L1225" class="blob-num js-line-number" data-line-number="1225"></td>
        <td id="LC1225" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  parsed into _error_suppressions.</span></td>
      </tr>
      <tr>
        <td id="L1226" class="blob-num js-line-number" data-line-number="1226"></td>
        <td id="LC1226" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1227" class="blob-num js-line-number" data-line-number="1227"></td>
        <td id="LC1227" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1228" class="blob-num js-line-number" data-line-number="1228"></td>
        <td id="LC1228" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the file containing the error.</span></td>
      </tr>
      <tr>
        <td id="L1229" class="blob-num js-line-number" data-line-number="1229"></td>
        <td id="LC1229" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line containing the error.</span></td>
      </tr>
      <tr>
        <td id="L1230" class="blob-num js-line-number" data-line-number="1230"></td>
        <td id="LC1230" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    category: A string used to describe the &quot;category&quot; this bug</span></td>
      </tr>
      <tr>
        <td id="L1231" class="blob-num js-line-number" data-line-number="1231"></td>
        <td id="LC1231" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      falls under: &quot;whitespace&quot;, say, or &quot;runtime&quot;.  Categories</span></td>
      </tr>
      <tr>
        <td id="L1232" class="blob-num js-line-number" data-line-number="1232"></td>
        <td id="LC1232" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      may have a hierarchy separated by slashes: &quot;whitespace/indent&quot;.</span></td>
      </tr>
      <tr>
        <td id="L1233" class="blob-num js-line-number" data-line-number="1233"></td>
        <td id="LC1233" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    confidence: A number from 1-5 representing a confidence score for</span></td>
      </tr>
      <tr>
        <td id="L1234" class="blob-num js-line-number" data-line-number="1234"></td>
        <td id="LC1234" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      the error, with 5 meaning that we are certain of the problem,</span></td>
      </tr>
      <tr>
        <td id="L1235" class="blob-num js-line-number" data-line-number="1235"></td>
        <td id="LC1235" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      and 1 meaning that it could be a legitimate construct.</span></td>
      </tr>
      <tr>
        <td id="L1236" class="blob-num js-line-number" data-line-number="1236"></td>
        <td id="LC1236" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    message: The error message.</span></td>
      </tr>
      <tr>
        <td id="L1237" class="blob-num js-line-number" data-line-number="1237"></td>
        <td id="LC1237" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1238" class="blob-num js-line-number" data-line-number="1238"></td>
        <td id="LC1238" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-en>_ShouldPrintError</span>(<span class=pl-s1>category</span>, <span class=pl-s1>confidence</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L1239" class="blob-num js-line-number" data-line-number="1239"></td>
        <td id="LC1239" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>IncrementErrorCount</span>(<span class=pl-s1>category</span>)</td>
      </tr>
      <tr>
        <td id="L1240" class="blob-num js-line-number" data-line-number="1240"></td>
        <td id="LC1240" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>output_format</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;vs7&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1241" class="blob-num js-line-number" data-line-number="1241"></td>
        <td id="LC1241" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;%s(%s): error cpplint: [%s] %s [%d]<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L1242" class="blob-num js-line-number" data-line-number="1242"></td>
        <td id="LC1242" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>category</span>, <span class=pl-s1>message</span>, <span class=pl-s1>confidence</span>))</td>
      </tr>
      <tr>
        <td id="L1243" class="blob-num js-line-number" data-line-number="1243"></td>
        <td id="LC1243" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>output_format</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;eclipse&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1244" class="blob-num js-line-number" data-line-number="1244"></td>
        <td id="LC1244" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;%s:%s: warning: %s  [%s] [%d]<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L1245" class="blob-num js-line-number" data-line-number="1245"></td>
        <td id="LC1245" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>message</span>, <span class=pl-s1>category</span>, <span class=pl-s1>confidence</span>))</td>
      </tr>
      <tr>
        <td id="L1246" class="blob-num js-line-number" data-line-number="1246"></td>
        <td id="LC1246" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1247" class="blob-num js-line-number" data-line-number="1247"></td>
        <td id="LC1247" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;%s:%s:  %s  [%s] [%d]<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L1248" class="blob-num js-line-number" data-line-number="1248"></td>
        <td id="LC1248" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>message</span>, <span class=pl-s1>category</span>, <span class=pl-s1>confidence</span>))</td>
      </tr>
      <tr>
        <td id="L1249" class="blob-num js-line-number" data-line-number="1249"></td>
        <td id="LC1249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1250" class="blob-num js-line-number" data-line-number="1250"></td>
        <td id="LC1250" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1251" class="blob-num js-line-number" data-line-number="1251"></td>
        <td id="LC1251" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Matches standard C++ escape sequences per 2.13.2.3 of the C++ standard.</span></td>
      </tr>
      <tr>
        <td id="L1252" class="blob-num js-line-number" data-line-number="1252"></td>
        <td id="LC1252" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_CLEANSE_LINE_ESCAPES</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L1253" class="blob-num js-line-number" data-line-number="1253"></td>
        <td id="LC1253" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;\\([abfnrtv?&quot;\\\&#39;]|\d+|x[0-9a-fA-F]+)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1254" class="blob-num js-line-number" data-line-number="1254"></td>
        <td id="LC1254" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Match a single C style comment on the same line.</span></td>
      </tr>
      <tr>
        <td id="L1255" class="blob-num js-line-number" data-line-number="1255"></td>
        <td id="LC1255" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_C_COMMENTS</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;/\*(?:[^*]|\*(?!/))*\*/&#39;</span></td>
      </tr>
      <tr>
        <td id="L1256" class="blob-num js-line-number" data-line-number="1256"></td>
        <td id="LC1256" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Matches multi-line C style comments.</span></td>
      </tr>
      <tr>
        <td id="L1257" class="blob-num js-line-number" data-line-number="1257"></td>
        <td id="LC1257" class="blob-code blob-code-inner js-file-line"><span class=pl-c># This RE is a little bit more complicated than one might expect, because we</span></td>
      </tr>
      <tr>
        <td id="L1258" class="blob-num js-line-number" data-line-number="1258"></td>
        <td id="LC1258" class="blob-code blob-code-inner js-file-line"><span class=pl-c># have to take care of space removals tools so we can handle comments inside</span></td>
      </tr>
      <tr>
        <td id="L1259" class="blob-num js-line-number" data-line-number="1259"></td>
        <td id="LC1259" class="blob-code blob-code-inner js-file-line"><span class=pl-c># statements better.</span></td>
      </tr>
      <tr>
        <td id="L1260" class="blob-num js-line-number" data-line-number="1260"></td>
        <td id="LC1260" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The current rule is: We only clear spaces from both sides when we&#39;re at the</span></td>
      </tr>
      <tr>
        <td id="L1261" class="blob-num js-line-number" data-line-number="1261"></td>
        <td id="LC1261" class="blob-code blob-code-inner js-file-line"><span class=pl-c># end of the line. Otherwise, we try to remove spaces from the right side,</span></td>
      </tr>
      <tr>
        <td id="L1262" class="blob-num js-line-number" data-line-number="1262"></td>
        <td id="LC1262" class="blob-code blob-code-inner js-file-line"><span class=pl-c># if this doesn&#39;t work we try on left side but only if there&#39;s a non-character</span></td>
      </tr>
      <tr>
        <td id="L1263" class="blob-num js-line-number" data-line-number="1263"></td>
        <td id="LC1263" class="blob-code blob-code-inner js-file-line"><span class=pl-c># on the right.</span></td>
      </tr>
      <tr>
        <td id="L1264" class="blob-num js-line-number" data-line-number="1264"></td>
        <td id="LC1264" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_CLEANSE_LINE_C_COMMENTS</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L1265" class="blob-num js-line-number" data-line-number="1265"></td>
        <td id="LC1265" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_C_COMMENTS</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\s*$|&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1266" class="blob-num js-line-number" data-line-number="1266"></td>
        <td id="LC1266" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_RE_PATTERN_C_COMMENTS</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\s+|&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1267" class="blob-num js-line-number" data-line-number="1267"></td>
        <td id="LC1267" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;\s+&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_C_COMMENTS</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;(?=\W)|&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1268" class="blob-num js-line-number" data-line-number="1268"></td>
        <td id="LC1268" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_RE_PATTERN_C_COMMENTS</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1269" class="blob-num js-line-number" data-line-number="1269"></td>
        <td id="LC1269" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1270" class="blob-num js-line-number" data-line-number="1270"></td>
        <td id="LC1270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1271" class="blob-num js-line-number" data-line-number="1271"></td>
        <td id="LC1271" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsCppString</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L1272" class="blob-num js-line-number" data-line-number="1272"></td>
        <td id="LC1272" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Does line terminate so, that the next symbol is in string constant.</span></td>
      </tr>
      <tr>
        <td id="L1273" class="blob-num js-line-number" data-line-number="1273"></td>
        <td id="LC1273" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1274" class="blob-num js-line-number" data-line-number="1274"></td>
        <td id="LC1274" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  This function does not consider single-line nor multi-line comments.</span></td>
      </tr>
      <tr>
        <td id="L1275" class="blob-num js-line-number" data-line-number="1275"></td>
        <td id="LC1275" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1276" class="blob-num js-line-number" data-line-number="1276"></td>
        <td id="LC1276" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1277" class="blob-num js-line-number" data-line-number="1277"></td>
        <td id="LC1277" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: is a partial line of code starting from the 0..n.</span></td>
      </tr>
      <tr>
        <td id="L1278" class="blob-num js-line-number" data-line-number="1278"></td>
        <td id="LC1278" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1279" class="blob-num js-line-number" data-line-number="1279"></td>
        <td id="LC1279" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1280" class="blob-num js-line-number" data-line-number="1280"></td>
        <td id="LC1280" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True, if next character appended to &#39;line&#39; is inside a</span></td>
      </tr>
      <tr>
        <td id="L1281" class="blob-num js-line-number" data-line-number="1281"></td>
        <td id="LC1281" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    string constant.</span></td>
      </tr>
      <tr>
        <td id="L1282" class="blob-num js-line-number" data-line-number="1282"></td>
        <td id="LC1282" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1283" class="blob-num js-line-number" data-line-number="1283"></td>
        <td id="LC1283" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1284" class="blob-num js-line-number" data-line-number="1284"></td>
        <td id="LC1284" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>replace</span>(<span class=pl-s>r&#39;\\&#39;</span>, <span class=pl-s>&#39;XX&#39;</span>)  <span class=pl-c># after this, \\&quot; does not match to \&quot;</span></td>
      </tr>
      <tr>
        <td id="L1285" class="blob-num js-line-number" data-line-number="1285"></td>
        <td id="LC1285" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> ((<span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;&quot;&#39;</span>) <span class=pl-c1>-</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>r&#39;\&quot;&#39;</span>) <span class=pl-c1>-</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&quot;&#39;<span class=pl-cce>\&quot;</span>&#39;&quot;</span>)) <span class=pl-c1>&amp;</span> <span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1286" class="blob-num js-line-number" data-line-number="1286"></td>
        <td id="LC1286" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1287" class="blob-num js-line-number" data-line-number="1287"></td>
        <td id="LC1287" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1288" class="blob-num js-line-number" data-line-number="1288"></td>
        <td id="LC1288" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CleanseRawStrings</span>(<span class=pl-s1>raw_lines</span>):</td>
      </tr>
      <tr>
        <td id="L1289" class="blob-num js-line-number" data-line-number="1289"></td>
        <td id="LC1289" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Removes C++11 raw strings from lines.</span></td>
      </tr>
      <tr>
        <td id="L1290" class="blob-num js-line-number" data-line-number="1290"></td>
        <td id="LC1290" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1291" class="blob-num js-line-number" data-line-number="1291"></td>
        <td id="LC1291" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Before:</span></td>
      </tr>
      <tr>
        <td id="L1292" class="blob-num js-line-number" data-line-number="1292"></td>
        <td id="LC1292" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      static const char kData[] = R&quot;(</span></td>
      </tr>
      <tr>
        <td id="L1293" class="blob-num js-line-number" data-line-number="1293"></td>
        <td id="LC1293" class="blob-code blob-code-inner js-file-line"><span class=pl-s>          multi-line string</span></td>
      </tr>
      <tr>
        <td id="L1294" class="blob-num js-line-number" data-line-number="1294"></td>
        <td id="LC1294" class="blob-code blob-code-inner js-file-line"><span class=pl-s>          )&quot;;</span></td>
      </tr>
      <tr>
        <td id="L1295" class="blob-num js-line-number" data-line-number="1295"></td>
        <td id="LC1295" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1296" class="blob-num js-line-number" data-line-number="1296"></td>
        <td id="LC1296" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    After:</span></td>
      </tr>
      <tr>
        <td id="L1297" class="blob-num js-line-number" data-line-number="1297"></td>
        <td id="LC1297" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      static const char kData[] = &quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1298" class="blob-num js-line-number" data-line-number="1298"></td>
        <td id="LC1298" class="blob-code blob-code-inner js-file-line"><span class=pl-s>          (replaced by blank line)</span></td>
      </tr>
      <tr>
        <td id="L1299" class="blob-num js-line-number" data-line-number="1299"></td>
        <td id="LC1299" class="blob-code blob-code-inner js-file-line"><span class=pl-s>          &quot;&quot;;</span></td>
      </tr>
      <tr>
        <td id="L1300" class="blob-num js-line-number" data-line-number="1300"></td>
        <td id="LC1300" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1301" class="blob-num js-line-number" data-line-number="1301"></td>
        <td id="LC1301" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1302" class="blob-num js-line-number" data-line-number="1302"></td>
        <td id="LC1302" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    raw_lines: list of raw lines.</span></td>
      </tr>
      <tr>
        <td id="L1303" class="blob-num js-line-number" data-line-number="1303"></td>
        <td id="LC1303" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1304" class="blob-num js-line-number" data-line-number="1304"></td>
        <td id="LC1304" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1305" class="blob-num js-line-number" data-line-number="1305"></td>
        <td id="LC1305" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    list of lines with C++11 raw strings replaced by empty strings.</span></td>
      </tr>
      <tr>
        <td id="L1306" class="blob-num js-line-number" data-line-number="1306"></td>
        <td id="LC1306" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1307" class="blob-num js-line-number" data-line-number="1307"></td>
        <td id="LC1307" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1308" class="blob-num js-line-number" data-line-number="1308"></td>
        <td id="LC1308" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>delimiter</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L1309" class="blob-num js-line-number" data-line-number="1309"></td>
        <td id="LC1309" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lines_without_raw_strings</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L1310" class="blob-num js-line-number" data-line-number="1310"></td>
        <td id="LC1310" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-s1>raw_lines</span>:</td>
      </tr>
      <tr>
        <td id="L1311" class="blob-num js-line-number" data-line-number="1311"></td>
        <td id="LC1311" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>delimiter</span>:</td>
      </tr>
      <tr>
        <td id="L1312" class="blob-num js-line-number" data-line-number="1312"></td>
        <td id="LC1312" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Inside a raw string, look for the end</span></td>
      </tr>
      <tr>
        <td id="L1313" class="blob-num js-line-number" data-line-number="1313"></td>
        <td id="LC1313" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>end</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s1>delimiter</span>)</td>
      </tr>
      <tr>
        <td id="L1314" class="blob-num js-line-number" data-line-number="1314"></td>
        <td id="LC1314" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>end</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1315" class="blob-num js-line-number" data-line-number="1315"></td>
        <td id="LC1315" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Found the end of the string, match leading space for this</span></td>
      </tr>
      <tr>
        <td id="L1316" class="blob-num js-line-number" data-line-number="1316"></td>
        <td id="LC1316" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># line and resume copying the original lines, and also insert</span></td>
      </tr>
      <tr>
        <td id="L1317" class="blob-num js-line-number" data-line-number="1317"></td>
        <td id="LC1317" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># a &quot;&quot; on the last line.</span></td>
      </tr>
      <tr>
        <td id="L1318" class="blob-num js-line-number" data-line-number="1318"></td>
        <td id="LC1318" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>leading_space</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(\s*)\S&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L1319" class="blob-num js-line-number" data-line-number="1319"></td>
        <td id="LC1319" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>leading_space</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> <span class=pl-s>&#39;&quot;&quot;&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>line</span>[<span class=pl-s1>end</span> <span class=pl-c1>+</span> <span class=pl-en>len</span>(<span class=pl-s1>delimiter</span>):]</td>
      </tr>
      <tr>
        <td id="L1320" class="blob-num js-line-number" data-line-number="1320"></td>
        <td id="LC1320" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>delimiter</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L1321" class="blob-num js-line-number" data-line-number="1321"></td>
        <td id="LC1321" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1322" class="blob-num js-line-number" data-line-number="1322"></td>
        <td id="LC1322" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Haven&#39;t found the end yet, append a blank line.</span></td>
      </tr>
      <tr>
        <td id="L1323" class="blob-num js-line-number" data-line-number="1323"></td>
        <td id="LC1323" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&quot;&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1324" class="blob-num js-line-number" data-line-number="1324"></td>
        <td id="LC1324" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1325" class="blob-num js-line-number" data-line-number="1325"></td>
        <td id="LC1325" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for beginning of a raw string, and replace them with</span></td>
      </tr>
      <tr>
        <td id="L1326" class="blob-num js-line-number" data-line-number="1326"></td>
        <td id="LC1326" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># empty strings.  This is done in a loop to handle multiple raw</span></td>
      </tr>
      <tr>
        <td id="L1327" class="blob-num js-line-number" data-line-number="1327"></td>
        <td id="LC1327" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># strings on the same line.</span></td>
      </tr>
      <tr>
        <td id="L1328" class="blob-num js-line-number" data-line-number="1328"></td>
        <td id="LC1328" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-s1>delimiter</span> <span class=pl-c1>is</span> <span class=pl-c1>None</span>:</td>
      </tr>
      <tr>
        <td id="L1329" class="blob-num js-line-number" data-line-number="1329"></td>
        <td id="LC1329" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Look for beginning of a raw string.</span></td>
      </tr>
      <tr>
        <td id="L1330" class="blob-num js-line-number" data-line-number="1330"></td>
        <td id="LC1330" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># See 2.14.15 [lex.string] for syntax.</span></td>
      </tr>
      <tr>
        <td id="L1331" class="blob-num js-line-number" data-line-number="1331"></td>
        <td id="LC1331" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1332" class="blob-num js-line-number" data-line-number="1332"></td>
        <td id="LC1332" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Once we have matched a raw string, we check the prefix of the</span></td>
      </tr>
      <tr>
        <td id="L1333" class="blob-num js-line-number" data-line-number="1333"></td>
        <td id="LC1333" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># line to make sure that the line is not part of a single line</span></td>
      </tr>
      <tr>
        <td id="L1334" class="blob-num js-line-number" data-line-number="1334"></td>
        <td id="LC1334" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># comment.  It&#39;s done this way because we remove raw strings</span></td>
      </tr>
      <tr>
        <td id="L1335" class="blob-num js-line-number" data-line-number="1335"></td>
        <td id="LC1335" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># before removing comments as opposed to removing comments</span></td>
      </tr>
      <tr>
        <td id="L1336" class="blob-num js-line-number" data-line-number="1336"></td>
        <td id="LC1336" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># before removing raw strings.  This is because there are some</span></td>
      </tr>
      <tr>
        <td id="L1337" class="blob-num js-line-number" data-line-number="1337"></td>
        <td id="LC1337" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># cpplint checks that requires the comments to be preserved, but</span></td>
      </tr>
      <tr>
        <td id="L1338" class="blob-num js-line-number" data-line-number="1338"></td>
        <td id="LC1338" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># we don&#39;t want to check comments that are inside raw strings.</span></td>
      </tr>
      <tr>
        <td id="L1339" class="blob-num js-line-number" data-line-number="1339"></td>
        <td id="LC1339" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*?)\b(?:R|u8R|uR|UR|LR)&quot;([^\s\\()]*)\((.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L1340" class="blob-num js-line-number" data-line-number="1340"></td>
        <td id="LC1340" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>matched</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L1341" class="blob-num js-line-number" data-line-number="1341"></td>
        <td id="LC1341" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^\&#39;&quot;]|\&#39;(\\.|[^\&#39;])*\&#39;|&quot;(\\.|[^&quot;])*&quot;)*//&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L1342" class="blob-num js-line-number" data-line-number="1342"></td>
        <td id="LC1342" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))):</td>
      </tr>
      <tr>
        <td id="L1343" class="blob-num js-line-number" data-line-number="1343"></td>
        <td id="LC1343" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>delimiter</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;)&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>+</span> <span class=pl-s>&#39;&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1344" class="blob-num js-line-number" data-line-number="1344"></td>
        <td id="LC1344" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1345" class="blob-num js-line-number" data-line-number="1345"></td>
        <td id="LC1345" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>end</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>).<span class=pl-en>find</span>(<span class=pl-s1>delimiter</span>)</td>
      </tr>
      <tr>
        <td id="L1346" class="blob-num js-line-number" data-line-number="1346"></td>
        <td id="LC1346" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>end</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1347" class="blob-num js-line-number" data-line-number="1347"></td>
        <td id="LC1347" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Raw string ended on same line</span></td>
      </tr>
      <tr>
        <td id="L1348" class="blob-num js-line-number" data-line-number="1348"></td>
        <td id="LC1348" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>line</span> <span class=pl-c1>=</span> (<span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> <span class=pl-s>&#39;&quot;&quot;&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1349" class="blob-num js-line-number" data-line-number="1349"></td>
        <td id="LC1349" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)[<span class=pl-s1>end</span> <span class=pl-c1>+</span> <span class=pl-en>len</span>(<span class=pl-s1>delimiter</span>):])</td>
      </tr>
      <tr>
        <td id="L1350" class="blob-num js-line-number" data-line-number="1350"></td>
        <td id="LC1350" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>delimiter</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L1351" class="blob-num js-line-number" data-line-number="1351"></td>
        <td id="LC1351" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1352" class="blob-num js-line-number" data-line-number="1352"></td>
        <td id="LC1352" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Start of a multi-line raw string</span></td>
      </tr>
      <tr>
        <td id="L1353" class="blob-num js-line-number" data-line-number="1353"></td>
        <td id="LC1353" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> <span class=pl-s>&#39;&quot;&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1354" class="blob-num js-line-number" data-line-number="1354"></td>
        <td id="LC1354" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1355" class="blob-num js-line-number" data-line-number="1355"></td>
        <td id="LC1355" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1356" class="blob-num js-line-number" data-line-number="1356"></td>
        <td id="LC1356" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1357" class="blob-num js-line-number" data-line-number="1357"></td>
        <td id="LC1357" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lines_without_raw_strings</span>.<span class=pl-en>append</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L1358" class="blob-num js-line-number" data-line-number="1358"></td>
        <td id="LC1358" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1359" class="blob-num js-line-number" data-line-number="1359"></td>
        <td id="LC1359" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): if delimiter is not None here, we might want to</span></td>
      </tr>
      <tr>
        <td id="L1360" class="blob-num js-line-number" data-line-number="1360"></td>
        <td id="LC1360" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># emit a warning for unterminated string.</span></td>
      </tr>
      <tr>
        <td id="L1361" class="blob-num js-line-number" data-line-number="1361"></td>
        <td id="LC1361" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>lines_without_raw_strings</span></td>
      </tr>
      <tr>
        <td id="L1362" class="blob-num js-line-number" data-line-number="1362"></td>
        <td id="LC1362" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1363" class="blob-num js-line-number" data-line-number="1363"></td>
        <td id="LC1363" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1364" class="blob-num js-line-number" data-line-number="1364"></td>
        <td id="LC1364" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FindNextMultiLineCommentStart</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>lineix</span>):</td>
      </tr>
      <tr>
        <td id="L1365" class="blob-num js-line-number" data-line-number="1365"></td>
        <td id="LC1365" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Find the beginning marker for a multiline comment.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1366" class="blob-num js-line-number" data-line-number="1366"></td>
        <td id="LC1366" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>lineix</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1367" class="blob-num js-line-number" data-line-number="1367"></td>
        <td id="LC1367" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>lines</span>[<span class=pl-s1>lineix</span>].<span class=pl-en>strip</span>().<span class=pl-en>startswith</span>(<span class=pl-s>&#39;/*&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L1368" class="blob-num js-line-number" data-line-number="1368"></td>
        <td id="LC1368" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Only return this marker if the comment goes beyond this line</span></td>
      </tr>
      <tr>
        <td id="L1369" class="blob-num js-line-number" data-line-number="1369"></td>
        <td id="LC1369" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>lines</span>[<span class=pl-s1>lineix</span>].<span class=pl-en>strip</span>().<span class=pl-en>find</span>(<span class=pl-s>&#39;*/&#39;</span>, <span class=pl-c1>2</span>) <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1370" class="blob-num js-line-number" data-line-number="1370"></td>
        <td id="LC1370" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>lineix</span></td>
      </tr>
      <tr>
        <td id="L1371" class="blob-num js-line-number" data-line-number="1371"></td>
        <td id="LC1371" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lineix</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1372" class="blob-num js-line-number" data-line-number="1372"></td>
        <td id="LC1372" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L1373" class="blob-num js-line-number" data-line-number="1373"></td>
        <td id="LC1373" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1374" class="blob-num js-line-number" data-line-number="1374"></td>
        <td id="LC1374" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1375" class="blob-num js-line-number" data-line-number="1375"></td>
        <td id="LC1375" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FindNextMultiLineCommentEnd</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>lineix</span>):</td>
      </tr>
      <tr>
        <td id="L1376" class="blob-num js-line-number" data-line-number="1376"></td>
        <td id="LC1376" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;We are inside a comment, find the end marker.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1377" class="blob-num js-line-number" data-line-number="1377"></td>
        <td id="LC1377" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>lineix</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1378" class="blob-num js-line-number" data-line-number="1378"></td>
        <td id="LC1378" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>lines</span>[<span class=pl-s1>lineix</span>].<span class=pl-en>strip</span>().<span class=pl-en>endswith</span>(<span class=pl-s>&#39;*/&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L1379" class="blob-num js-line-number" data-line-number="1379"></td>
        <td id="LC1379" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>lineix</span></td>
      </tr>
      <tr>
        <td id="L1380" class="blob-num js-line-number" data-line-number="1380"></td>
        <td id="LC1380" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lineix</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1381" class="blob-num js-line-number" data-line-number="1381"></td>
        <td id="LC1381" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L1382" class="blob-num js-line-number" data-line-number="1382"></td>
        <td id="LC1382" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1383" class="blob-num js-line-number" data-line-number="1383"></td>
        <td id="LC1383" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1384" class="blob-num js-line-number" data-line-number="1384"></td>
        <td id="LC1384" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>RemoveMultiLineCommentsFromRange</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>begin</span>, <span class=pl-s1>end</span>):</td>
      </tr>
      <tr>
        <td id="L1385" class="blob-num js-line-number" data-line-number="1385"></td>
        <td id="LC1385" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Clears a range of lines for multi-line comments.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1386" class="blob-num js-line-number" data-line-number="1386"></td>
        <td id="LC1386" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Having // &lt;empty&gt; comments makes the lines non-empty, so we will not get</span></td>
      </tr>
      <tr>
        <td id="L1387" class="blob-num js-line-number" data-line-number="1387"></td>
        <td id="LC1387" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># unnecessary blank line warnings later in the code.</span></td>
      </tr>
      <tr>
        <td id="L1388" class="blob-num js-line-number" data-line-number="1388"></td>
        <td id="LC1388" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-s1>begin</span>, <span class=pl-s1>end</span>):</td>
      </tr>
      <tr>
        <td id="L1389" class="blob-num js-line-number" data-line-number="1389"></td>
        <td id="LC1389" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lines</span>[<span class=pl-s1>i</span>] <span class=pl-c1>=</span> <span class=pl-s>&#39;/**/&#39;</span></td>
      </tr>
      <tr>
        <td id="L1390" class="blob-num js-line-number" data-line-number="1390"></td>
        <td id="LC1390" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1391" class="blob-num js-line-number" data-line-number="1391"></td>
        <td id="LC1391" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1392" class="blob-num js-line-number" data-line-number="1392"></td>
        <td id="LC1392" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>RemoveMultiLineComments</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L1393" class="blob-num js-line-number" data-line-number="1393"></td>
        <td id="LC1393" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Removes multiline (c-style) comments from lines.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1394" class="blob-num js-line-number" data-line-number="1394"></td>
        <td id="LC1394" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lineix</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1395" class="blob-num js-line-number" data-line-number="1395"></td>
        <td id="LC1395" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>lineix</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1396" class="blob-num js-line-number" data-line-number="1396"></td>
        <td id="LC1396" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lineix_begin</span> <span class=pl-c1>=</span> <span class=pl-v>FindNextMultiLineCommentStart</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>lineix</span>)</td>
      </tr>
      <tr>
        <td id="L1397" class="blob-num js-line-number" data-line-number="1397"></td>
        <td id="LC1397" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>lineix_begin</span> <span class=pl-c1>&gt;=</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1398" class="blob-num js-line-number" data-line-number="1398"></td>
        <td id="LC1398" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1399" class="blob-num js-line-number" data-line-number="1399"></td>
        <td id="LC1399" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lineix_end</span> <span class=pl-c1>=</span> <span class=pl-v>FindNextMultiLineCommentEnd</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>lineix_begin</span>)</td>
      </tr>
      <tr>
        <td id="L1400" class="blob-num js-line-number" data-line-number="1400"></td>
        <td id="LC1400" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>lineix_end</span> <span class=pl-c1>&gt;=</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1401" class="blob-num js-line-number" data-line-number="1401"></td>
        <td id="LC1401" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lineix_begin</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>, <span class=pl-s>&#39;readability/multiline_comment&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L1402" class="blob-num js-line-number" data-line-number="1402"></td>
        <td id="LC1402" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Could not find end of multi-line comment&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1403" class="blob-num js-line-number" data-line-number="1403"></td>
        <td id="LC1403" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1404" class="blob-num js-line-number" data-line-number="1404"></td>
        <td id="LC1404" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>RemoveMultiLineCommentsFromRange</span>(<span class=pl-s1>lines</span>, <span class=pl-s1>lineix_begin</span>, <span class=pl-s1>lineix_end</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L1405" class="blob-num js-line-number" data-line-number="1405"></td>
        <td id="LC1405" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lineix</span> <span class=pl-c1>=</span> <span class=pl-s1>lineix_end</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1406" class="blob-num js-line-number" data-line-number="1406"></td>
        <td id="LC1406" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1407" class="blob-num js-line-number" data-line-number="1407"></td>
        <td id="LC1407" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1408" class="blob-num js-line-number" data-line-number="1408"></td>
        <td id="LC1408" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CleanseComments</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L1409" class="blob-num js-line-number" data-line-number="1409"></td>
        <td id="LC1409" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Removes //-comments and single-line C-style /* */ comments.</span></td>
      </tr>
      <tr>
        <td id="L1410" class="blob-num js-line-number" data-line-number="1410"></td>
        <td id="LC1410" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1411" class="blob-num js-line-number" data-line-number="1411"></td>
        <td id="LC1411" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1412" class="blob-num js-line-number" data-line-number="1412"></td>
        <td id="LC1412" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: A line of C++ source.</span></td>
      </tr>
      <tr>
        <td id="L1413" class="blob-num js-line-number" data-line-number="1413"></td>
        <td id="LC1413" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1414" class="blob-num js-line-number" data-line-number="1414"></td>
        <td id="LC1414" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1415" class="blob-num js-line-number" data-line-number="1415"></td>
        <td id="LC1415" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The line with single-line comments removed.</span></td>
      </tr>
      <tr>
        <td id="L1416" class="blob-num js-line-number" data-line-number="1416"></td>
        <td id="LC1416" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1417" class="blob-num js-line-number" data-line-number="1417"></td>
        <td id="LC1417" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>commentpos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;//&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1418" class="blob-num js-line-number" data-line-number="1418"></td>
        <td id="LC1418" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>commentpos</span> <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>IsCppString</span>(<span class=pl-s1>line</span>[:<span class=pl-s1>commentpos</span>]):</td>
      </tr>
      <tr>
        <td id="L1419" class="blob-num js-line-number" data-line-number="1419"></td>
        <td id="LC1419" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[:<span class=pl-s1>commentpos</span>].<span class=pl-en>rstrip</span>()</td>
      </tr>
      <tr>
        <td id="L1420" class="blob-num js-line-number" data-line-number="1420"></td>
        <td id="LC1420" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># get rid of /* ... */</span></td>
      </tr>
      <tr>
        <td id="L1421" class="blob-num js-line-number" data-line-number="1421"></td>
        <td id="LC1421" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_RE_PATTERN_CLEANSE_LINE_C_COMMENTS</span>.<span class=pl-en>sub</span>(<span class=pl-s>&#39;&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L1422" class="blob-num js-line-number" data-line-number="1422"></td>
        <td id="LC1422" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1423" class="blob-num js-line-number" data-line-number="1423"></td>
        <td id="LC1423" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1424" class="blob-num js-line-number" data-line-number="1424"></td>
        <td id="LC1424" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-v>CleansedLines</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L1425" class="blob-num js-line-number" data-line-number="1425"></td>
        <td id="LC1425" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Holds 4 copies of all lines with different preprocessing applied to them.</span></td>
      </tr>
      <tr>
        <td id="L1426" class="blob-num js-line-number" data-line-number="1426"></td>
        <td id="LC1426" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1427" class="blob-num js-line-number" data-line-number="1427"></td>
        <td id="LC1427" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  1) elided member contains lines without strings and comments.</span></td>
      </tr>
      <tr>
        <td id="L1428" class="blob-num js-line-number" data-line-number="1428"></td>
        <td id="LC1428" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  2) lines member contains lines without comments.</span></td>
      </tr>
      <tr>
        <td id="L1429" class="blob-num js-line-number" data-line-number="1429"></td>
        <td id="LC1429" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  3) raw_lines member contains all the lines without processing.</span></td>
      </tr>
      <tr>
        <td id="L1430" class="blob-num js-line-number" data-line-number="1430"></td>
        <td id="LC1430" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  4) lines_without_raw_strings member is same as raw_lines, but with C++11 raw</span></td>
      </tr>
      <tr>
        <td id="L1431" class="blob-num js-line-number" data-line-number="1431"></td>
        <td id="LC1431" class="blob-code blob-code-inner js-file-line"><span class=pl-s>     strings removed.</span></td>
      </tr>
      <tr>
        <td id="L1432" class="blob-num js-line-number" data-line-number="1432"></td>
        <td id="LC1432" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  All these members are of &lt;type &#39;list&#39;&gt;, and of the same length.</span></td>
      </tr>
      <tr>
        <td id="L1433" class="blob-num js-line-number" data-line-number="1433"></td>
        <td id="LC1433" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1434" class="blob-num js-line-number" data-line-number="1434"></td>
        <td id="LC1434" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1435" class="blob-num js-line-number" data-line-number="1435"></td>
        <td id="LC1435" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L1436" class="blob-num js-line-number" data-line-number="1436"></td>
        <td id="LC1436" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>elided</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L1437" class="blob-num js-line-number" data-line-number="1437"></td>
        <td id="LC1437" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>lines</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L1438" class="blob-num js-line-number" data-line-number="1438"></td>
        <td id="LC1438" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>raw_lines</span> <span class=pl-c1>=</span> <span class=pl-s1>lines</span></td>
      </tr>
      <tr>
        <td id="L1439" class="blob-num js-line-number" data-line-number="1439"></td>
        <td id="LC1439" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>num_lines</span> <span class=pl-c1>=</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L1440" class="blob-num js-line-number" data-line-number="1440"></td>
        <td id="LC1440" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>lines_without_raw_strings</span> <span class=pl-c1>=</span> <span class=pl-v>CleanseRawStrings</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L1441" class="blob-num js-line-number" data-line-number="1441"></td>
        <td id="LC1441" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-en>len</span>(<span class=pl-s1>self</span>.<span class=pl-s1>lines_without_raw_strings</span>)):</td>
      </tr>
      <tr>
        <td id="L1442" class="blob-num js-line-number" data-line-number="1442"></td>
        <td id="LC1442" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>lines</span>.<span class=pl-en>append</span>(<span class=pl-v>CleanseComments</span>(</td>
      </tr>
      <tr>
        <td id="L1443" class="blob-num js-line-number" data-line-number="1443"></td>
        <td id="LC1443" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>lines_without_raw_strings</span>[<span class=pl-s1>linenum</span>]))</td>
      </tr>
      <tr>
        <td id="L1444" class="blob-num js-line-number" data-line-number="1444"></td>
        <td id="LC1444" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-en>_CollapseStrings</span>(<span class=pl-s1>self</span>.<span class=pl-s1>lines_without_raw_strings</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L1445" class="blob-num js-line-number" data-line-number="1445"></td>
        <td id="LC1445" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>elided</span>.<span class=pl-en>append</span>(<span class=pl-v>CleanseComments</span>(<span class=pl-s1>elided</span>))</td>
      </tr>
      <tr>
        <td id="L1446" class="blob-num js-line-number" data-line-number="1446"></td>
        <td id="LC1446" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1447" class="blob-num js-line-number" data-line-number="1447"></td>
        <td id="LC1447" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>NumLines</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L1448" class="blob-num js-line-number" data-line-number="1448"></td>
        <td id="LC1448" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Returns the number of lines represented.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1449" class="blob-num js-line-number" data-line-number="1449"></td>
        <td id="LC1449" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>num_lines</span></td>
      </tr>
      <tr>
        <td id="L1450" class="blob-num js-line-number" data-line-number="1450"></td>
        <td id="LC1450" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1451" class="blob-num js-line-number" data-line-number="1451"></td>
        <td id="LC1451" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>@<span class=pl-s1>staticmethod</span></span></td>
      </tr>
      <tr>
        <td id="L1452" class="blob-num js-line-number" data-line-number="1452"></td>
        <td id="LC1452" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>_CollapseStrings</span>(<span class=pl-s1>elided</span>):</td>
      </tr>
      <tr>
        <td id="L1453" class="blob-num js-line-number" data-line-number="1453"></td>
        <td id="LC1453" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Collapses strings and chars on a line to simple &quot;&quot; or &#39;&#39; blocks.</span></td>
      </tr>
      <tr>
        <td id="L1454" class="blob-num js-line-number" data-line-number="1454"></td>
        <td id="LC1454" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1455" class="blob-num js-line-number" data-line-number="1455"></td>
        <td id="LC1455" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    We nix strings first so we&#39;re not fooled by text like &#39;&quot;http://&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1456" class="blob-num js-line-number" data-line-number="1456"></td>
        <td id="LC1456" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1457" class="blob-num js-line-number" data-line-number="1457"></td>
        <td id="LC1457" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L1458" class="blob-num js-line-number" data-line-number="1458"></td>
        <td id="LC1458" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      elided: The line being processed.</span></td>
      </tr>
      <tr>
        <td id="L1459" class="blob-num js-line-number" data-line-number="1459"></td>
        <td id="LC1459" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1460" class="blob-num js-line-number" data-line-number="1460"></td>
        <td id="LC1460" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L1461" class="blob-num js-line-number" data-line-number="1461"></td>
        <td id="LC1461" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      The line with collapsed strings.</span></td>
      </tr>
      <tr>
        <td id="L1462" class="blob-num js-line-number" data-line-number="1462"></td>
        <td id="LC1462" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1463" class="blob-num js-line-number" data-line-number="1463"></td>
        <td id="LC1463" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_RE_PATTERN_INCLUDE</span>.<span class=pl-en>match</span>(<span class=pl-s1>elided</span>):</td>
      </tr>
      <tr>
        <td id="L1464" class="blob-num js-line-number" data-line-number="1464"></td>
        <td id="LC1464" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L1465" class="blob-num js-line-number" data-line-number="1465"></td>
        <td id="LC1465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1466" class="blob-num js-line-number" data-line-number="1466"></td>
        <td id="LC1466" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Remove escaped characters first to make quote/single quote collapsing</span></td>
      </tr>
      <tr>
        <td id="L1467" class="blob-num js-line-number" data-line-number="1467"></td>
        <td id="LC1467" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># basic.  Things that look like escaped characters shouldn&#39;t occur</span></td>
      </tr>
      <tr>
        <td id="L1468" class="blob-num js-line-number" data-line-number="1468"></td>
        <td id="LC1468" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># outside of strings and chars.</span></td>
      </tr>
      <tr>
        <td id="L1469" class="blob-num js-line-number" data-line-number="1469"></td>
        <td id="LC1469" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_CLEANSE_LINE_ESCAPES</span>.<span class=pl-en>sub</span>(<span class=pl-s>&#39;&#39;</span>, <span class=pl-s1>elided</span>)</td>
      </tr>
      <tr>
        <td id="L1470" class="blob-num js-line-number" data-line-number="1470"></td>
        <td id="LC1470" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1471" class="blob-num js-line-number" data-line-number="1471"></td>
        <td id="LC1471" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Replace quoted strings and digit separators.  Both single quotes</span></td>
      </tr>
      <tr>
        <td id="L1472" class="blob-num js-line-number" data-line-number="1472"></td>
        <td id="LC1472" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># and double quotes are processed in the same loop, otherwise</span></td>
      </tr>
      <tr>
        <td id="L1473" class="blob-num js-line-number" data-line-number="1473"></td>
        <td id="LC1473" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># nested quotes wouldn&#39;t work.</span></td>
      </tr>
      <tr>
        <td id="L1474" class="blob-num js-line-number" data-line-number="1474"></td>
        <td id="LC1474" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>collapsed</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1475" class="blob-num js-line-number" data-line-number="1475"></td>
        <td id="LC1475" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>
      </tr>
      <tr>
        <td id="L1476" class="blob-num js-line-number" data-line-number="1476"></td>
        <td id="LC1476" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Find the first quote character</span></td>
      </tr>
      <tr>
        <td id="L1477" class="blob-num js-line-number" data-line-number="1477"></td>
        <td id="LC1477" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^\&#39;&quot;]*)([\&#39;&quot;])(.*)$&#39;</span>, <span class=pl-s1>elided</span>)</td>
      </tr>
      <tr>
        <td id="L1478" class="blob-num js-line-number" data-line-number="1478"></td>
        <td id="LC1478" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L1479" class="blob-num js-line-number" data-line-number="1479"></td>
        <td id="LC1479" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L1480" class="blob-num js-line-number" data-line-number="1480"></td>
        <td id="LC1480" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1481" class="blob-num js-line-number" data-line-number="1481"></td>
        <td id="LC1481" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>head</span>, <span class=pl-s1>quote</span>, <span class=pl-s1>tail</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>groups</span>()</td>
      </tr>
      <tr>
        <td id="L1482" class="blob-num js-line-number" data-line-number="1482"></td>
        <td id="LC1482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1483" class="blob-num js-line-number" data-line-number="1483"></td>
        <td id="LC1483" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>quote</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;&quot;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1484" class="blob-num js-line-number" data-line-number="1484"></td>
        <td id="LC1484" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Collapse double quoted strings</span></td>
      </tr>
      <tr>
        <td id="L1485" class="blob-num js-line-number" data-line-number="1485"></td>
        <td id="LC1485" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>second_quote</span> <span class=pl-c1>=</span> <span class=pl-s1>tail</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1486" class="blob-num js-line-number" data-line-number="1486"></td>
        <td id="LC1486" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>second_quote</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1487" class="blob-num js-line-number" data-line-number="1487"></td>
        <td id="LC1487" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>head</span> <span class=pl-c1>+</span> <span class=pl-s>&#39;&quot;&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1488" class="blob-num js-line-number" data-line-number="1488"></td>
        <td id="LC1488" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>tail</span>[<span class=pl-s1>second_quote</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L1489" class="blob-num js-line-number" data-line-number="1489"></td>
        <td id="LC1489" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1490" class="blob-num js-line-number" data-line-number="1490"></td>
        <td id="LC1490" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Unmatched double quote, don&#39;t bother processing the rest</span></td>
      </tr>
      <tr>
        <td id="L1491" class="blob-num js-line-number" data-line-number="1491"></td>
        <td id="LC1491" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># of the line since this is probably a multiline string.</span></td>
      </tr>
      <tr>
        <td id="L1492" class="blob-num js-line-number" data-line-number="1492"></td>
        <td id="LC1492" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L1493" class="blob-num js-line-number" data-line-number="1493"></td>
        <td id="LC1493" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1494" class="blob-num js-line-number" data-line-number="1494"></td>
        <td id="LC1494" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1495" class="blob-num js-line-number" data-line-number="1495"></td>
        <td id="LC1495" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Found single quote, check nearby text to eliminate digit separators.</span></td>
      </tr>
      <tr>
        <td id="L1496" class="blob-num js-line-number" data-line-number="1496"></td>
        <td id="LC1496" class="blob-code blob-code-inner js-file-line">        <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1497" class="blob-num js-line-number" data-line-number="1497"></td>
        <td id="LC1497" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># There is no special handling for floating point here, because</span></td>
      </tr>
      <tr>
        <td id="L1498" class="blob-num js-line-number" data-line-number="1498"></td>
        <td id="LC1498" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># the integer/fractional/exponent parts would all be parsed</span></td>
      </tr>
      <tr>
        <td id="L1499" class="blob-num js-line-number" data-line-number="1499"></td>
        <td id="LC1499" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># correctly as long as there are digits on both sides of the</span></td>
      </tr>
      <tr>
        <td id="L1500" class="blob-num js-line-number" data-line-number="1500"></td>
        <td id="LC1500" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># separator.  So we are fine as long as we don&#39;t see something</span></td>
      </tr>
      <tr>
        <td id="L1501" class="blob-num js-line-number" data-line-number="1501"></td>
        <td id="LC1501" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># like &quot;0.&#39;3&quot; (gcc 4.9.0 will not allow this literal).</span></td>
      </tr>
      <tr>
        <td id="L1502" class="blob-num js-line-number" data-line-number="1502"></td>
        <td id="LC1502" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(?:0[bBxX]?|[1-9])[0-9a-fA-F]*$&#39;</span>, <span class=pl-s1>head</span>):</td>
      </tr>
      <tr>
        <td id="L1503" class="blob-num js-line-number" data-line-number="1503"></td>
        <td id="LC1503" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>match_literal</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^((?:\&#39;?[0-9a-zA-Z_])*)(.*)$&#39;</span>, <span class=pl-s>&quot;&#39;&quot;</span> <span class=pl-c1>+</span> <span class=pl-s1>tail</span>)</td>
      </tr>
      <tr>
        <td id="L1504" class="blob-num js-line-number" data-line-number="1504"></td>
        <td id="LC1504" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>head</span> <span class=pl-c1>+</span> <span class=pl-s1>match_literal</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>).<span class=pl-en>replace</span>(<span class=pl-s>&quot;&#39;&quot;</span>, <span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1505" class="blob-num js-line-number" data-line-number="1505"></td>
        <td id="LC1505" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>match_literal</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L1506" class="blob-num js-line-number" data-line-number="1506"></td>
        <td id="LC1506" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1507" class="blob-num js-line-number" data-line-number="1507"></td>
        <td id="LC1507" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>second_quote</span> <span class=pl-c1>=</span> <span class=pl-s1>tail</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;<span class=pl-cce>\&#39;</span>&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1508" class="blob-num js-line-number" data-line-number="1508"></td>
        <td id="LC1508" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>second_quote</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1509" class="blob-num js-line-number" data-line-number="1509"></td>
        <td id="LC1509" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>head</span> <span class=pl-c1>+</span> <span class=pl-s>&quot;&#39;&#39;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1510" class="blob-num js-line-number" data-line-number="1510"></td>
        <td id="LC1510" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>tail</span>[<span class=pl-s1>second_quote</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L1511" class="blob-num js-line-number" data-line-number="1511"></td>
        <td id="LC1511" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1512" class="blob-num js-line-number" data-line-number="1512"></td>
        <td id="LC1512" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># Unmatched single quote</span></td>
      </tr>
      <tr>
        <td id="L1513" class="blob-num js-line-number" data-line-number="1513"></td>
        <td id="LC1513" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>collapsed</span> <span class=pl-c1>+=</span> <span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L1514" class="blob-num js-line-number" data-line-number="1514"></td>
        <td id="LC1514" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1515" class="blob-num js-line-number" data-line-number="1515"></td>
        <td id="LC1515" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1516" class="blob-num js-line-number" data-line-number="1516"></td>
        <td id="LC1516" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>collapsed</span></td>
      </tr>
      <tr>
        <td id="L1517" class="blob-num js-line-number" data-line-number="1517"></td>
        <td id="LC1517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1518" class="blob-num js-line-number" data-line-number="1518"></td>
        <td id="LC1518" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1519" class="blob-num js-line-number" data-line-number="1519"></td>
        <td id="LC1519" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FindEndOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-s1>startpos</span>, <span class=pl-s1>stack</span>):</td>
      </tr>
      <tr>
        <td id="L1520" class="blob-num js-line-number" data-line-number="1520"></td>
        <td id="LC1520" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Find the position just after the end of current parenthesized expression.</span></td>
      </tr>
      <tr>
        <td id="L1521" class="blob-num js-line-number" data-line-number="1521"></td>
        <td id="LC1521" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1522" class="blob-num js-line-number" data-line-number="1522"></td>
        <td id="LC1522" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1523" class="blob-num js-line-number" data-line-number="1523"></td>
        <td id="LC1523" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: a CleansedLines line.</span></td>
      </tr>
      <tr>
        <td id="L1524" class="blob-num js-line-number" data-line-number="1524"></td>
        <td id="LC1524" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    startpos: start searching at this position.</span></td>
      </tr>
      <tr>
        <td id="L1525" class="blob-num js-line-number" data-line-number="1525"></td>
        <td id="LC1525" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    stack: nesting stack at startpos.</span></td>
      </tr>
      <tr>
        <td id="L1526" class="blob-num js-line-number" data-line-number="1526"></td>
        <td id="LC1526" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1527" class="blob-num js-line-number" data-line-number="1527"></td>
        <td id="LC1527" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1528" class="blob-num js-line-number" data-line-number="1528"></td>
        <td id="LC1528" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    On finding matching end: (index just after matching end, None)</span></td>
      </tr>
      <tr>
        <td id="L1529" class="blob-num js-line-number" data-line-number="1529"></td>
        <td id="LC1529" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    On finding an unclosed expression: (-1, None)</span></td>
      </tr>
      <tr>
        <td id="L1530" class="blob-num js-line-number" data-line-number="1530"></td>
        <td id="LC1530" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Otherwise: (-1, new stack at end of this line)</span></td>
      </tr>
      <tr>
        <td id="L1531" class="blob-num js-line-number" data-line-number="1531"></td>
        <td id="LC1531" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1532" class="blob-num js-line-number" data-line-number="1532"></td>
        <td id="LC1532" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>startpos</span>, <span class=pl-en>len</span>(<span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L1533" class="blob-num js-line-number" data-line-number="1533"></td>
        <td id="LC1533" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>char</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L1534" class="blob-num js-line-number" data-line-number="1534"></td>
        <td id="LC1534" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>char</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;([{&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1535" class="blob-num js-line-number" data-line-number="1535"></td>
        <td id="LC1535" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found start of parenthesized expression, push to expression stack</span></td>
      </tr>
      <tr>
        <td id="L1536" class="blob-num js-line-number" data-line-number="1536"></td>
        <td id="LC1536" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-s1>char</span>)</td>
      </tr>
      <tr>
        <td id="L1537" class="blob-num js-line-number" data-line-number="1537"></td>
        <td id="LC1537" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1538" class="blob-num js-line-number" data-line-number="1538"></td>
        <td id="LC1538" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found potential start of template argument list</span></td>
      </tr>
      <tr>
        <td id="L1539" class="blob-num js-line-number" data-line-number="1539"></td>
        <td id="LC1539" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>i</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-s1>line</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1540" class="blob-num js-line-number" data-line-number="1540"></td>
        <td id="LC1540" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Left shift operator</span></td>
      </tr>
      <tr>
        <td id="L1541" class="blob-num js-line-number" data-line-number="1541"></td>
        <td id="LC1541" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1542" class="blob-num js-line-number" data-line-number="1542"></td>
        <td id="LC1542" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1543" class="blob-num js-line-number" data-line-number="1543"></td>
        <td id="LC1543" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1544" class="blob-num js-line-number" data-line-number="1544"></td>
        <td id="LC1544" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1545" class="blob-num js-line-number" data-line-number="1545"></td>
        <td id="LC1545" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-s1>i</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\s*$&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>i</span>]):</td>
      </tr>
      <tr>
        <td id="L1546" class="blob-num js-line-number" data-line-number="1546"></td>
        <td id="LC1546" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># operator&lt;, don&#39;t add to stack</span></td>
      </tr>
      <tr>
        <td id="L1547" class="blob-num js-line-number" data-line-number="1547"></td>
        <td id="LC1547" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L1548" class="blob-num js-line-number" data-line-number="1548"></td>
        <td id="LC1548" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1549" class="blob-num js-line-number" data-line-number="1549"></td>
        <td id="LC1549" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Tentative start of template argument list</span></td>
      </tr>
      <tr>
        <td id="L1550" class="blob-num js-line-number" data-line-number="1550"></td>
        <td id="LC1550" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-s>&#39;&lt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1551" class="blob-num js-line-number" data-line-number="1551"></td>
        <td id="LC1551" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;)]}&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1552" class="blob-num js-line-number" data-line-number="1552"></td>
        <td id="LC1552" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found end of parenthesized expression.</span></td>
      </tr>
      <tr>
        <td id="L1553" class="blob-num js-line-number" data-line-number="1553"></td>
        <td id="LC1553" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1554" class="blob-num js-line-number" data-line-number="1554"></td>
        <td id="LC1554" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># If we are currently expecting a matching &#39;&gt;&#39;, the pending &#39;&lt;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1555" class="blob-num js-line-number" data-line-number="1555"></td>
        <td id="LC1555" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># must have been an operator.  Remove them from expression stack.</span></td>
      </tr>
      <tr>
        <td id="L1556" class="blob-num js-line-number" data-line-number="1556"></td>
        <td id="LC1556" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1557" class="blob-num js-line-number" data-line-number="1557"></td>
        <td id="LC1557" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1558" class="blob-num js-line-number" data-line-number="1558"></td>
        <td id="LC1558" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1559" class="blob-num js-line-number" data-line-number="1559"></td>
        <td id="LC1559" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1560" class="blob-num js-line-number" data-line-number="1560"></td>
        <td id="LC1560" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> ((<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;(&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;)&#39;</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1561" class="blob-num js-line-number" data-line-number="1561"></td>
        <td id="LC1561" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;[&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;]&#39;</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1562" class="blob-num js-line-number" data-line-number="1562"></td>
        <td id="LC1562" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;{&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;}&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L1563" class="blob-num js-line-number" data-line-number="1563"></td>
        <td id="LC1563" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1564" class="blob-num js-line-number" data-line-number="1564"></td>
        <td id="LC1564" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1565" class="blob-num js-line-number" data-line-number="1565"></td>
        <td id="LC1565" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span> (<span class=pl-s1>i</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1566" class="blob-num js-line-number" data-line-number="1566"></td>
        <td id="LC1566" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1567" class="blob-num js-line-number" data-line-number="1567"></td>
        <td id="LC1567" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Mismatched parentheses</span></td>
      </tr>
      <tr>
        <td id="L1568" class="blob-num js-line-number" data-line-number="1568"></td>
        <td id="LC1568" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1569" class="blob-num js-line-number" data-line-number="1569"></td>
        <td id="LC1569" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1570" class="blob-num js-line-number" data-line-number="1570"></td>
        <td id="LC1570" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found potential end of template argument list.</span></td>
      </tr>
      <tr>
        <td id="L1571" class="blob-num js-line-number" data-line-number="1571"></td>
        <td id="LC1571" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1572" class="blob-num js-line-number" data-line-number="1572"></td>
        <td id="LC1572" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Ignore &quot;-&gt;&quot; and operator functions</span></td>
      </tr>
      <tr>
        <td id="L1573" class="blob-num js-line-number" data-line-number="1573"></td>
        <td id="LC1573" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>i</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L1574" class="blob-num js-line-number" data-line-number="1574"></td>
        <td id="LC1574" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>line</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;-&#39;</span> <span class=pl-c1>or</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\s*$&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]))):</td>
      </tr>
      <tr>
        <td id="L1575" class="blob-num js-line-number" data-line-number="1575"></td>
        <td id="LC1575" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L1576" class="blob-num js-line-number" data-line-number="1576"></td>
        <td id="LC1576" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1577" class="blob-num js-line-number" data-line-number="1577"></td>
        <td id="LC1577" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Pop the stack if there is a matching &#39;&lt;&#39;.  Otherwise, ignore</span></td>
      </tr>
      <tr>
        <td id="L1578" class="blob-num js-line-number" data-line-number="1578"></td>
        <td id="LC1578" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># this &#39;&gt;&#39; since it must be an operator.</span></td>
      </tr>
      <tr>
        <td id="L1579" class="blob-num js-line-number" data-line-number="1579"></td>
        <td id="LC1579" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1580" class="blob-num js-line-number" data-line-number="1580"></td>
        <td id="LC1580" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1581" class="blob-num js-line-number" data-line-number="1581"></td>
        <td id="LC1581" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1582" class="blob-num js-line-number" data-line-number="1582"></td>
        <td id="LC1582" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1583" class="blob-num js-line-number" data-line-number="1583"></td>
        <td id="LC1583" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>return</span> (<span class=pl-s1>i</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1584" class="blob-num js-line-number" data-line-number="1584"></td>
        <td id="LC1584" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1585" class="blob-num js-line-number" data-line-number="1585"></td>
        <td id="LC1585" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found something that look like end of statements.  If we are currently</span></td>
      </tr>
      <tr>
        <td id="L1586" class="blob-num js-line-number" data-line-number="1586"></td>
        <td id="LC1586" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># expecting a &#39;&gt;&#39;, the matching &#39;&lt;&#39; must have been an operator, since</span></td>
      </tr>
      <tr>
        <td id="L1587" class="blob-num js-line-number" data-line-number="1587"></td>
        <td id="LC1587" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># template argument list should not contain statements.</span></td>
      </tr>
      <tr>
        <td id="L1588" class="blob-num js-line-number" data-line-number="1588"></td>
        <td id="LC1588" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1589" class="blob-num js-line-number" data-line-number="1589"></td>
        <td id="LC1589" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1590" class="blob-num js-line-number" data-line-number="1590"></td>
        <td id="LC1590" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1591" class="blob-num js-line-number" data-line-number="1591"></td>
        <td id="LC1591" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1592" class="blob-num js-line-number" data-line-number="1592"></td>
        <td id="LC1592" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1593" class="blob-num js-line-number" data-line-number="1593"></td>
        <td id="LC1593" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Did not find end of expression or unbalanced parentheses on this line</span></td>
      </tr>
      <tr>
        <td id="L1594" class="blob-num js-line-number" data-line-number="1594"></td>
        <td id="LC1594" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-s1>stack</span>)</td>
      </tr>
      <tr>
        <td id="L1595" class="blob-num js-line-number" data-line-number="1595"></td>
        <td id="LC1595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1596" class="blob-num js-line-number" data-line-number="1596"></td>
        <td id="LC1596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1597" class="blob-num js-line-number" data-line-number="1597"></td>
        <td id="LC1597" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span>):</td>
      </tr>
      <tr>
        <td id="L1598" class="blob-num js-line-number" data-line-number="1598"></td>
        <td id="LC1598" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;If input points to ( or { or [ or &lt;, finds the position that closes it.</span></td>
      </tr>
      <tr>
        <td id="L1599" class="blob-num js-line-number" data-line-number="1599"></td>
        <td id="LC1599" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1600" class="blob-num js-line-number" data-line-number="1600"></td>
        <td id="LC1600" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  If lines[linenum][pos] points to a &#39;(&#39; or &#39;{&#39; or &#39;[&#39; or &#39;&lt;&#39;, finds the</span></td>
      </tr>
      <tr>
        <td id="L1601" class="blob-num js-line-number" data-line-number="1601"></td>
        <td id="LC1601" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  linenum/pos that correspond to the closing of the expression.</span></td>
      </tr>
      <tr>
        <td id="L1602" class="blob-num js-line-number" data-line-number="1602"></td>
        <td id="LC1602" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1603" class="blob-num js-line-number" data-line-number="1603"></td>
        <td id="LC1603" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  TODO(unknown): cpplint spends a fair bit of time matching parentheses.</span></td>
      </tr>
      <tr>
        <td id="L1604" class="blob-num js-line-number" data-line-number="1604"></td>
        <td id="LC1604" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Ideally we would want to index all opening and closing parentheses once</span></td>
      </tr>
      <tr>
        <td id="L1605" class="blob-num js-line-number" data-line-number="1605"></td>
        <td id="LC1605" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  and have CloseExpression be just a simple lookup, but due to preprocessor</span></td>
      </tr>
      <tr>
        <td id="L1606" class="blob-num js-line-number" data-line-number="1606"></td>
        <td id="LC1606" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  tricks, this is not so easy.</span></td>
      </tr>
      <tr>
        <td id="L1607" class="blob-num js-line-number" data-line-number="1607"></td>
        <td id="LC1607" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1608" class="blob-num js-line-number" data-line-number="1608"></td>
        <td id="LC1608" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1609" class="blob-num js-line-number" data-line-number="1609"></td>
        <td id="LC1609" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L1610" class="blob-num js-line-number" data-line-number="1610"></td>
        <td id="LC1610" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L1611" class="blob-num js-line-number" data-line-number="1611"></td>
        <td id="LC1611" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    pos: A position on the line.</span></td>
      </tr>
      <tr>
        <td id="L1612" class="blob-num js-line-number" data-line-number="1612"></td>
        <td id="LC1612" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1613" class="blob-num js-line-number" data-line-number="1613"></td>
        <td id="LC1613" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1614" class="blob-num js-line-number" data-line-number="1614"></td>
        <td id="LC1614" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    A tuple (line, linenum, pos) pointer *past* the closing brace, or</span></td>
      </tr>
      <tr>
        <td id="L1615" class="blob-num js-line-number" data-line-number="1615"></td>
        <td id="LC1615" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    (line, len(lines), -1) if we never find a close.  Note we ignore</span></td>
      </tr>
      <tr>
        <td id="L1616" class="blob-num js-line-number" data-line-number="1616"></td>
        <td id="LC1616" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    strings and comments when matching; and the line we return is the</span></td>
      </tr>
      <tr>
        <td id="L1617" class="blob-num js-line-number" data-line-number="1617"></td>
        <td id="LC1617" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &#39;cleansed&#39; line at linenum.</span></td>
      </tr>
      <tr>
        <td id="L1618" class="blob-num js-line-number" data-line-number="1618"></td>
        <td id="LC1618" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1619" class="blob-num js-line-number" data-line-number="1619"></td>
        <td id="LC1619" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1620" class="blob-num js-line-number" data-line-number="1620"></td>
        <td id="LC1620" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L1621" class="blob-num js-line-number" data-line-number="1621"></td>
        <td id="LC1621" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>line</span>[<span class=pl-s1>pos</span>] <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;({[&lt;&#39;</span>) <span class=pl-c1>or</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;&lt;[&lt;=]&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-s1>pos</span>:]):</td>
      </tr>
      <tr>
        <td id="L1622" class="blob-num js-line-number" data-line-number="1622"></td>
        <td id="LC1622" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>(), <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L1623" class="blob-num js-line-number" data-line-number="1623"></td>
        <td id="LC1623" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1624" class="blob-num js-line-number" data-line-number="1624"></td>
        <td id="LC1624" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check first line</span></td>
      </tr>
      <tr>
        <td id="L1625" class="blob-num js-line-number" data-line-number="1625"></td>
        <td id="LC1625" class="blob-code blob-code-inner js-file-line">  (<span class=pl-s1>end_pos</span>, <span class=pl-s1>stack</span>) <span class=pl-c1>=</span> <span class=pl-v>FindEndOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-s1>pos</span>, [])</td>
      </tr>
      <tr>
        <td id="L1626" class="blob-num js-line-number" data-line-number="1626"></td>
        <td id="LC1626" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L1627" class="blob-num js-line-number" data-line-number="1627"></td>
        <td id="LC1627" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>end_pos</span>)</td>
      </tr>
      <tr>
        <td id="L1628" class="blob-num js-line-number" data-line-number="1628"></td>
        <td id="LC1628" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1629" class="blob-num js-line-number" data-line-number="1629"></td>
        <td id="LC1629" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Continue scanning forward</span></td>
      </tr>
      <tr>
        <td id="L1630" class="blob-num js-line-number" data-line-number="1630"></td>
        <td id="LC1630" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>() <span class=pl-c1>-</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L1631" class="blob-num js-line-number" data-line-number="1631"></td>
        <td id="LC1631" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1632" class="blob-num js-line-number" data-line-number="1632"></td>
        <td id="LC1632" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L1633" class="blob-num js-line-number" data-line-number="1633"></td>
        <td id="LC1633" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>end_pos</span>, <span class=pl-s1>stack</span>) <span class=pl-c1>=</span> <span class=pl-v>FindEndOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-c1>0</span>, <span class=pl-s1>stack</span>)</td>
      </tr>
      <tr>
        <td id="L1634" class="blob-num js-line-number" data-line-number="1634"></td>
        <td id="LC1634" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L1635" class="blob-num js-line-number" data-line-number="1635"></td>
        <td id="LC1635" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>end_pos</span>)</td>
      </tr>
      <tr>
        <td id="L1636" class="blob-num js-line-number" data-line-number="1636"></td>
        <td id="LC1636" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1637" class="blob-num js-line-number" data-line-number="1637"></td>
        <td id="LC1637" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Did not find end of expression before end of file, give up</span></td>
      </tr>
      <tr>
        <td id="L1638" class="blob-num js-line-number" data-line-number="1638"></td>
        <td id="LC1638" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>(), <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L1639" class="blob-num js-line-number" data-line-number="1639"></td>
        <td id="LC1639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1640" class="blob-num js-line-number" data-line-number="1640"></td>
        <td id="LC1640" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1641" class="blob-num js-line-number" data-line-number="1641"></td>
        <td id="LC1641" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FindStartOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-s1>endpos</span>, <span class=pl-s1>stack</span>):</td>
      </tr>
      <tr>
        <td id="L1642" class="blob-num js-line-number" data-line-number="1642"></td>
        <td id="LC1642" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Find position at the matching start of current expression.</span></td>
      </tr>
      <tr>
        <td id="L1643" class="blob-num js-line-number" data-line-number="1643"></td>
        <td id="LC1643" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1644" class="blob-num js-line-number" data-line-number="1644"></td>
        <td id="LC1644" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  This is almost the reverse of FindEndOfExpressionInLine, but note</span></td>
      </tr>
      <tr>
        <td id="L1645" class="blob-num js-line-number" data-line-number="1645"></td>
        <td id="LC1645" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  that the input position and returned position differs by 1.</span></td>
      </tr>
      <tr>
        <td id="L1646" class="blob-num js-line-number" data-line-number="1646"></td>
        <td id="LC1646" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1647" class="blob-num js-line-number" data-line-number="1647"></td>
        <td id="LC1647" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1648" class="blob-num js-line-number" data-line-number="1648"></td>
        <td id="LC1648" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: a CleansedLines line.</span></td>
      </tr>
      <tr>
        <td id="L1649" class="blob-num js-line-number" data-line-number="1649"></td>
        <td id="LC1649" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    endpos: start searching at this position.</span></td>
      </tr>
      <tr>
        <td id="L1650" class="blob-num js-line-number" data-line-number="1650"></td>
        <td id="LC1650" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    stack: nesting stack at endpos.</span></td>
      </tr>
      <tr>
        <td id="L1651" class="blob-num js-line-number" data-line-number="1651"></td>
        <td id="LC1651" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1652" class="blob-num js-line-number" data-line-number="1652"></td>
        <td id="LC1652" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1653" class="blob-num js-line-number" data-line-number="1653"></td>
        <td id="LC1653" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    On finding matching start: (index at matching start, None)</span></td>
      </tr>
      <tr>
        <td id="L1654" class="blob-num js-line-number" data-line-number="1654"></td>
        <td id="LC1654" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    On finding an unclosed expression: (-1, None)</span></td>
      </tr>
      <tr>
        <td id="L1655" class="blob-num js-line-number" data-line-number="1655"></td>
        <td id="LC1655" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Otherwise: (-1, new stack at beginning of this line)</span></td>
      </tr>
      <tr>
        <td id="L1656" class="blob-num js-line-number" data-line-number="1656"></td>
        <td id="LC1656" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1657" class="blob-num js-line-number" data-line-number="1657"></td>
        <td id="LC1657" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>i</span> <span class=pl-c1>=</span> <span class=pl-s1>endpos</span></td>
      </tr>
      <tr>
        <td id="L1658" class="blob-num js-line-number" data-line-number="1658"></td>
        <td id="LC1658" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>i</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1659" class="blob-num js-line-number" data-line-number="1659"></td>
        <td id="LC1659" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>char</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L1660" class="blob-num js-line-number" data-line-number="1660"></td>
        <td id="LC1660" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>char</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;)]}&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1661" class="blob-num js-line-number" data-line-number="1661"></td>
        <td id="LC1661" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found end of expression, push to expression stack</span></td>
      </tr>
      <tr>
        <td id="L1662" class="blob-num js-line-number" data-line-number="1662"></td>
        <td id="LC1662" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-s1>char</span>)</td>
      </tr>
      <tr>
        <td id="L1663" class="blob-num js-line-number" data-line-number="1663"></td>
        <td id="LC1663" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1664" class="blob-num js-line-number" data-line-number="1664"></td>
        <td id="LC1664" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found potential end of template argument list.</span></td>
      </tr>
      <tr>
        <td id="L1665" class="blob-num js-line-number" data-line-number="1665"></td>
        <td id="LC1665" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1666" class="blob-num js-line-number" data-line-number="1666"></td>
        <td id="LC1666" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Ignore it if it&#39;s a &quot;-&gt;&quot; or &quot;&gt;=&quot; or &quot;operator&gt;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1667" class="blob-num js-line-number" data-line-number="1667"></td>
        <td id="LC1667" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>i</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L1668" class="blob-num js-line-number" data-line-number="1668"></td>
        <td id="LC1668" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>line</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;-&#39;</span> <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1669" class="blob-num js-line-number" data-line-number="1669"></td>
        <td id="LC1669" class="blob-code blob-code-inner js-file-line">           <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s&gt;=\s&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>:]) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1670" class="blob-num js-line-number" data-line-number="1670"></td>
        <td id="LC1670" class="blob-code blob-code-inner js-file-line">           <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\s*$&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>i</span>]))):</td>
      </tr>
      <tr>
        <td id="L1671" class="blob-num js-line-number" data-line-number="1671"></td>
        <td id="LC1671" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>i</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1672" class="blob-num js-line-number" data-line-number="1672"></td>
        <td id="LC1672" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1673" class="blob-num js-line-number" data-line-number="1673"></td>
        <td id="LC1673" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-s>&#39;&gt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1674" class="blob-num js-line-number" data-line-number="1674"></td>
        <td id="LC1674" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1675" class="blob-num js-line-number" data-line-number="1675"></td>
        <td id="LC1675" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found potential start of template argument list</span></td>
      </tr>
      <tr>
        <td id="L1676" class="blob-num js-line-number" data-line-number="1676"></td>
        <td id="LC1676" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>i</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-s1>line</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1677" class="blob-num js-line-number" data-line-number="1677"></td>
        <td id="LC1677" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Left shift operator</span></td>
      </tr>
      <tr>
        <td id="L1678" class="blob-num js-line-number" data-line-number="1678"></td>
        <td id="LC1678" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>i</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1679" class="blob-num js-line-number" data-line-number="1679"></td>
        <td id="LC1679" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1680" class="blob-num js-line-number" data-line-number="1680"></td>
        <td id="LC1680" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If there is a matching &#39;&gt;&#39;, we can pop the expression stack.</span></td>
      </tr>
      <tr>
        <td id="L1681" class="blob-num js-line-number" data-line-number="1681"></td>
        <td id="LC1681" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Otherwise, ignore this &#39;&lt;&#39; since it must be an operator.</span></td>
      </tr>
      <tr>
        <td id="L1682" class="blob-num js-line-number" data-line-number="1682"></td>
        <td id="LC1682" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1683" class="blob-num js-line-number" data-line-number="1683"></td>
        <td id="LC1683" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1684" class="blob-num js-line-number" data-line-number="1684"></td>
        <td id="LC1684" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1685" class="blob-num js-line-number" data-line-number="1685"></td>
        <td id="LC1685" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>return</span> (<span class=pl-s1>i</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1686" class="blob-num js-line-number" data-line-number="1686"></td>
        <td id="LC1686" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;([{&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1687" class="blob-num js-line-number" data-line-number="1687"></td>
        <td id="LC1687" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found start of expression.</span></td>
      </tr>
      <tr>
        <td id="L1688" class="blob-num js-line-number" data-line-number="1688"></td>
        <td id="LC1688" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1689" class="blob-num js-line-number" data-line-number="1689"></td>
        <td id="LC1689" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># If there are any unmatched &#39;&gt;&#39; on the stack, they must be</span></td>
      </tr>
      <tr>
        <td id="L1690" class="blob-num js-line-number" data-line-number="1690"></td>
        <td id="LC1690" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># operators.  Remove those.</span></td>
      </tr>
      <tr>
        <td id="L1691" class="blob-num js-line-number" data-line-number="1691"></td>
        <td id="LC1691" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1692" class="blob-num js-line-number" data-line-number="1692"></td>
        <td id="LC1692" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1693" class="blob-num js-line-number" data-line-number="1693"></td>
        <td id="LC1693" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1694" class="blob-num js-line-number" data-line-number="1694"></td>
        <td id="LC1694" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1695" class="blob-num js-line-number" data-line-number="1695"></td>
        <td id="LC1695" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> ((<span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;(&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;)&#39;</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1696" class="blob-num js-line-number" data-line-number="1696"></td>
        <td id="LC1696" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;[&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;]&#39;</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L1697" class="blob-num js-line-number" data-line-number="1697"></td>
        <td id="LC1697" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;{&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;}&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L1698" class="blob-num js-line-number" data-line-number="1698"></td>
        <td id="LC1698" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1699" class="blob-num js-line-number" data-line-number="1699"></td>
        <td id="LC1699" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1700" class="blob-num js-line-number" data-line-number="1700"></td>
        <td id="LC1700" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span> (<span class=pl-s1>i</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1701" class="blob-num js-line-number" data-line-number="1701"></td>
        <td id="LC1701" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1702" class="blob-num js-line-number" data-line-number="1702"></td>
        <td id="LC1702" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Mismatched parentheses</span></td>
      </tr>
      <tr>
        <td id="L1703" class="blob-num js-line-number" data-line-number="1703"></td>
        <td id="LC1703" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1704" class="blob-num js-line-number" data-line-number="1704"></td>
        <td id="LC1704" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>char</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1705" class="blob-num js-line-number" data-line-number="1705"></td>
        <td id="LC1705" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found something that look like end of statements.  If we are currently</span></td>
      </tr>
      <tr>
        <td id="L1706" class="blob-num js-line-number" data-line-number="1706"></td>
        <td id="LC1706" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># expecting a &#39;&lt;&#39;, the matching &#39;&gt;&#39; must have been an operator, since</span></td>
      </tr>
      <tr>
        <td id="L1707" class="blob-num js-line-number" data-line-number="1707"></td>
        <td id="LC1707" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># template argument list should not contain statements.</span></td>
      </tr>
      <tr>
        <td id="L1708" class="blob-num js-line-number" data-line-number="1708"></td>
        <td id="LC1708" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1709" class="blob-num js-line-number" data-line-number="1709"></td>
        <td id="LC1709" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L1710" class="blob-num js-line-number" data-line-number="1710"></td>
        <td id="LC1710" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L1711" class="blob-num js-line-number" data-line-number="1711"></td>
        <td id="LC1711" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L1712" class="blob-num js-line-number" data-line-number="1712"></td>
        <td id="LC1712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1713" class="blob-num js-line-number" data-line-number="1713"></td>
        <td id="LC1713" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>i</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1714" class="blob-num js-line-number" data-line-number="1714"></td>
        <td id="LC1714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1715" class="blob-num js-line-number" data-line-number="1715"></td>
        <td id="LC1715" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-s1>stack</span>)</td>
      </tr>
      <tr>
        <td id="L1716" class="blob-num js-line-number" data-line-number="1716"></td>
        <td id="LC1716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1717" class="blob-num js-line-number" data-line-number="1717"></td>
        <td id="LC1717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1718" class="blob-num js-line-number" data-line-number="1718"></td>
        <td id="LC1718" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ReverseCloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span>):</td>
      </tr>
      <tr>
        <td id="L1719" class="blob-num js-line-number" data-line-number="1719"></td>
        <td id="LC1719" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;If input points to ) or } or ] or &gt;, finds the position that opens it.</span></td>
      </tr>
      <tr>
        <td id="L1720" class="blob-num js-line-number" data-line-number="1720"></td>
        <td id="LC1720" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1721" class="blob-num js-line-number" data-line-number="1721"></td>
        <td id="LC1721" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  If lines[linenum][pos] points to a &#39;)&#39; or &#39;}&#39; or &#39;]&#39; or &#39;&gt;&#39;, finds the</span></td>
      </tr>
      <tr>
        <td id="L1722" class="blob-num js-line-number" data-line-number="1722"></td>
        <td id="LC1722" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  linenum/pos that correspond to the opening of the expression.</span></td>
      </tr>
      <tr>
        <td id="L1723" class="blob-num js-line-number" data-line-number="1723"></td>
        <td id="LC1723" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1724" class="blob-num js-line-number" data-line-number="1724"></td>
        <td id="LC1724" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1725" class="blob-num js-line-number" data-line-number="1725"></td>
        <td id="LC1725" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L1726" class="blob-num js-line-number" data-line-number="1726"></td>
        <td id="LC1726" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L1727" class="blob-num js-line-number" data-line-number="1727"></td>
        <td id="LC1727" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    pos: A position on the line.</span></td>
      </tr>
      <tr>
        <td id="L1728" class="blob-num js-line-number" data-line-number="1728"></td>
        <td id="LC1728" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1729" class="blob-num js-line-number" data-line-number="1729"></td>
        <td id="LC1729" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1730" class="blob-num js-line-number" data-line-number="1730"></td>
        <td id="LC1730" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    A tuple (line, linenum, pos) pointer *at* the opening brace, or</span></td>
      </tr>
      <tr>
        <td id="L1731" class="blob-num js-line-number" data-line-number="1731"></td>
        <td id="LC1731" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    (line, 0, -1) if we never find the matching opening brace.  Note</span></td>
      </tr>
      <tr>
        <td id="L1732" class="blob-num js-line-number" data-line-number="1732"></td>
        <td id="LC1732" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    we ignore strings and comments when matching; and the line we</span></td>
      </tr>
      <tr>
        <td id="L1733" class="blob-num js-line-number" data-line-number="1733"></td>
        <td id="LC1733" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    return is the &#39;cleansed&#39; line at linenum.</span></td>
      </tr>
      <tr>
        <td id="L1734" class="blob-num js-line-number" data-line-number="1734"></td>
        <td id="LC1734" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1735" class="blob-num js-line-number" data-line-number="1735"></td>
        <td id="LC1735" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L1736" class="blob-num js-line-number" data-line-number="1736"></td>
        <td id="LC1736" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>line</span>[<span class=pl-s1>pos</span>] <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s>&#39;)}]&gt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1737" class="blob-num js-line-number" data-line-number="1737"></td>
        <td id="LC1737" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-c1>0</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L1738" class="blob-num js-line-number" data-line-number="1738"></td>
        <td id="LC1738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1739" class="blob-num js-line-number" data-line-number="1739"></td>
        <td id="LC1739" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check last line</span></td>
      </tr>
      <tr>
        <td id="L1740" class="blob-num js-line-number" data-line-number="1740"></td>
        <td id="LC1740" class="blob-code blob-code-inner js-file-line">  (<span class=pl-s1>start_pos</span>, <span class=pl-s1>stack</span>) <span class=pl-c1>=</span> <span class=pl-v>FindStartOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-s1>pos</span>, [])</td>
      </tr>
      <tr>
        <td id="L1741" class="blob-num js-line-number" data-line-number="1741"></td>
        <td id="LC1741" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>start_pos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L1742" class="blob-num js-line-number" data-line-number="1742"></td>
        <td id="LC1742" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>start_pos</span>)</td>
      </tr>
      <tr>
        <td id="L1743" class="blob-num js-line-number" data-line-number="1743"></td>
        <td id="LC1743" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1744" class="blob-num js-line-number" data-line-number="1744"></td>
        <td id="LC1744" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Continue scanning backward</span></td>
      </tr>
      <tr>
        <td id="L1745" class="blob-num js-line-number" data-line-number="1745"></td>
        <td id="LC1745" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L1746" class="blob-num js-line-number" data-line-number="1746"></td>
        <td id="LC1746" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>linenum</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L1747" class="blob-num js-line-number" data-line-number="1747"></td>
        <td id="LC1747" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L1748" class="blob-num js-line-number" data-line-number="1748"></td>
        <td id="LC1748" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>start_pos</span>, <span class=pl-s1>stack</span>) <span class=pl-c1>=</span> <span class=pl-v>FindStartOfExpressionInLine</span>(<span class=pl-s1>line</span>, <span class=pl-en>len</span>(<span class=pl-s1>line</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>, <span class=pl-s1>stack</span>)</td>
      </tr>
      <tr>
        <td id="L1749" class="blob-num js-line-number" data-line-number="1749"></td>
        <td id="LC1749" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>start_pos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L1750" class="blob-num js-line-number" data-line-number="1750"></td>
        <td id="LC1750" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>start_pos</span>)</td>
      </tr>
      <tr>
        <td id="L1751" class="blob-num js-line-number" data-line-number="1751"></td>
        <td id="LC1751" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1752" class="blob-num js-line-number" data-line-number="1752"></td>
        <td id="LC1752" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Did not find start of expression before beginning of file, give up</span></td>
      </tr>
      <tr>
        <td id="L1753" class="blob-num js-line-number" data-line-number="1753"></td>
        <td id="LC1753" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-s1>line</span>, <span class=pl-c1>0</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L1754" class="blob-num js-line-number" data-line-number="1754"></td>
        <td id="LC1754" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1755" class="blob-num js-line-number" data-line-number="1755"></td>
        <td id="LC1755" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1756" class="blob-num js-line-number" data-line-number="1756"></td>
        <td id="LC1756" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForCopyright</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L1757" class="blob-num js-line-number" data-line-number="1757"></td>
        <td id="LC1757" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs an error if no Copyright message appears at the top of the file.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1758" class="blob-num js-line-number" data-line-number="1758"></td>
        <td id="LC1758" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1759" class="blob-num js-line-number" data-line-number="1759"></td>
        <td id="LC1759" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We&#39;ll say it should occur by line 10. Don&#39;t forget there&#39;s a</span></td>
      </tr>
      <tr>
        <td id="L1760" class="blob-num js-line-number" data-line-number="1760"></td>
        <td id="LC1760" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># placeholder line at the front.</span></td>
      </tr>
      <tr>
        <td id="L1761" class="blob-num js-line-number" data-line-number="1761"></td>
        <td id="LC1761" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-c1>1</span>, <span class=pl-en>min</span>(<span class=pl-en>len</span>(<span class=pl-s1>lines</span>), <span class=pl-c1>11</span>)):</td>
      </tr>
      <tr>
        <td id="L1762" class="blob-num js-line-number" data-line-number="1762"></td>
        <td id="LC1762" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>re</span>.<span class=pl-en>search</span>(<span class=pl-s>r&#39;Copyright&#39;</span>, <span class=pl-s1>lines</span>[<span class=pl-s1>line</span>], <span class=pl-s1>re</span>.<span class=pl-v>I</span>): <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1763" class="blob-num js-line-number" data-line-number="1763"></td>
        <td id="LC1763" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:                       <span class=pl-c># means no copyright line was found</span></td>
      </tr>
      <tr>
        <td id="L1764" class="blob-num js-line-number" data-line-number="1764"></td>
        <td id="LC1764" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-c1>0</span>, <span class=pl-s>&#39;legal/copyright&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L1765" class="blob-num js-line-number" data-line-number="1765"></td>
        <td id="LC1765" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;No copyright message found.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L1766" class="blob-num js-line-number" data-line-number="1766"></td>
        <td id="LC1766" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;You should have a line: &quot;Copyright [year] &lt;Copyright Owner&gt;&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1767" class="blob-num js-line-number" data-line-number="1767"></td>
        <td id="LC1767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1768" class="blob-num js-line-number" data-line-number="1768"></td>
        <td id="LC1768" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1769" class="blob-num js-line-number" data-line-number="1769"></td>
        <td id="LC1769" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>GetIndentLevel</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L1770" class="blob-num js-line-number" data-line-number="1770"></td>
        <td id="LC1770" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Return the number of leading spaces in line.</span></td>
      </tr>
      <tr>
        <td id="L1771" class="blob-num js-line-number" data-line-number="1771"></td>
        <td id="LC1771" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1772" class="blob-num js-line-number" data-line-number="1772"></td>
        <td id="LC1772" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1773" class="blob-num js-line-number" data-line-number="1773"></td>
        <td id="LC1773" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: A string to check.</span></td>
      </tr>
      <tr>
        <td id="L1774" class="blob-num js-line-number" data-line-number="1774"></td>
        <td id="LC1774" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1775" class="blob-num js-line-number" data-line-number="1775"></td>
        <td id="LC1775" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1776" class="blob-num js-line-number" data-line-number="1776"></td>
        <td id="LC1776" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    An integer count of leading spaces, possibly zero.</span></td>
      </tr>
      <tr>
        <td id="L1777" class="blob-num js-line-number" data-line-number="1777"></td>
        <td id="LC1777" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1778" class="blob-num js-line-number" data-line-number="1778"></td>
        <td id="LC1778" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>indent</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^( *)\S&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L1779" class="blob-num js-line-number" data-line-number="1779"></td>
        <td id="LC1779" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>indent</span>:</td>
      </tr>
      <tr>
        <td id="L1780" class="blob-num js-line-number" data-line-number="1780"></td>
        <td id="LC1780" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-en>len</span>(<span class=pl-s1>indent</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L1781" class="blob-num js-line-number" data-line-number="1781"></td>
        <td id="LC1781" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L1782" class="blob-num js-line-number" data-line-number="1782"></td>
        <td id="LC1782" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1783" class="blob-num js-line-number" data-line-number="1783"></td>
        <td id="LC1783" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1784" class="blob-num js-line-number" data-line-number="1784"></td>
        <td id="LC1784" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>PathSplitToList</span>(<span class=pl-s1>path</span>):</td>
      </tr>
      <tr>
        <td id="L1785" class="blob-num js-line-number" data-line-number="1785"></td>
        <td id="LC1785" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns the path split into a list by the separator.</span></td>
      </tr>
      <tr>
        <td id="L1786" class="blob-num js-line-number" data-line-number="1786"></td>
        <td id="LC1786" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1787" class="blob-num js-line-number" data-line-number="1787"></td>
        <td id="LC1787" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1788" class="blob-num js-line-number" data-line-number="1788"></td>
        <td id="LC1788" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    path: An absolute or relative path (e.g. &#39;/a/b/c/&#39; or &#39;../a&#39;)</span></td>
      </tr>
      <tr>
        <td id="L1789" class="blob-num js-line-number" data-line-number="1789"></td>
        <td id="LC1789" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1790" class="blob-num js-line-number" data-line-number="1790"></td>
        <td id="LC1790" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1791" class="blob-num js-line-number" data-line-number="1791"></td>
        <td id="LC1791" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    A list of path components (e.g. [&#39;a&#39;, &#39;b&#39;, &#39;c]).</span></td>
      </tr>
      <tr>
        <td id="L1792" class="blob-num js-line-number" data-line-number="1792"></td>
        <td id="LC1792" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1793" class="blob-num js-line-number" data-line-number="1793"></td>
        <td id="LC1793" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lst</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L1794" class="blob-num js-line-number" data-line-number="1794"></td>
        <td id="LC1794" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>
      </tr>
      <tr>
        <td id="L1795" class="blob-num js-line-number" data-line-number="1795"></td>
        <td id="LC1795" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>head</span>, <span class=pl-s1>tail</span>) <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>split</span>(<span class=pl-s1>path</span>)</td>
      </tr>
      <tr>
        <td id="L1796" class="blob-num js-line-number" data-line-number="1796"></td>
        <td id="LC1796" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>head</span> <span class=pl-c1>==</span> <span class=pl-s1>path</span>: <span class=pl-c># absolute paths end</span></td>
      </tr>
      <tr>
        <td id="L1797" class="blob-num js-line-number" data-line-number="1797"></td>
        <td id="LC1797" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>lst</span>.<span class=pl-en>append</span>(<span class=pl-s1>head</span>)</td>
      </tr>
      <tr>
        <td id="L1798" class="blob-num js-line-number" data-line-number="1798"></td>
        <td id="LC1798" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1799" class="blob-num js-line-number" data-line-number="1799"></td>
        <td id="LC1799" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>tail</span> <span class=pl-c1>==</span> <span class=pl-s1>path</span>: <span class=pl-c># relative paths end</span></td>
      </tr>
      <tr>
        <td id="L1800" class="blob-num js-line-number" data-line-number="1800"></td>
        <td id="LC1800" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>lst</span>.<span class=pl-en>append</span>(<span class=pl-s1>tail</span>)</td>
      </tr>
      <tr>
        <td id="L1801" class="blob-num js-line-number" data-line-number="1801"></td>
        <td id="LC1801" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1802" class="blob-num js-line-number" data-line-number="1802"></td>
        <td id="LC1802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1803" class="blob-num js-line-number" data-line-number="1803"></td>
        <td id="LC1803" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>path</span> <span class=pl-c1>=</span> <span class=pl-s1>head</span></td>
      </tr>
      <tr>
        <td id="L1804" class="blob-num js-line-number" data-line-number="1804"></td>
        <td id="LC1804" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>lst</span>.<span class=pl-en>append</span>(<span class=pl-s1>tail</span>)</td>
      </tr>
      <tr>
        <td id="L1805" class="blob-num js-line-number" data-line-number="1805"></td>
        <td id="LC1805" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1806" class="blob-num js-line-number" data-line-number="1806"></td>
        <td id="LC1806" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lst</span>.<span class=pl-en>reverse</span>()</td>
      </tr>
      <tr>
        <td id="L1807" class="blob-num js-line-number" data-line-number="1807"></td>
        <td id="LC1807" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>lst</span></td>
      </tr>
      <tr>
        <td id="L1808" class="blob-num js-line-number" data-line-number="1808"></td>
        <td id="LC1808" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1809" class="blob-num js-line-number" data-line-number="1809"></td>
        <td id="LC1809" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>GetHeaderGuardCPPVariable</span>(<span class=pl-s1>filename</span>):</td>
      </tr>
      <tr>
        <td id="L1810" class="blob-num js-line-number" data-line-number="1810"></td>
        <td id="LC1810" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns the CPP variable that should be used as a header guard.</span></td>
      </tr>
      <tr>
        <td id="L1811" class="blob-num js-line-number" data-line-number="1811"></td>
        <td id="LC1811" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1812" class="blob-num js-line-number" data-line-number="1812"></td>
        <td id="LC1812" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1813" class="blob-num js-line-number" data-line-number="1813"></td>
        <td id="LC1813" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of a C++ header file.</span></td>
      </tr>
      <tr>
        <td id="L1814" class="blob-num js-line-number" data-line-number="1814"></td>
        <td id="LC1814" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1815" class="blob-num js-line-number" data-line-number="1815"></td>
        <td id="LC1815" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L1816" class="blob-num js-line-number" data-line-number="1816"></td>
        <td id="LC1816" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The CPP variable that should be used as a header guard in the</span></td>
      </tr>
      <tr>
        <td id="L1817" class="blob-num js-line-number" data-line-number="1817"></td>
        <td id="LC1817" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    named file.</span></td>
      </tr>
      <tr>
        <td id="L1818" class="blob-num js-line-number" data-line-number="1818"></td>
        <td id="LC1818" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1819" class="blob-num js-line-number" data-line-number="1819"></td>
        <td id="LC1819" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1820" class="blob-num js-line-number" data-line-number="1820"></td>
        <td id="LC1820" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1821" class="blob-num js-line-number" data-line-number="1821"></td>
        <td id="LC1821" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Restores original filename in case that cpplint is invoked from Emacs&#39;s</span></td>
      </tr>
      <tr>
        <td id="L1822" class="blob-num js-line-number" data-line-number="1822"></td>
        <td id="LC1822" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># flymake.</span></td>
      </tr>
      <tr>
        <td id="L1823" class="blob-num js-line-number" data-line-number="1823"></td>
        <td id="LC1823" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>sub</span>(<span class=pl-s>r&#39;_flymake\.h$&#39;</span>, <span class=pl-s>&#39;.h&#39;</span>, <span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L1824" class="blob-num js-line-number" data-line-number="1824"></td>
        <td id="LC1824" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>sub</span>(<span class=pl-s>r&#39;/\.flymake/([^/]*)$&#39;</span>, <span class=pl-s>r&#39;/\1&#39;</span>, <span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L1825" class="blob-num js-line-number" data-line-number="1825"></td>
        <td id="LC1825" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Replace &#39;c++&#39; with &#39;cpp&#39;.</span></td>
      </tr>
      <tr>
        <td id="L1826" class="blob-num js-line-number" data-line-number="1826"></td>
        <td id="LC1826" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename</span> <span class=pl-c1>=</span> <span class=pl-s1>filename</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;C++&#39;</span>, <span class=pl-s>&#39;cpp&#39;</span>).<span class=pl-en>replace</span>(<span class=pl-s>&#39;c++&#39;</span>, <span class=pl-s>&#39;cpp&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L1827" class="blob-num js-line-number" data-line-number="1827"></td>
        <td id="LC1827" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1828" class="blob-num js-line-number" data-line-number="1828"></td>
        <td id="LC1828" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fileinfo</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L1829" class="blob-num js-line-number" data-line-number="1829"></td>
        <td id="LC1829" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>file_path_from_root</span> <span class=pl-c1>=</span> <span class=pl-s1>fileinfo</span>.<span class=pl-v>RepositoryName</span>()</td>
      </tr>
      <tr>
        <td id="L1830" class="blob-num js-line-number" data-line-number="1830"></td>
        <td id="LC1830" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1831" class="blob-num js-line-number" data-line-number="1831"></td>
        <td id="LC1831" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>FixupPathFromRoot</span>():</td>
      </tr>
      <tr>
        <td id="L1832" class="blob-num js-line-number" data-line-number="1832"></td>
        <td id="LC1832" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_root_debug</span>:</td>
      </tr>
      <tr>
        <td id="L1833" class="blob-num js-line-number" data-line-number="1833"></td>
        <td id="LC1833" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&quot;<span class=pl-cce>\n</span>_root fixup, _root = &#39;%s&#39;, repository name = &#39;%s&#39;<span class=pl-cce>\n</span>&quot;</span></td>
      </tr>
      <tr>
        <td id="L1834" class="blob-num js-line-number" data-line-number="1834"></td>
        <td id="LC1834" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>%</span>(<span class=pl-s1>_root</span>, <span class=pl-s1>fileinfo</span>.<span class=pl-v>RepositoryName</span>()))</td>
      </tr>
      <tr>
        <td id="L1835" class="blob-num js-line-number" data-line-number="1835"></td>
        <td id="LC1835" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1836" class="blob-num js-line-number" data-line-number="1836"></td>
        <td id="LC1836" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Process the file path with the --root flag if it was set.</span></td>
      </tr>
      <tr>
        <td id="L1837" class="blob-num js-line-number" data-line-number="1837"></td>
        <td id="LC1837" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>_root</span>:</td>
      </tr>
      <tr>
        <td id="L1838" class="blob-num js-line-number" data-line-number="1838"></td>
        <td id="LC1838" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>_root_debug</span>:</td>
      </tr>
      <tr>
        <td id="L1839" class="blob-num js-line-number" data-line-number="1839"></td>
        <td id="LC1839" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&quot;_root unspecified<span class=pl-cce>\n</span>&quot;</span>)</td>
      </tr>
      <tr>
        <td id="L1840" class="blob-num js-line-number" data-line-number="1840"></td>
        <td id="LC1840" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>file_path_from_root</span></td>
      </tr>
      <tr>
        <td id="L1841" class="blob-num js-line-number" data-line-number="1841"></td>
        <td id="LC1841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1842" class="blob-num js-line-number" data-line-number="1842"></td>
        <td id="LC1842" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>def</span> <span class=pl-v>StripListPrefix</span>(<span class=pl-s1>lst</span>, <span class=pl-s1>prefix</span>):</td>
      </tr>
      <tr>
        <td id="L1843" class="blob-num js-line-number" data-line-number="1843"></td>
        <td id="LC1843" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># f([&#39;x&#39;, &#39;y&#39;], [&#39;w, z&#39;]) -&gt; None  (not a valid prefix)</span></td>
      </tr>
      <tr>
        <td id="L1844" class="blob-num js-line-number" data-line-number="1844"></td>
        <td id="LC1844" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>lst</span>[:<span class=pl-en>len</span>(<span class=pl-s1>prefix</span>)] <span class=pl-c1>!=</span> <span class=pl-s1>prefix</span>:</td>
      </tr>
      <tr>
        <td id="L1845" class="blob-num js-line-number" data-line-number="1845"></td>
        <td id="LC1845" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L1846" class="blob-num js-line-number" data-line-number="1846"></td>
        <td id="LC1846" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># f([&#39;a, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&#39;a&#39;, &#39;b&#39;]) -&gt; [&#39;c&#39;, &#39;d&#39;]</span></td>
      </tr>
      <tr>
        <td id="L1847" class="blob-num js-line-number" data-line-number="1847"></td>
        <td id="LC1847" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>lst</span>[(<span class=pl-en>len</span>(<span class=pl-s1>prefix</span>)):]</td>
      </tr>
      <tr>
        <td id="L1848" class="blob-num js-line-number" data-line-number="1848"></td>
        <td id="LC1848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1849" class="blob-num js-line-number" data-line-number="1849"></td>
        <td id="LC1849" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># root behavior:</span></td>
      </tr>
      <tr>
        <td id="L1850" class="blob-num js-line-number" data-line-number="1850"></td>
        <td id="LC1850" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   --root=subdir , lstrips subdir from the header guard</span></td>
      </tr>
      <tr>
        <td id="L1851" class="blob-num js-line-number" data-line-number="1851"></td>
        <td id="LC1851" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>maybe_path</span> <span class=pl-c1>=</span> <span class=pl-v>StripListPrefix</span>(<span class=pl-v>PathSplitToList</span>(<span class=pl-s1>file_path_from_root</span>),</td>
      </tr>
      <tr>
        <td id="L1852" class="blob-num js-line-number" data-line-number="1852"></td>
        <td id="LC1852" class="blob-code blob-code-inner js-file-line">                                 <span class=pl-v>PathSplitToList</span>(<span class=pl-s1>_root</span>))</td>
      </tr>
      <tr>
        <td id="L1853" class="blob-num js-line-number" data-line-number="1853"></td>
        <td id="LC1853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1854" class="blob-num js-line-number" data-line-number="1854"></td>
        <td id="LC1854" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_root_debug</span>:</td>
      </tr>
      <tr>
        <td id="L1855" class="blob-num js-line-number" data-line-number="1855"></td>
        <td id="LC1855" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>((<span class=pl-s>&quot;_root lstrip (maybe_path=%s, file_path_from_root=%s,&quot;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1856" class="blob-num js-line-number" data-line-number="1856"></td>
        <td id="LC1856" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&quot; _root=%s)<span class=pl-cce>\n</span>&quot;</span>) <span class=pl-c1>%</span>(<span class=pl-s1>maybe_path</span>, <span class=pl-s1>file_path_from_root</span>, <span class=pl-s1>_root</span>))</td>
      </tr>
      <tr>
        <td id="L1857" class="blob-num js-line-number" data-line-number="1857"></td>
        <td id="LC1857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1858" class="blob-num js-line-number" data-line-number="1858"></td>
        <td id="LC1858" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>maybe_path</span>:</td>
      </tr>
      <tr>
        <td id="L1859" class="blob-num js-line-number" data-line-number="1859"></td>
        <td id="LC1859" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-c1>*</span><span class=pl-s1>maybe_path</span>)</td>
      </tr>
      <tr>
        <td id="L1860" class="blob-num js-line-number" data-line-number="1860"></td>
        <td id="LC1860" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1861" class="blob-num js-line-number" data-line-number="1861"></td>
        <td id="LC1861" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   --root=.. , will prepend the outer directory to the header guard</span></td>
      </tr>
      <tr>
        <td id="L1862" class="blob-num js-line-number" data-line-number="1862"></td>
        <td id="LC1862" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>full_path</span> <span class=pl-c1>=</span> <span class=pl-s1>fileinfo</span>.<span class=pl-v>FullName</span>()</td>
      </tr>
      <tr>
        <td id="L1863" class="blob-num js-line-number" data-line-number="1863"></td>
        <td id="LC1863" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>root_abspath</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>abspath</span>(<span class=pl-s1>_root</span>)</td>
      </tr>
      <tr>
        <td id="L1864" class="blob-num js-line-number" data-line-number="1864"></td>
        <td id="LC1864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1865" class="blob-num js-line-number" data-line-number="1865"></td>
        <td id="LC1865" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>maybe_path</span> <span class=pl-c1>=</span> <span class=pl-v>StripListPrefix</span>(<span class=pl-v>PathSplitToList</span>(<span class=pl-s1>full_path</span>),</td>
      </tr>
      <tr>
        <td id="L1866" class="blob-num js-line-number" data-line-number="1866"></td>
        <td id="LC1866" class="blob-code blob-code-inner js-file-line">                                 <span class=pl-v>PathSplitToList</span>(<span class=pl-s1>root_abspath</span>))</td>
      </tr>
      <tr>
        <td id="L1867" class="blob-num js-line-number" data-line-number="1867"></td>
        <td id="LC1867" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1868" class="blob-num js-line-number" data-line-number="1868"></td>
        <td id="LC1868" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_root_debug</span>:</td>
      </tr>
      <tr>
        <td id="L1869" class="blob-num js-line-number" data-line-number="1869"></td>
        <td id="LC1869" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>((<span class=pl-s>&quot;_root prepend (maybe_path=%s, full_path=%s, &quot;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L1870" class="blob-num js-line-number" data-line-number="1870"></td>
        <td id="LC1870" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&quot;root_abspath=%s)<span class=pl-cce>\n</span>&quot;</span>) <span class=pl-c1>%</span>(<span class=pl-s1>maybe_path</span>, <span class=pl-s1>full_path</span>, <span class=pl-s1>root_abspath</span>))</td>
      </tr>
      <tr>
        <td id="L1871" class="blob-num js-line-number" data-line-number="1871"></td>
        <td id="LC1871" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1872" class="blob-num js-line-number" data-line-number="1872"></td>
        <td id="LC1872" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>maybe_path</span>:</td>
      </tr>
      <tr>
        <td id="L1873" class="blob-num js-line-number" data-line-number="1873"></td>
        <td id="LC1873" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-c1>*</span><span class=pl-s1>maybe_path</span>)</td>
      </tr>
      <tr>
        <td id="L1874" class="blob-num js-line-number" data-line-number="1874"></td>
        <td id="LC1874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1875" class="blob-num js-line-number" data-line-number="1875"></td>
        <td id="LC1875" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>_root_debug</span>:</td>
      </tr>
      <tr>
        <td id="L1876" class="blob-num js-line-number" data-line-number="1876"></td>
        <td id="LC1876" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&quot;_root ignore, returning %s<span class=pl-cce>\n</span>&quot;</span> <span class=pl-c1>%</span>(<span class=pl-s1>file_path_from_root</span>))</td>
      </tr>
      <tr>
        <td id="L1877" class="blob-num js-line-number" data-line-number="1877"></td>
        <td id="LC1877" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1878" class="blob-num js-line-number" data-line-number="1878"></td>
        <td id="LC1878" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   --root=FAKE_DIR is ignored</span></td>
      </tr>
      <tr>
        <td id="L1879" class="blob-num js-line-number" data-line-number="1879"></td>
        <td id="LC1879" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>file_path_from_root</span></td>
      </tr>
      <tr>
        <td id="L1880" class="blob-num js-line-number" data-line-number="1880"></td>
        <td id="LC1880" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1881" class="blob-num js-line-number" data-line-number="1881"></td>
        <td id="LC1881" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>file_path_from_root</span> <span class=pl-c1>=</span> <span class=pl-v>FixupPathFromRoot</span>()</td>
      </tr>
      <tr>
        <td id="L1882" class="blob-num js-line-number" data-line-number="1882"></td>
        <td id="LC1882" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>re</span>.<span class=pl-en>sub</span>(<span class=pl-s>r&#39;[^a-zA-Z0-9]&#39;</span>, <span class=pl-s>&#39;_&#39;</span>, <span class=pl-s1>file_path_from_root</span>).<span class=pl-en>upper</span>() <span class=pl-c1>+</span> <span class=pl-s>&#39;_&#39;</span></td>
      </tr>
      <tr>
        <td id="L1883" class="blob-num js-line-number" data-line-number="1883"></td>
        <td id="LC1883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1884" class="blob-num js-line-number" data-line-number="1884"></td>
        <td id="LC1884" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1885" class="blob-num js-line-number" data-line-number="1885"></td>
        <td id="LC1885" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForHeaderGuard</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L1886" class="blob-num js-line-number" data-line-number="1886"></td>
        <td id="LC1886" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks that the file contains a header guard.</span></td>
      </tr>
      <tr>
        <td id="L1887" class="blob-num js-line-number" data-line-number="1887"></td>
        <td id="LC1887" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1888" class="blob-num js-line-number" data-line-number="1888"></td>
        <td id="LC1888" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Logs an error if no #ifndef header guard is present.  For other</span></td>
      </tr>
      <tr>
        <td id="L1889" class="blob-num js-line-number" data-line-number="1889"></td>
        <td id="LC1889" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  headers, checks that the full pathname is used.</span></td>
      </tr>
      <tr>
        <td id="L1890" class="blob-num js-line-number" data-line-number="1890"></td>
        <td id="LC1890" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L1891" class="blob-num js-line-number" data-line-number="1891"></td>
        <td id="LC1891" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L1892" class="blob-num js-line-number" data-line-number="1892"></td>
        <td id="LC1892" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the C++ header file.</span></td>
      </tr>
      <tr>
        <td id="L1893" class="blob-num js-line-number" data-line-number="1893"></td>
        <td id="LC1893" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L1894" class="blob-num js-line-number" data-line-number="1894"></td>
        <td id="LC1894" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L1895" class="blob-num js-line-number" data-line-number="1895"></td>
        <td id="LC1895" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1896" class="blob-num js-line-number" data-line-number="1896"></td>
        <td id="LC1896" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1897" class="blob-num js-line-number" data-line-number="1897"></td>
        <td id="LC1897" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t check for header guards if there are error suppression</span></td>
      </tr>
      <tr>
        <td id="L1898" class="blob-num js-line-number" data-line-number="1898"></td>
        <td id="LC1898" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># comments somewhere in this file.</span></td>
      </tr>
      <tr>
        <td id="L1899" class="blob-num js-line-number" data-line-number="1899"></td>
        <td id="LC1899" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L1900" class="blob-num js-line-number" data-line-number="1900"></td>
        <td id="LC1900" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Because this is silencing a warning for a nonexistent line, we</span></td>
      </tr>
      <tr>
        <td id="L1901" class="blob-num js-line-number" data-line-number="1901"></td>
        <td id="LC1901" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># only support the very specific NOLINT(build/header_guard) syntax,</span></td>
      </tr>
      <tr>
        <td id="L1902" class="blob-num js-line-number" data-line-number="1902"></td>
        <td id="LC1902" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># and not the general NOLINT or NOLINT(*) syntax.</span></td>
      </tr>
      <tr>
        <td id="L1903" class="blob-num js-line-number" data-line-number="1903"></td>
        <td id="LC1903" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>raw_lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines_without_raw_strings</span></td>
      </tr>
      <tr>
        <td id="L1904" class="blob-num js-line-number" data-line-number="1904"></td>
        <td id="LC1904" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-s1>raw_lines</span>:</td>
      </tr>
      <tr>
        <td id="L1905" class="blob-num js-line-number" data-line-number="1905"></td>
        <td id="LC1905" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;//\s*NOLINT\(build/header_guard\)&#39;</span>, <span class=pl-s1>i</span>):</td>
      </tr>
      <tr>
        <td id="L1906" class="blob-num js-line-number" data-line-number="1906"></td>
        <td id="LC1906" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1907" class="blob-num js-line-number" data-line-number="1907"></td>
        <td id="LC1907" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1908" class="blob-num js-line-number" data-line-number="1908"></td>
        <td id="LC1908" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>cppvar</span> <span class=pl-c1>=</span> <span class=pl-v>GetHeaderGuardCPPVariable</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L1909" class="blob-num js-line-number" data-line-number="1909"></td>
        <td id="LC1909" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1910" class="blob-num js-line-number" data-line-number="1910"></td>
        <td id="LC1910" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>ifndef</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1911" class="blob-num js-line-number" data-line-number="1911"></td>
        <td id="LC1911" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>ifndef_linenum</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1912" class="blob-num js-line-number" data-line-number="1912"></td>
        <td id="LC1912" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>define</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1913" class="blob-num js-line-number" data-line-number="1913"></td>
        <td id="LC1913" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>endif</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L1914" class="blob-num js-line-number" data-line-number="1914"></td>
        <td id="LC1914" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>endif_linenum</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1915" class="blob-num js-line-number" data-line-number="1915"></td>
        <td id="LC1915" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>linenum</span>, <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-en>enumerate</span>(<span class=pl-s1>raw_lines</span>):</td>
      </tr>
      <tr>
        <td id="L1916" class="blob-num js-line-number" data-line-number="1916"></td>
        <td id="LC1916" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>linesplit</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>split</span>()</td>
      </tr>
      <tr>
        <td id="L1917" class="blob-num js-line-number" data-line-number="1917"></td>
        <td id="LC1917" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>linesplit</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>2</span>:</td>
      </tr>
      <tr>
        <td id="L1918" class="blob-num js-line-number" data-line-number="1918"></td>
        <td id="LC1918" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># find the first occurrence of #ifndef and #define, save arg</span></td>
      </tr>
      <tr>
        <td id="L1919" class="blob-num js-line-number" data-line-number="1919"></td>
        <td id="LC1919" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>ifndef</span> <span class=pl-c1>and</span> <span class=pl-s1>linesplit</span>[<span class=pl-c1>0</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;#ifndef&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1920" class="blob-num js-line-number" data-line-number="1920"></td>
        <td id="LC1920" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># set ifndef to the header guard presented on the #ifndef line.</span></td>
      </tr>
      <tr>
        <td id="L1921" class="blob-num js-line-number" data-line-number="1921"></td>
        <td id="LC1921" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>ifndef</span> <span class=pl-c1>=</span> <span class=pl-s1>linesplit</span>[<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L1922" class="blob-num js-line-number" data-line-number="1922"></td>
        <td id="LC1922" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>ifndef_linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span></td>
      </tr>
      <tr>
        <td id="L1923" class="blob-num js-line-number" data-line-number="1923"></td>
        <td id="LC1923" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>define</span> <span class=pl-c1>and</span> <span class=pl-s1>linesplit</span>[<span class=pl-c1>0</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;#define&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1924" class="blob-num js-line-number" data-line-number="1924"></td>
        <td id="LC1924" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>define</span> <span class=pl-c1>=</span> <span class=pl-s1>linesplit</span>[<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L1925" class="blob-num js-line-number" data-line-number="1925"></td>
        <td id="LC1925" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># find the last occurrence of #endif, save entire line</span></td>
      </tr>
      <tr>
        <td id="L1926" class="blob-num js-line-number" data-line-number="1926"></td>
        <td id="LC1926" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>line</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;#endif&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L1927" class="blob-num js-line-number" data-line-number="1927"></td>
        <td id="LC1927" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>endif</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span></td>
      </tr>
      <tr>
        <td id="L1928" class="blob-num js-line-number" data-line-number="1928"></td>
        <td id="LC1928" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>endif_linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span></td>
      </tr>
      <tr>
        <td id="L1929" class="blob-num js-line-number" data-line-number="1929"></td>
        <td id="LC1929" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1930" class="blob-num js-line-number" data-line-number="1930"></td>
        <td id="LC1930" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>ifndef</span> <span class=pl-c1>or</span> <span class=pl-c1>not</span> <span class=pl-s1>define</span> <span class=pl-c1>or</span> <span class=pl-s1>ifndef</span> <span class=pl-c1>!=</span> <span class=pl-s1>define</span>:</td>
      </tr>
      <tr>
        <td id="L1931" class="blob-num js-line-number" data-line-number="1931"></td>
        <td id="LC1931" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-c1>0</span>, <span class=pl-s>&#39;build/header_guard&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L1932" class="blob-num js-line-number" data-line-number="1932"></td>
        <td id="LC1932" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;No #ifndef header guard found, suggested CPP variable is: %s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L1933" class="blob-num js-line-number" data-line-number="1933"></td>
        <td id="LC1933" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>cppvar</span>)</td>
      </tr>
      <tr>
        <td id="L1934" class="blob-num js-line-number" data-line-number="1934"></td>
        <td id="LC1934" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1935" class="blob-num js-line-number" data-line-number="1935"></td>
        <td id="LC1935" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1936" class="blob-num js-line-number" data-line-number="1936"></td>
        <td id="LC1936" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The guard should be PATH_FILE_H_, but we also allow PATH_FILE_H__</span></td>
      </tr>
      <tr>
        <td id="L1937" class="blob-num js-line-number" data-line-number="1937"></td>
        <td id="LC1937" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># for backward compatibility.</span></td>
      </tr>
      <tr>
        <td id="L1938" class="blob-num js-line-number" data-line-number="1938"></td>
        <td id="LC1938" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>ifndef</span> <span class=pl-c1>!=</span> <span class=pl-s1>cppvar</span>:</td>
      </tr>
      <tr>
        <td id="L1939" class="blob-num js-line-number" data-line-number="1939"></td>
        <td id="LC1939" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>error_level</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1940" class="blob-num js-line-number" data-line-number="1940"></td>
        <td id="LC1940" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>ifndef</span> <span class=pl-c1>!=</span> <span class=pl-s1>cppvar</span> <span class=pl-c1>+</span> <span class=pl-s>&#39;_&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1941" class="blob-num js-line-number" data-line-number="1941"></td>
        <td id="LC1941" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>error_level</span> <span class=pl-c1>=</span> <span class=pl-c1>5</span></td>
      </tr>
      <tr>
        <td id="L1942" class="blob-num js-line-number" data-line-number="1942"></td>
        <td id="LC1942" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1943" class="blob-num js-line-number" data-line-number="1943"></td>
        <td id="LC1943" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines</span>[<span class=pl-s1>ifndef_linenum</span>], <span class=pl-s1>ifndef_linenum</span>,</td>
      </tr>
      <tr>
        <td id="L1944" class="blob-num js-line-number" data-line-number="1944"></td>
        <td id="LC1944" class="blob-code blob-code-inner js-file-line">                            <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L1945" class="blob-num js-line-number" data-line-number="1945"></td>
        <td id="LC1945" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>ifndef_linenum</span>, <span class=pl-s>&#39;build/header_guard&#39;</span>, <span class=pl-s1>error_level</span>,</td>
      </tr>
      <tr>
        <td id="L1946" class="blob-num js-line-number" data-line-number="1946"></td>
        <td id="LC1946" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;#ifndef header guard has wrong style, please use: %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>)</td>
      </tr>
      <tr>
        <td id="L1947" class="blob-num js-line-number" data-line-number="1947"></td>
        <td id="LC1947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1948" class="blob-num js-line-number" data-line-number="1948"></td>
        <td id="LC1948" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for &quot;//&quot; comments on endif line.</span></td>
      </tr>
      <tr>
        <td id="L1949" class="blob-num js-line-number" data-line-number="1949"></td>
        <td id="LC1949" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines</span>[<span class=pl-s1>endif_linenum</span>], <span class=pl-s1>endif_linenum</span>,</td>
      </tr>
      <tr>
        <td id="L1950" class="blob-num js-line-number" data-line-number="1950"></td>
        <td id="LC1950" class="blob-code blob-code-inner js-file-line">                          <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L1951" class="blob-num js-line-number" data-line-number="1951"></td>
        <td id="LC1951" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;#endif\s*//\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>cppvar</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;(_)?\b&#39;</span>, <span class=pl-s1>endif</span>)</td>
      </tr>
      <tr>
        <td id="L1952" class="blob-num js-line-number" data-line-number="1952"></td>
        <td id="LC1952" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L1953" class="blob-num js-line-number" data-line-number="1953"></td>
        <td id="LC1953" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;_&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1954" class="blob-num js-line-number" data-line-number="1954"></td>
        <td id="LC1954" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Issue low severity warning for deprecated double trailing underscore</span></td>
      </tr>
      <tr>
        <td id="L1955" class="blob-num js-line-number" data-line-number="1955"></td>
        <td id="LC1955" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>endif_linenum</span>, <span class=pl-s>&#39;build/header_guard&#39;</span>, <span class=pl-c1>0</span>,</td>
      </tr>
      <tr>
        <td id="L1956" class="blob-num js-line-number" data-line-number="1956"></td>
        <td id="LC1956" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;#endif line should be &quot;#endif  // %s&quot;&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>)</td>
      </tr>
      <tr>
        <td id="L1957" class="blob-num js-line-number" data-line-number="1957"></td>
        <td id="LC1957" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1958" class="blob-num js-line-number" data-line-number="1958"></td>
        <td id="LC1958" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1959" class="blob-num js-line-number" data-line-number="1959"></td>
        <td id="LC1959" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Didn&#39;t find the corresponding &quot;//&quot; comment.  If this file does not</span></td>
      </tr>
      <tr>
        <td id="L1960" class="blob-num js-line-number" data-line-number="1960"></td>
        <td id="LC1960" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># contain any &quot;//&quot; comments at all, it could be that the compiler</span></td>
      </tr>
      <tr>
        <td id="L1961" class="blob-num js-line-number" data-line-number="1961"></td>
        <td id="LC1961" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># only wants &quot;/**/&quot; comments, look for those instead.</span></td>
      </tr>
      <tr>
        <td id="L1962" class="blob-num js-line-number" data-line-number="1962"></td>
        <td id="LC1962" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>no_single_line_comments</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L1963" class="blob-num js-line-number" data-line-number="1963"></td>
        <td id="LC1963" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-c1>1</span>, <span class=pl-en>len</span>(<span class=pl-s1>raw_lines</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L1964" class="blob-num js-line-number" data-line-number="1964"></td>
        <td id="LC1964" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw_lines</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L1965" class="blob-num js-line-number" data-line-number="1965"></td>
        <td id="LC1965" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(?:(?:\&#39;(?:\.|[^\&#39;])*\&#39;)|(?:&quot;(?:\.|[^&quot;])*&quot;)|[^\&#39;&quot;])*//&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L1966" class="blob-num js-line-number" data-line-number="1966"></td>
        <td id="LC1966" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>no_single_line_comments</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L1967" class="blob-num js-line-number" data-line-number="1967"></td>
        <td id="LC1967" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L1968" class="blob-num js-line-number" data-line-number="1968"></td>
        <td id="LC1968" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1969" class="blob-num js-line-number" data-line-number="1969"></td>
        <td id="LC1969" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>no_single_line_comments</span>:</td>
      </tr>
      <tr>
        <td id="L1970" class="blob-num js-line-number" data-line-number="1970"></td>
        <td id="LC1970" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;#endif\s*/\*\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>cppvar</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;(_)?\s*\*/&#39;</span>, <span class=pl-s1>endif</span>)</td>
      </tr>
      <tr>
        <td id="L1971" class="blob-num js-line-number" data-line-number="1971"></td>
        <td id="LC1971" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L1972" class="blob-num js-line-number" data-line-number="1972"></td>
        <td id="LC1972" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;_&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L1973" class="blob-num js-line-number" data-line-number="1973"></td>
        <td id="LC1973" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Low severity warning for double trailing underscore</span></td>
      </tr>
      <tr>
        <td id="L1974" class="blob-num js-line-number" data-line-number="1974"></td>
        <td id="LC1974" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>endif_linenum</span>, <span class=pl-s>&#39;build/header_guard&#39;</span>, <span class=pl-c1>0</span>,</td>
      </tr>
      <tr>
        <td id="L1975" class="blob-num js-line-number" data-line-number="1975"></td>
        <td id="LC1975" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;#endif line should be &quot;#endif  /* %s */&quot;&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>)</td>
      </tr>
      <tr>
        <td id="L1976" class="blob-num js-line-number" data-line-number="1976"></td>
        <td id="LC1976" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1977" class="blob-num js-line-number" data-line-number="1977"></td>
        <td id="LC1977" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1978" class="blob-num js-line-number" data-line-number="1978"></td>
        <td id="LC1978" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Didn&#39;t find anything</span></td>
      </tr>
      <tr>
        <td id="L1979" class="blob-num js-line-number" data-line-number="1979"></td>
        <td id="LC1979" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>endif_linenum</span>, <span class=pl-s>&#39;build/header_guard&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L1980" class="blob-num js-line-number" data-line-number="1980"></td>
        <td id="LC1980" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>&#39;#endif line should be &quot;#endif  // %s&quot;&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>)</td>
      </tr>
      <tr>
        <td id="L1981" class="blob-num js-line-number" data-line-number="1981"></td>
        <td id="LC1981" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1982" class="blob-num js-line-number" data-line-number="1982"></td>
        <td id="LC1982" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1983" class="blob-num js-line-number" data-line-number="1983"></td>
        <td id="LC1983" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckHeaderFileIncluded</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L1984" class="blob-num js-line-number" data-line-number="1984"></td>
        <td id="LC1984" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs an error if a .cc file does not include its header.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L1985" class="blob-num js-line-number" data-line-number="1985"></td>
        <td id="LC1985" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1986" class="blob-num js-line-number" data-line-number="1986"></td>
        <td id="LC1986" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Do not check test files</span></td>
      </tr>
      <tr>
        <td id="L1987" class="blob-num js-line-number" data-line-number="1987"></td>
        <td id="LC1987" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fileinfo</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L1988" class="blob-num js-line-number" data-line-number="1988"></td>
        <td id="LC1988" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s1>_TEST_FILE_SUFFIX</span>, <span class=pl-s1>fileinfo</span>.<span class=pl-v>BaseName</span>()):</td>
      </tr>
      <tr>
        <td id="L1989" class="blob-num js-line-number" data-line-number="1989"></td>
        <td id="LC1989" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1990" class="blob-num js-line-number" data-line-number="1990"></td>
        <td id="LC1990" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1991" class="blob-num js-line-number" data-line-number="1991"></td>
        <td id="LC1991" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>headerfile</span> <span class=pl-c1>=</span> <span class=pl-s1>filename</span>[<span class=pl-c1>0</span>:<span class=pl-en>len</span>(<span class=pl-s1>filename</span>) <span class=pl-c1>-</span> <span class=pl-en>len</span>(<span class=pl-s1>fileinfo</span>.<span class=pl-v>Extension</span>())] <span class=pl-c1>+</span> <span class=pl-s>&#39;.h&#39;</span></td>
      </tr>
      <tr>
        <td id="L1992" class="blob-num js-line-number" data-line-number="1992"></td>
        <td id="LC1992" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>exists</span>(<span class=pl-s1>headerfile</span>):</td>
      </tr>
      <tr>
        <td id="L1993" class="blob-num js-line-number" data-line-number="1993"></td>
        <td id="LC1993" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L1994" class="blob-num js-line-number" data-line-number="1994"></td>
        <td id="LC1994" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>headername</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>headerfile</span>).<span class=pl-v>RepositoryName</span>()</td>
      </tr>
      <tr>
        <td id="L1995" class="blob-num js-line-number" data-line-number="1995"></td>
        <td id="LC1995" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>first_include</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L1996" class="blob-num js-line-number" data-line-number="1996"></td>
        <td id="LC1996" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>section_list</span> <span class=pl-c1>in</span> <span class=pl-s1>include_state</span>.<span class=pl-s1>include_list</span>:</td>
      </tr>
      <tr>
        <td id="L1997" class="blob-num js-line-number" data-line-number="1997"></td>
        <td id="LC1997" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>f</span> <span class=pl-c1>in</span> <span class=pl-s1>section_list</span>:</td>
      </tr>
      <tr>
        <td id="L1998" class="blob-num js-line-number" data-line-number="1998"></td>
        <td id="LC1998" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>headername</span> <span class=pl-c1>in</span> <span class=pl-s1>f</span>[<span class=pl-c1>0</span>] <span class=pl-c1>or</span> <span class=pl-s1>f</span>[<span class=pl-c1>0</span>] <span class=pl-c1>in</span> <span class=pl-s1>headername</span>:</td>
      </tr>
      <tr>
        <td id="L1999" class="blob-num js-line-number" data-line-number="1999"></td>
        <td id="LC1999" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L2000" class="blob-num js-line-number" data-line-number="2000"></td>
        <td id="LC2000" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>first_include</span>:</td>
      </tr>
      <tr>
        <td id="L2001" class="blob-num js-line-number" data-line-number="2001"></td>
        <td id="LC2001" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>first_include</span> <span class=pl-c1>=</span> <span class=pl-s1>f</span>[<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2002" class="blob-num js-line-number" data-line-number="2002"></td>
        <td id="LC2002" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2003" class="blob-num js-line-number" data-line-number="2003"></td>
        <td id="LC2003" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>first_include</span>, <span class=pl-s>&#39;build/include&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2004" class="blob-num js-line-number" data-line-number="2004"></td>
        <td id="LC2004" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>&#39;%s should include its header file %s&#39;</span> <span class=pl-c1>%</span> (<span class=pl-s1>fileinfo</span>.<span class=pl-v>RepositoryName</span>(),</td>
      </tr>
      <tr>
        <td id="L2005" class="blob-num js-line-number" data-line-number="2005"></td>
        <td id="LC2005" class="blob-code blob-code-inner js-file-line">                                                  <span class=pl-s1>headername</span>))</td>
      </tr>
      <tr>
        <td id="L2006" class="blob-num js-line-number" data-line-number="2006"></td>
        <td id="LC2006" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2007" class="blob-num js-line-number" data-line-number="2007"></td>
        <td id="LC2007" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2008" class="blob-num js-line-number" data-line-number="2008"></td>
        <td id="LC2008" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForBadCharacters</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2009" class="blob-num js-line-number" data-line-number="2009"></td>
        <td id="LC2009" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs an error for each line containing bad characters.</span></td>
      </tr>
      <tr>
        <td id="L2010" class="blob-num js-line-number" data-line-number="2010"></td>
        <td id="LC2010" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2011" class="blob-num js-line-number" data-line-number="2011"></td>
        <td id="LC2011" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Two kinds of bad characters:</span></td>
      </tr>
      <tr>
        <td id="L2012" class="blob-num js-line-number" data-line-number="2012"></td>
        <td id="LC2012" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2013" class="blob-num js-line-number" data-line-number="2013"></td>
        <td id="LC2013" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  1. Unicode replacement characters: These indicate that either the file</span></td>
      </tr>
      <tr>
        <td id="L2014" class="blob-num js-line-number" data-line-number="2014"></td>
        <td id="LC2014" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  contained invalid UTF-8 (likely) or Unicode replacement characters (which</span></td>
      </tr>
      <tr>
        <td id="L2015" class="blob-num js-line-number" data-line-number="2015"></td>
        <td id="LC2015" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  it shouldn&#39;t).  Note that it&#39;s possible for this to throw off line</span></td>
      </tr>
      <tr>
        <td id="L2016" class="blob-num js-line-number" data-line-number="2016"></td>
        <td id="LC2016" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  numbering if the invalid UTF-8 occurred adjacent to a newline.</span></td>
      </tr>
      <tr>
        <td id="L2017" class="blob-num js-line-number" data-line-number="2017"></td>
        <td id="LC2017" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2018" class="blob-num js-line-number" data-line-number="2018"></td>
        <td id="LC2018" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  2. NUL bytes.  These are problematic for some tools.</span></td>
      </tr>
      <tr>
        <td id="L2019" class="blob-num js-line-number" data-line-number="2019"></td>
        <td id="LC2019" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2020" class="blob-num js-line-number" data-line-number="2020"></td>
        <td id="LC2020" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2021" class="blob-num js-line-number" data-line-number="2021"></td>
        <td id="LC2021" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2022" class="blob-num js-line-number" data-line-number="2022"></td>
        <td id="LC2022" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    lines: An array of strings, each representing a line of the file.</span></td>
      </tr>
      <tr>
        <td id="L2023" class="blob-num js-line-number" data-line-number="2023"></td>
        <td id="LC2023" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2024" class="blob-num js-line-number" data-line-number="2024"></td>
        <td id="LC2024" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2025" class="blob-num js-line-number" data-line-number="2025"></td>
        <td id="LC2025" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>linenum</span>, <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-en>enumerate</span>(<span class=pl-s1>lines</span>):</td>
      </tr>
      <tr>
        <td id="L2026" class="blob-num js-line-number" data-line-number="2026"></td>
        <td id="LC2026" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s>u&#39;<span class=pl-cce>\ufffd</span>&#39;</span> <span class=pl-c1>in</span> <span class=pl-s1>line</span>:</td>
      </tr>
      <tr>
        <td id="L2027" class="blob-num js-line-number" data-line-number="2027"></td>
        <td id="LC2027" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/utf8&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2028" class="blob-num js-line-number" data-line-number="2028"></td>
        <td id="LC2028" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Line contains invalid UTF-8 (or Unicode replacement character).&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2029" class="blob-num js-line-number" data-line-number="2029"></td>
        <td id="LC2029" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s>&#39;\0&#39;</span> <span class=pl-c1>in</span> <span class=pl-s1>line</span>:</td>
      </tr>
      <tr>
        <td id="L2030" class="blob-num js-line-number" data-line-number="2030"></td>
        <td id="LC2030" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/nul&#39;</span>, <span class=pl-c1>5</span>, <span class=pl-s>&#39;Line contains NUL byte.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2031" class="blob-num js-line-number" data-line-number="2031"></td>
        <td id="LC2031" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2032" class="blob-num js-line-number" data-line-number="2032"></td>
        <td id="LC2032" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2033" class="blob-num js-line-number" data-line-number="2033"></td>
        <td id="LC2033" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForNewlineAtEOF</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2034" class="blob-num js-line-number" data-line-number="2034"></td>
        <td id="LC2034" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs an error if there is no newline char at the end of the file.</span></td>
      </tr>
      <tr>
        <td id="L2035" class="blob-num js-line-number" data-line-number="2035"></td>
        <td id="LC2035" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2036" class="blob-num js-line-number" data-line-number="2036"></td>
        <td id="LC2036" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2037" class="blob-num js-line-number" data-line-number="2037"></td>
        <td id="LC2037" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2038" class="blob-num js-line-number" data-line-number="2038"></td>
        <td id="LC2038" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    lines: An array of strings, each representing a line of the file.</span></td>
      </tr>
      <tr>
        <td id="L2039" class="blob-num js-line-number" data-line-number="2039"></td>
        <td id="LC2039" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2040" class="blob-num js-line-number" data-line-number="2040"></td>
        <td id="LC2040" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2041" class="blob-num js-line-number" data-line-number="2041"></td>
        <td id="LC2041" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2042" class="blob-num js-line-number" data-line-number="2042"></td>
        <td id="LC2042" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The array lines() was created by adding two newlines to the</span></td>
      </tr>
      <tr>
        <td id="L2043" class="blob-num js-line-number" data-line-number="2043"></td>
        <td id="LC2043" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># original file (go figure), then splitting on \n.</span></td>
      </tr>
      <tr>
        <td id="L2044" class="blob-num js-line-number" data-line-number="2044"></td>
        <td id="LC2044" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># To verify that the file ends in \n, we just have to make sure the</span></td>
      </tr>
      <tr>
        <td id="L2045" class="blob-num js-line-number" data-line-number="2045"></td>
        <td id="LC2045" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># last-but-two element of lines() exists and is empty.</span></td>
      </tr>
      <tr>
        <td id="L2046" class="blob-num js-line-number" data-line-number="2046"></td>
        <td id="LC2046" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>lines</span>) <span class=pl-c1>&lt;</span> <span class=pl-c1>3</span> <span class=pl-c1>or</span> <span class=pl-s1>lines</span>[<span class=pl-c1>-</span><span class=pl-c1>2</span>]:</td>
      </tr>
      <tr>
        <td id="L2047" class="blob-num js-line-number" data-line-number="2047"></td>
        <td id="LC2047" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-en>len</span>(<span class=pl-s1>lines</span>) <span class=pl-c1>-</span> <span class=pl-c1>2</span>, <span class=pl-s>&#39;whitespace/ending_newline&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2048" class="blob-num js-line-number" data-line-number="2048"></td>
        <td id="LC2048" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Could not find a newline character at the end of the file.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2049" class="blob-num js-line-number" data-line-number="2049"></td>
        <td id="LC2049" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2050" class="blob-num js-line-number" data-line-number="2050"></td>
        <td id="LC2050" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2051" class="blob-num js-line-number" data-line-number="2051"></td>
        <td id="LC2051" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForMultilineCommentsAndStrings</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2052" class="blob-num js-line-number" data-line-number="2052"></td>
        <td id="LC2052" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Logs an error if we see /* ... */ or &quot;...&quot; that extend past one line.</span></td>
      </tr>
      <tr>
        <td id="L2053" class="blob-num js-line-number" data-line-number="2053"></td>
        <td id="LC2053" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2054" class="blob-num js-line-number" data-line-number="2054"></td>
        <td id="LC2054" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  /* ... */ comments are legit inside macros, for one line.</span></td>
      </tr>
      <tr>
        <td id="L2055" class="blob-num js-line-number" data-line-number="2055"></td>
        <td id="LC2055" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Otherwise, we prefer // comments, so it&#39;s ok to warn about the</span></td>
      </tr>
      <tr>
        <td id="L2056" class="blob-num js-line-number" data-line-number="2056"></td>
        <td id="LC2056" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  other.  Likewise, it&#39;s ok for strings to extend across multiple</span></td>
      </tr>
      <tr>
        <td id="L2057" class="blob-num js-line-number" data-line-number="2057"></td>
        <td id="LC2057" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  lines, as long as a line continuation character (backslash)</span></td>
      </tr>
      <tr>
        <td id="L2058" class="blob-num js-line-number" data-line-number="2058"></td>
        <td id="LC2058" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  terminates each line. Although not currently prohibited by the C++</span></td>
      </tr>
      <tr>
        <td id="L2059" class="blob-num js-line-number" data-line-number="2059"></td>
        <td id="LC2059" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  style guide, it&#39;s ugly and unnecessary. We don&#39;t do well with either</span></td>
      </tr>
      <tr>
        <td id="L2060" class="blob-num js-line-number" data-line-number="2060"></td>
        <td id="LC2060" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  in this lint program, so we warn about both.</span></td>
      </tr>
      <tr>
        <td id="L2061" class="blob-num js-line-number" data-line-number="2061"></td>
        <td id="LC2061" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2062" class="blob-num js-line-number" data-line-number="2062"></td>
        <td id="LC2062" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2063" class="blob-num js-line-number" data-line-number="2063"></td>
        <td id="LC2063" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2064" class="blob-num js-line-number" data-line-number="2064"></td>
        <td id="LC2064" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2065" class="blob-num js-line-number" data-line-number="2065"></td>
        <td id="LC2065" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2066" class="blob-num js-line-number" data-line-number="2066"></td>
        <td id="LC2066" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2067" class="blob-num js-line-number" data-line-number="2067"></td>
        <td id="LC2067" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2068" class="blob-num js-line-number" data-line-number="2068"></td>
        <td id="LC2068" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2069" class="blob-num js-line-number" data-line-number="2069"></td>
        <td id="LC2069" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2070" class="blob-num js-line-number" data-line-number="2070"></td>
        <td id="LC2070" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Remove all \\ (escaped backslashes) from the line. They are OK, and the</span></td>
      </tr>
      <tr>
        <td id="L2071" class="blob-num js-line-number" data-line-number="2071"></td>
        <td id="LC2071" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># second (escaped) slash may trigger later \&quot; detection erroneously.</span></td>
      </tr>
      <tr>
        <td id="L2072" class="blob-num js-line-number" data-line-number="2072"></td>
        <td id="LC2072" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;<span class=pl-cce>\\</span><span class=pl-cce>\\</span>&#39;</span>, <span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2073" class="blob-num js-line-number" data-line-number="2073"></td>
        <td id="LC2073" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2074" class="blob-num js-line-number" data-line-number="2074"></td>
        <td id="LC2074" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;/*&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;*/&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L2075" class="blob-num js-line-number" data-line-number="2075"></td>
        <td id="LC2075" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/multiline_comment&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2076" class="blob-num js-line-number" data-line-number="2076"></td>
        <td id="LC2076" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Complex multi-line /*...*/-style comment found. &#39;</span></td>
      </tr>
      <tr>
        <td id="L2077" class="blob-num js-line-number" data-line-number="2077"></td>
        <td id="LC2077" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Lint may give bogus warnings.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L2078" class="blob-num js-line-number" data-line-number="2078"></td>
        <td id="LC2078" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Consider replacing these with //-style comments, &#39;</span></td>
      </tr>
      <tr>
        <td id="L2079" class="blob-num js-line-number" data-line-number="2079"></td>
        <td id="LC2079" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;with #if 0...#endif, &#39;</span></td>
      </tr>
      <tr>
        <td id="L2080" class="blob-num js-line-number" data-line-number="2080"></td>
        <td id="LC2080" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;or with more clearly structured multi-line comments.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2081" class="blob-num js-line-number" data-line-number="2081"></td>
        <td id="LC2081" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2082" class="blob-num js-line-number" data-line-number="2082"></td>
        <td id="LC2082" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;&quot;&#39;</span>) <span class=pl-c1>-</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;<span class=pl-cce>\\</span>&quot;&#39;</span>)) <span class=pl-c1>%</span> <span class=pl-c1>2</span>:</td>
      </tr>
      <tr>
        <td id="L2083" class="blob-num js-line-number" data-line-number="2083"></td>
        <td id="LC2083" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/multiline_string&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2084" class="blob-num js-line-number" data-line-number="2084"></td>
        <td id="LC2084" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Multi-line string (&quot;...&quot;) found.  This lint script doesn<span class=pl-cce>\&#39;</span>t &#39;</span></td>
      </tr>
      <tr>
        <td id="L2085" class="blob-num js-line-number" data-line-number="2085"></td>
        <td id="LC2085" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;do well with such strings, and may give bogus warnings.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L2086" class="blob-num js-line-number" data-line-number="2086"></td>
        <td id="LC2086" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Use C++11 raw strings or concatenation instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2087" class="blob-num js-line-number" data-line-number="2087"></td>
        <td id="LC2087" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2088" class="blob-num js-line-number" data-line-number="2088"></td>
        <td id="LC2088" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2089" class="blob-num js-line-number" data-line-number="2089"></td>
        <td id="LC2089" class="blob-code blob-code-inner js-file-line"><span class=pl-c># (non-threadsafe name, thread-safe alternative, validation pattern)</span></td>
      </tr>
      <tr>
        <td id="L2090" class="blob-num js-line-number" data-line-number="2090"></td>
        <td id="LC2090" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2091" class="blob-num js-line-number" data-line-number="2091"></td>
        <td id="LC2091" class="blob-code blob-code-inner js-file-line"><span class=pl-c># The validation pattern is used to eliminate false positives such as:</span></td>
      </tr>
      <tr>
        <td id="L2092" class="blob-num js-line-number" data-line-number="2092"></td>
        <td id="LC2092" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  _rand();               // false positive due to substring match.</span></td>
      </tr>
      <tr>
        <td id="L2093" class="blob-num js-line-number" data-line-number="2093"></td>
        <td id="LC2093" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  -&gt;rand();              // some member function rand().</span></td>
      </tr>
      <tr>
        <td id="L2094" class="blob-num js-line-number" data-line-number="2094"></td>
        <td id="LC2094" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  ACMRandom rand(seed);  // some variable named rand.</span></td>
      </tr>
      <tr>
        <td id="L2095" class="blob-num js-line-number" data-line-number="2095"></td>
        <td id="LC2095" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  ISAACRandom rand();    // another variable named rand.</span></td>
      </tr>
      <tr>
        <td id="L2096" class="blob-num js-line-number" data-line-number="2096"></td>
        <td id="LC2096" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2097" class="blob-num js-line-number" data-line-number="2097"></td>
        <td id="LC2097" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Basically we require the return value of these functions to be used</span></td>
      </tr>
      <tr>
        <td id="L2098" class="blob-num js-line-number" data-line-number="2098"></td>
        <td id="LC2098" class="blob-code blob-code-inner js-file-line"><span class=pl-c># in some expression context on the same line by matching on some</span></td>
      </tr>
      <tr>
        <td id="L2099" class="blob-num js-line-number" data-line-number="2099"></td>
        <td id="LC2099" class="blob-code blob-code-inner js-file-line"><span class=pl-c># operator before the function name.  This eliminates constructors and</span></td>
      </tr>
      <tr>
        <td id="L2100" class="blob-num js-line-number" data-line-number="2100"></td>
        <td id="LC2100" class="blob-code blob-code-inner js-file-line"><span class=pl-c># member function calls.</span></td>
      </tr>
      <tr>
        <td id="L2101" class="blob-num js-line-number" data-line-number="2101"></td>
        <td id="LC2101" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;(?:[-+*/=%^&amp;|(&lt;]\s*|&gt;\s+)&#39;</span></td>
      </tr>
      <tr>
        <td id="L2102" class="blob-num js-line-number" data-line-number="2102"></td>
        <td id="LC2102" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_THREADING_LIST</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L2103" class="blob-num js-line-number" data-line-number="2103"></td>
        <td id="LC2103" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;asctime(&#39;</span>, <span class=pl-s>&#39;asctime_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;asctime\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2104" class="blob-num js-line-number" data-line-number="2104"></td>
        <td id="LC2104" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;ctime(&#39;</span>, <span class=pl-s>&#39;ctime_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;ctime\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2105" class="blob-num js-line-number" data-line-number="2105"></td>
        <td id="LC2105" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;getgrgid(&#39;</span>, <span class=pl-s>&#39;getgrgid_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;getgrgid\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2106" class="blob-num js-line-number" data-line-number="2106"></td>
        <td id="LC2106" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;getgrnam(&#39;</span>, <span class=pl-s>&#39;getgrnam_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;getgrnam\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2107" class="blob-num js-line-number" data-line-number="2107"></td>
        <td id="LC2107" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;getlogin(&#39;</span>, <span class=pl-s>&#39;getlogin_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;getlogin\(\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2108" class="blob-num js-line-number" data-line-number="2108"></td>
        <td id="LC2108" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;getpwnam(&#39;</span>, <span class=pl-s>&#39;getpwnam_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;getpwnam\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2109" class="blob-num js-line-number" data-line-number="2109"></td>
        <td id="LC2109" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;getpwuid(&#39;</span>, <span class=pl-s>&#39;getpwuid_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;getpwuid\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2110" class="blob-num js-line-number" data-line-number="2110"></td>
        <td id="LC2110" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;gmtime(&#39;</span>, <span class=pl-s>&#39;gmtime_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;gmtime\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2111" class="blob-num js-line-number" data-line-number="2111"></td>
        <td id="LC2111" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;localtime(&#39;</span>, <span class=pl-s>&#39;localtime_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;localtime\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2112" class="blob-num js-line-number" data-line-number="2112"></td>
        <td id="LC2112" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;rand(&#39;</span>, <span class=pl-s>&#39;rand_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;rand\(\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2113" class="blob-num js-line-number" data-line-number="2113"></td>
        <td id="LC2113" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;strtok(&#39;</span>, <span class=pl-s>&#39;strtok_r(&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2114" class="blob-num js-line-number" data-line-number="2114"></td>
        <td id="LC2114" class="blob-code blob-code-inner js-file-line">     <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;strtok\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2115" class="blob-num js-line-number" data-line-number="2115"></td>
        <td id="LC2115" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;ttyname(&#39;</span>, <span class=pl-s>&#39;ttyname_r(&#39;</span>, <span class=pl-s1>_UNSAFE_FUNC_PREFIX</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;ttyname\([^)]+\)&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2116" class="blob-num js-line-number" data-line-number="2116"></td>
        <td id="LC2116" class="blob-code blob-code-inner js-file-line">    )</td>
      </tr>
      <tr>
        <td id="L2117" class="blob-num js-line-number" data-line-number="2117"></td>
        <td id="LC2117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2118" class="blob-num js-line-number" data-line-number="2118"></td>
        <td id="LC2118" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2119" class="blob-num js-line-number" data-line-number="2119"></td>
        <td id="LC2119" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckPosixThreading</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2120" class="blob-num js-line-number" data-line-number="2120"></td>
        <td id="LC2120" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for calls to thread-unsafe functions.</span></td>
      </tr>
      <tr>
        <td id="L2121" class="blob-num js-line-number" data-line-number="2121"></td>
        <td id="LC2121" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2122" class="blob-num js-line-number" data-line-number="2122"></td>
        <td id="LC2122" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Much code has been originally written without consideration of</span></td>
      </tr>
      <tr>
        <td id="L2123" class="blob-num js-line-number" data-line-number="2123"></td>
        <td id="LC2123" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  multi-threading. Also, engineers are relying on their old experience;</span></td>
      </tr>
      <tr>
        <td id="L2124" class="blob-num js-line-number" data-line-number="2124"></td>
        <td id="LC2124" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  they have learned posix before threading extensions were added. These</span></td>
      </tr>
      <tr>
        <td id="L2125" class="blob-num js-line-number" data-line-number="2125"></td>
        <td id="LC2125" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  tests guide the engineers to use thread-safe functions (when using</span></td>
      </tr>
      <tr>
        <td id="L2126" class="blob-num js-line-number" data-line-number="2126"></td>
        <td id="LC2126" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  posix directly).</span></td>
      </tr>
      <tr>
        <td id="L2127" class="blob-num js-line-number" data-line-number="2127"></td>
        <td id="LC2127" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2128" class="blob-num js-line-number" data-line-number="2128"></td>
        <td id="LC2128" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2129" class="blob-num js-line-number" data-line-number="2129"></td>
        <td id="LC2129" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2130" class="blob-num js-line-number" data-line-number="2130"></td>
        <td id="LC2130" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2131" class="blob-num js-line-number" data-line-number="2131"></td>
        <td id="LC2131" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2132" class="blob-num js-line-number" data-line-number="2132"></td>
        <td id="LC2132" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2133" class="blob-num js-line-number" data-line-number="2133"></td>
        <td id="LC2133" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2134" class="blob-num js-line-number" data-line-number="2134"></td>
        <td id="LC2134" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2135" class="blob-num js-line-number" data-line-number="2135"></td>
        <td id="LC2135" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>single_thread_func</span>, <span class=pl-s1>multithread_safe_func</span>, <span class=pl-s1>pattern</span> <span class=pl-c1>in</span> <span class=pl-s1>_THREADING_LIST</span>:</td>
      </tr>
      <tr>
        <td id="L2136" class="blob-num js-line-number" data-line-number="2136"></td>
        <td id="LC2136" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Additional pattern matching check to confirm that this is the</span></td>
      </tr>
      <tr>
        <td id="L2137" class="blob-num js-line-number" data-line-number="2137"></td>
        <td id="LC2137" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># function we are looking for</span></td>
      </tr>
      <tr>
        <td id="L2138" class="blob-num js-line-number" data-line-number="2138"></td>
        <td id="LC2138" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2139" class="blob-num js-line-number" data-line-number="2139"></td>
        <td id="LC2139" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/threadsafe_fn&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L2140" class="blob-num js-line-number" data-line-number="2140"></td>
        <td id="LC2140" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Consider using &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>multithread_safe_func</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L2141" class="blob-num js-line-number" data-line-number="2141"></td>
        <td id="LC2141" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;...) instead of &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>single_thread_func</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L2142" class="blob-num js-line-number" data-line-number="2142"></td>
        <td id="LC2142" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;...) for improved thread safety.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2143" class="blob-num js-line-number" data-line-number="2143"></td>
        <td id="LC2143" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2144" class="blob-num js-line-number" data-line-number="2144"></td>
        <td id="LC2144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2145" class="blob-num js-line-number" data-line-number="2145"></td>
        <td id="LC2145" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckVlogArguments</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2146" class="blob-num js-line-number" data-line-number="2146"></td>
        <td id="LC2146" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks that VLOG() is only used for defining a logging level.</span></td>
      </tr>
      <tr>
        <td id="L2147" class="blob-num js-line-number" data-line-number="2147"></td>
        <td id="LC2147" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2148" class="blob-num js-line-number" data-line-number="2148"></td>
        <td id="LC2148" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  For example, VLOG(2) is correct. VLOG(INFO), VLOG(WARNING), VLOG(ERROR), and</span></td>
      </tr>
      <tr>
        <td id="L2149" class="blob-num js-line-number" data-line-number="2149"></td>
        <td id="LC2149" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  VLOG(FATAL) are not.</span></td>
      </tr>
      <tr>
        <td id="L2150" class="blob-num js-line-number" data-line-number="2150"></td>
        <td id="LC2150" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2151" class="blob-num js-line-number" data-line-number="2151"></td>
        <td id="LC2151" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2152" class="blob-num js-line-number" data-line-number="2152"></td>
        <td id="LC2152" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2153" class="blob-num js-line-number" data-line-number="2153"></td>
        <td id="LC2153" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2154" class="blob-num js-line-number" data-line-number="2154"></td>
        <td id="LC2154" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2155" class="blob-num js-line-number" data-line-number="2155"></td>
        <td id="LC2155" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2156" class="blob-num js-line-number" data-line-number="2156"></td>
        <td id="LC2156" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2157" class="blob-num js-line-number" data-line-number="2157"></td>
        <td id="LC2157" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2158" class="blob-num js-line-number" data-line-number="2158"></td>
        <td id="LC2158" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bVLOG\((INFO|ERROR|WARNING|DFATAL|FATAL)\)&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2159" class="blob-num js-line-number" data-line-number="2159"></td>
        <td id="LC2159" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/vlog&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2160" class="blob-num js-line-number" data-line-number="2160"></td>
        <td id="LC2160" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;VLOG() should be used with numeric verbosity level.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L2161" class="blob-num js-line-number" data-line-number="2161"></td>
        <td id="LC2161" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Use LOG() if you want symbolic severity levels.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2162" class="blob-num js-line-number" data-line-number="2162"></td>
        <td id="LC2162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2163" class="blob-num js-line-number" data-line-number="2163"></td>
        <td id="LC2163" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Matches invalid increment: *count++, which moves pointer instead of</span></td>
      </tr>
      <tr>
        <td id="L2164" class="blob-num js-line-number" data-line-number="2164"></td>
        <td id="LC2164" class="blob-code blob-code-inner js-file-line"><span class=pl-c># incrementing a value.</span></td>
      </tr>
      <tr>
        <td id="L2165" class="blob-num js-line-number" data-line-number="2165"></td>
        <td id="LC2165" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_INVALID_INCREMENT</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L2166" class="blob-num js-line-number" data-line-number="2166"></td>
        <td id="LC2166" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;^\s*\*\w+(\+\+|--);&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2167" class="blob-num js-line-number" data-line-number="2167"></td>
        <td id="LC2167" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2168" class="blob-num js-line-number" data-line-number="2168"></td>
        <td id="LC2168" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2169" class="blob-num js-line-number" data-line-number="2169"></td>
        <td id="LC2169" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckInvalidIncrement</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2170" class="blob-num js-line-number" data-line-number="2170"></td>
        <td id="LC2170" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for invalid increment *count++.</span></td>
      </tr>
      <tr>
        <td id="L2171" class="blob-num js-line-number" data-line-number="2171"></td>
        <td id="LC2171" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2172" class="blob-num js-line-number" data-line-number="2172"></td>
        <td id="LC2172" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  For example following function:</span></td>
      </tr>
      <tr>
        <td id="L2173" class="blob-num js-line-number" data-line-number="2173"></td>
        <td id="LC2173" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  void increment_counter(int* count) {</span></td>
      </tr>
      <tr>
        <td id="L2174" class="blob-num js-line-number" data-line-number="2174"></td>
        <td id="LC2174" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    *count++;</span></td>
      </tr>
      <tr>
        <td id="L2175" class="blob-num js-line-number" data-line-number="2175"></td>
        <td id="LC2175" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  }</span></td>
      </tr>
      <tr>
        <td id="L2176" class="blob-num js-line-number" data-line-number="2176"></td>
        <td id="LC2176" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  is invalid, because it effectively does count++, moving pointer, and should</span></td>
      </tr>
      <tr>
        <td id="L2177" class="blob-num js-line-number" data-line-number="2177"></td>
        <td id="LC2177" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  be replaced with ++*count, (*count)++ or *count += 1.</span></td>
      </tr>
      <tr>
        <td id="L2178" class="blob-num js-line-number" data-line-number="2178"></td>
        <td id="LC2178" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2179" class="blob-num js-line-number" data-line-number="2179"></td>
        <td id="LC2179" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2180" class="blob-num js-line-number" data-line-number="2180"></td>
        <td id="LC2180" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2181" class="blob-num js-line-number" data-line-number="2181"></td>
        <td id="LC2181" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2182" class="blob-num js-line-number" data-line-number="2182"></td>
        <td id="LC2182" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2183" class="blob-num js-line-number" data-line-number="2183"></td>
        <td id="LC2183" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2184" class="blob-num js-line-number" data-line-number="2184"></td>
        <td id="LC2184" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2185" class="blob-num js-line-number" data-line-number="2185"></td>
        <td id="LC2185" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2186" class="blob-num js-line-number" data-line-number="2186"></td>
        <td id="LC2186" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>_RE_PATTERN_INVALID_INCREMENT</span>.<span class=pl-en>match</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2187" class="blob-num js-line-number" data-line-number="2187"></td>
        <td id="LC2187" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/invalid_increment&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2188" class="blob-num js-line-number" data-line-number="2188"></td>
        <td id="LC2188" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Changing pointer instead of value (or unused value of operator*).&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2189" class="blob-num js-line-number" data-line-number="2189"></td>
        <td id="LC2189" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2190" class="blob-num js-line-number" data-line-number="2190"></td>
        <td id="LC2190" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2191" class="blob-num js-line-number" data-line-number="2191"></td>
        <td id="LC2191" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsMacroDefinition</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L2192" class="blob-num js-line-number" data-line-number="2192"></td>
        <td id="LC2192" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^#define&#39;</span>, <span class=pl-s1>clean_lines</span>[<span class=pl-s1>linenum</span>]):</td>
      </tr>
      <tr>
        <td id="L2193" class="blob-num js-line-number" data-line-number="2193"></td>
        <td id="LC2193" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2194" class="blob-num js-line-number" data-line-number="2194"></td>
        <td id="LC2194" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2195" class="blob-num js-line-number" data-line-number="2195"></td>
        <td id="LC2195" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\\$&#39;</span>, <span class=pl-s1>clean_lines</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]):</td>
      </tr>
      <tr>
        <td id="L2196" class="blob-num js-line-number" data-line-number="2196"></td>
        <td id="LC2196" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2197" class="blob-num js-line-number" data-line-number="2197"></td>
        <td id="LC2197" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2198" class="blob-num js-line-number" data-line-number="2198"></td>
        <td id="LC2198" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2199" class="blob-num js-line-number" data-line-number="2199"></td>
        <td id="LC2199" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2200" class="blob-num js-line-number" data-line-number="2200"></td>
        <td id="LC2200" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2201" class="blob-num js-line-number" data-line-number="2201"></td>
        <td id="LC2201" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsForwardClassDeclaration</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L2202" class="blob-num js-line-number" data-line-number="2202"></td>
        <td id="LC2202" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*(\btemplate\b)*.*class\s+\w+;\s*$&#39;</span>, <span class=pl-s1>clean_lines</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L2203" class="blob-num js-line-number" data-line-number="2203"></td>
        <td id="LC2203" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2204" class="blob-num js-line-number" data-line-number="2204"></td>
        <td id="LC2204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2205" class="blob-num js-line-number" data-line-number="2205"></td>
        <td id="LC2205" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_BlockInfo</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L2206" class="blob-num js-line-number" data-line-number="2206"></td>
        <td id="LC2206" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Stores information about a generic block of code.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2207" class="blob-num js-line-number" data-line-number="2207"></td>
        <td id="LC2207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2208" class="blob-num js-line-number" data-line-number="2208"></td>
        <td id="LC2208" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>seen_open_brace</span>):</td>
      </tr>
      <tr>
        <td id="L2209" class="blob-num js-line-number" data-line-number="2209"></td>
        <td id="LC2209" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>starting_linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span></td>
      </tr>
      <tr>
        <td id="L2210" class="blob-num js-line-number" data-line-number="2210"></td>
        <td id="LC2210" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>seen_open_brace</span> <span class=pl-c1>=</span> <span class=pl-s1>seen_open_brace</span></td>
      </tr>
      <tr>
        <td id="L2211" class="blob-num js-line-number" data-line-number="2211"></td>
        <td id="LC2211" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>open_parentheses</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2212" class="blob-num js-line-number" data-line-number="2212"></td>
        <td id="LC2212" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>=</span> <span class=pl-s1>_NO_ASM</span></td>
      </tr>
      <tr>
        <td id="L2213" class="blob-num js-line-number" data-line-number="2213"></td>
        <td id="LC2213" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>check_namespace_indentation</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2214" class="blob-num js-line-number" data-line-number="2214"></td>
        <td id="LC2214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2215" class="blob-num js-line-number" data-line-number="2215"></td>
        <td id="LC2215" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckBegin</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2216" class="blob-num js-line-number" data-line-number="2216"></td>
        <td id="LC2216" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Run checks that applies to text up to the opening brace.</span></td>
      </tr>
      <tr>
        <td id="L2217" class="blob-num js-line-number" data-line-number="2217"></td>
        <td id="LC2217" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2218" class="blob-num js-line-number" data-line-number="2218"></td>
        <td id="LC2218" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    This is mostly for checking the text after the class identifier</span></td>
      </tr>
      <tr>
        <td id="L2219" class="blob-num js-line-number" data-line-number="2219"></td>
        <td id="LC2219" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    and the &quot;{&quot;, usually where the base class is specified.  For other</span></td>
      </tr>
      <tr>
        <td id="L2220" class="blob-num js-line-number" data-line-number="2220"></td>
        <td id="LC2220" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    blocks, there isn&#39;t much to check, so we always pass.</span></td>
      </tr>
      <tr>
        <td id="L2221" class="blob-num js-line-number" data-line-number="2221"></td>
        <td id="LC2221" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2222" class="blob-num js-line-number" data-line-number="2222"></td>
        <td id="LC2222" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2223" class="blob-num js-line-number" data-line-number="2223"></td>
        <td id="LC2223" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2224" class="blob-num js-line-number" data-line-number="2224"></td>
        <td id="LC2224" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2225" class="blob-num js-line-number" data-line-number="2225"></td>
        <td id="LC2225" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2226" class="blob-num js-line-number" data-line-number="2226"></td>
        <td id="LC2226" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2227" class="blob-num js-line-number" data-line-number="2227"></td>
        <td id="LC2227" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2228" class="blob-num js-line-number" data-line-number="2228"></td>
        <td id="LC2228" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L2229" class="blob-num js-line-number" data-line-number="2229"></td>
        <td id="LC2229" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2230" class="blob-num js-line-number" data-line-number="2230"></td>
        <td id="LC2230" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckEnd</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2231" class="blob-num js-line-number" data-line-number="2231"></td>
        <td id="LC2231" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Run checks that applies to text after the closing brace.</span></td>
      </tr>
      <tr>
        <td id="L2232" class="blob-num js-line-number" data-line-number="2232"></td>
        <td id="LC2232" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2233" class="blob-num js-line-number" data-line-number="2233"></td>
        <td id="LC2233" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    This is mostly used for checking end of namespace comments.</span></td>
      </tr>
      <tr>
        <td id="L2234" class="blob-num js-line-number" data-line-number="2234"></td>
        <td id="LC2234" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2235" class="blob-num js-line-number" data-line-number="2235"></td>
        <td id="LC2235" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2236" class="blob-num js-line-number" data-line-number="2236"></td>
        <td id="LC2236" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2237" class="blob-num js-line-number" data-line-number="2237"></td>
        <td id="LC2237" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2238" class="blob-num js-line-number" data-line-number="2238"></td>
        <td id="LC2238" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2239" class="blob-num js-line-number" data-line-number="2239"></td>
        <td id="LC2239" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2240" class="blob-num js-line-number" data-line-number="2240"></td>
        <td id="LC2240" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2241" class="blob-num js-line-number" data-line-number="2241"></td>
        <td id="LC2241" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L2242" class="blob-num js-line-number" data-line-number="2242"></td>
        <td id="LC2242" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2243" class="blob-num js-line-number" data-line-number="2243"></td>
        <td id="LC2243" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>IsBlockInfo</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2244" class="blob-num js-line-number" data-line-number="2244"></td>
        <td id="LC2244" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Returns true if this block is a _BlockInfo.</span></td>
      </tr>
      <tr>
        <td id="L2245" class="blob-num js-line-number" data-line-number="2245"></td>
        <td id="LC2245" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2246" class="blob-num js-line-number" data-line-number="2246"></td>
        <td id="LC2246" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    This is convenient for verifying that an object is an instance of</span></td>
      </tr>
      <tr>
        <td id="L2247" class="blob-num js-line-number" data-line-number="2247"></td>
        <td id="LC2247" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    a _BlockInfo, but not an instance of any of the derived classes.</span></td>
      </tr>
      <tr>
        <td id="L2248" class="blob-num js-line-number" data-line-number="2248"></td>
        <td id="LC2248" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2249" class="blob-num js-line-number" data-line-number="2249"></td>
        <td id="LC2249" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2250" class="blob-num js-line-number" data-line-number="2250"></td>
        <td id="LC2250" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True for this class, False for derived classes.</span></td>
      </tr>
      <tr>
        <td id="L2251" class="blob-num js-line-number" data-line-number="2251"></td>
        <td id="LC2251" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2252" class="blob-num js-line-number" data-line-number="2252"></td>
        <td id="LC2252" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>__class__</span> <span class=pl-c1>==</span> <span class=pl-s1>_BlockInfo</span></td>
      </tr>
      <tr>
        <td id="L2253" class="blob-num js-line-number" data-line-number="2253"></td>
        <td id="LC2253" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2254" class="blob-num js-line-number" data-line-number="2254"></td>
        <td id="LC2254" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2255" class="blob-num js-line-number" data-line-number="2255"></td>
        <td id="LC2255" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_ExternCInfo</span>(<span class=pl-s1>_BlockInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2256" class="blob-num js-line-number" data-line-number="2256"></td>
        <td id="LC2256" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Stores information about an &#39;extern &quot;C&quot;&#39; block.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2257" class="blob-num js-line-number" data-line-number="2257"></td>
        <td id="LC2257" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2258" class="blob-num js-line-number" data-line-number="2258"></td>
        <td id="LC2258" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L2259" class="blob-num js-line-number" data-line-number="2259"></td>
        <td id="LC2259" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_BlockInfo</span>.<span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>linenum</span>, <span class=pl-c1>True</span>)</td>
      </tr>
      <tr>
        <td id="L2260" class="blob-num js-line-number" data-line-number="2260"></td>
        <td id="LC2260" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2261" class="blob-num js-line-number" data-line-number="2261"></td>
        <td id="LC2261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2262" class="blob-num js-line-number" data-line-number="2262"></td>
        <td id="LC2262" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_ClassInfo</span>(<span class=pl-s1>_BlockInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2263" class="blob-num js-line-number" data-line-number="2263"></td>
        <td id="LC2263" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Stores information about a class.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2264" class="blob-num js-line-number" data-line-number="2264"></td>
        <td id="LC2264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2265" class="blob-num js-line-number" data-line-number="2265"></td>
        <td id="LC2265" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>name</span>, <span class=pl-s1>class_or_struct</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L2266" class="blob-num js-line-number" data-line-number="2266"></td>
        <td id="LC2266" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_BlockInfo</span>.<span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>linenum</span>, <span class=pl-c1>False</span>)</td>
      </tr>
      <tr>
        <td id="L2267" class="blob-num js-line-number" data-line-number="2267"></td>
        <td id="LC2267" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>name</span> <span class=pl-c1>=</span> <span class=pl-s1>name</span></td>
      </tr>
      <tr>
        <td id="L2268" class="blob-num js-line-number" data-line-number="2268"></td>
        <td id="LC2268" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>is_derived</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2269" class="blob-num js-line-number" data-line-number="2269"></td>
        <td id="LC2269" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>check_namespace_indentation</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2270" class="blob-num js-line-number" data-line-number="2270"></td>
        <td id="LC2270" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>class_or_struct</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;struct&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L2271" class="blob-num js-line-number" data-line-number="2271"></td>
        <td id="LC2271" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>access</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;public&#39;</span></td>
      </tr>
      <tr>
        <td id="L2272" class="blob-num js-line-number" data-line-number="2272"></td>
        <td id="LC2272" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>is_struct</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2273" class="blob-num js-line-number" data-line-number="2273"></td>
        <td id="LC2273" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2274" class="blob-num js-line-number" data-line-number="2274"></td>
        <td id="LC2274" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>access</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;private&#39;</span></td>
      </tr>
      <tr>
        <td id="L2275" class="blob-num js-line-number" data-line-number="2275"></td>
        <td id="LC2275" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>is_struct</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2276" class="blob-num js-line-number" data-line-number="2276"></td>
        <td id="LC2276" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2277" class="blob-num js-line-number" data-line-number="2277"></td>
        <td id="LC2277" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Remember initial indentation level for this class.  Using raw_lines here</span></td>
      </tr>
      <tr>
        <td id="L2278" class="blob-num js-line-number" data-line-number="2278"></td>
        <td id="LC2278" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># instead of elided to account for leading comments.</span></td>
      </tr>
      <tr>
        <td id="L2279" class="blob-num js-line-number" data-line-number="2279"></td>
        <td id="LC2279" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>class_indent</span> <span class=pl-c1>=</span> <span class=pl-v>GetIndentLevel</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L2280" class="blob-num js-line-number" data-line-number="2280"></td>
        <td id="LC2280" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2281" class="blob-num js-line-number" data-line-number="2281"></td>
        <td id="LC2281" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Try to find the end of the class.  This will be confused by things like:</span></td>
      </tr>
      <tr>
        <td id="L2282" class="blob-num js-line-number" data-line-number="2282"></td>
        <td id="LC2282" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   class A {</span></td>
      </tr>
      <tr>
        <td id="L2283" class="blob-num js-line-number" data-line-number="2283"></td>
        <td id="LC2283" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   } *x = { ...</span></td>
      </tr>
      <tr>
        <td id="L2284" class="blob-num js-line-number" data-line-number="2284"></td>
        <td id="LC2284" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2285" class="blob-num js-line-number" data-line-number="2285"></td>
        <td id="LC2285" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># But it&#39;s still good enough for CheckSectionSpacing.</span></td>
      </tr>
      <tr>
        <td id="L2286" class="blob-num js-line-number" data-line-number="2286"></td>
        <td id="LC2286" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>last_line</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2287" class="blob-num js-line-number" data-line-number="2287"></td>
        <td id="LC2287" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>depth</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2288" class="blob-num js-line-number" data-line-number="2288"></td>
        <td id="LC2288" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-s1>linenum</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>()):</td>
      </tr>
      <tr>
        <td id="L2289" class="blob-num js-line-number" data-line-number="2289"></td>
        <td id="LC2289" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L2290" class="blob-num js-line-number" data-line-number="2290"></td>
        <td id="LC2290" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>depth</span> <span class=pl-c1>+=</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;{&#39;</span>) <span class=pl-c1>-</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;}&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2291" class="blob-num js-line-number" data-line-number="2291"></td>
        <td id="LC2291" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>depth</span>:</td>
      </tr>
      <tr>
        <td id="L2292" class="blob-num js-line-number" data-line-number="2292"></td>
        <td id="LC2292" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>last_line</span> <span class=pl-c1>=</span> <span class=pl-s1>i</span></td>
      </tr>
      <tr>
        <td id="L2293" class="blob-num js-line-number" data-line-number="2293"></td>
        <td id="LC2293" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L2294" class="blob-num js-line-number" data-line-number="2294"></td>
        <td id="LC2294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2295" class="blob-num js-line-number" data-line-number="2295"></td>
        <td id="LC2295" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckBegin</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2296" class="blob-num js-line-number" data-line-number="2296"></td>
        <td id="LC2296" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for a bare &#39;:&#39;</span></td>
      </tr>
      <tr>
        <td id="L2297" class="blob-num js-line-number" data-line-number="2297"></td>
        <td id="LC2297" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>&#39;(^|[^:]):($|[^:])&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]):</td>
      </tr>
      <tr>
        <td id="L2298" class="blob-num js-line-number" data-line-number="2298"></td>
        <td id="LC2298" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>is_derived</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2299" class="blob-num js-line-number" data-line-number="2299"></td>
        <td id="LC2299" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2300" class="blob-num js-line-number" data-line-number="2300"></td>
        <td id="LC2300" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckEnd</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2301" class="blob-num js-line-number" data-line-number="2301"></td>
        <td id="LC2301" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If there is a DISALLOW macro, it should appear near the end of</span></td>
      </tr>
      <tr>
        <td id="L2302" class="blob-num js-line-number" data-line-number="2302"></td>
        <td id="LC2302" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the class.</span></td>
      </tr>
      <tr>
        <td id="L2303" class="blob-num js-line-number" data-line-number="2303"></td>
        <td id="LC2303" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>seen_last_thing_in_class</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2304" class="blob-num js-line-number" data-line-number="2304"></td>
        <td id="LC2304" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>, <span class=pl-s1>self</span>.<span class=pl-s1>starting_linenum</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L2305" class="blob-num js-line-number" data-line-number="2305"></td>
        <td id="LC2305" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(</td>
      </tr>
      <tr>
        <td id="L2306" class="blob-num js-line-number" data-line-number="2306"></td>
        <td id="LC2306" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>r&#39;\b(DISALLOW_COPY_AND_ASSIGN|DISALLOW_IMPLICIT_CONSTRUCTORS)\(&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L2307" class="blob-num js-line-number" data-line-number="2307"></td>
        <td id="LC2307" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>name</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\)&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2308" class="blob-num js-line-number" data-line-number="2308"></td>
        <td id="LC2308" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>])</td>
      </tr>
      <tr>
        <td id="L2309" class="blob-num js-line-number" data-line-number="2309"></td>
        <td id="LC2309" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L2310" class="blob-num js-line-number" data-line-number="2310"></td>
        <td id="LC2310" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>seen_last_thing_in_class</span>:</td>
      </tr>
      <tr>
        <td id="L2311" class="blob-num js-line-number" data-line-number="2311"></td>
        <td id="LC2311" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>i</span>, <span class=pl-s>&#39;readability/constructors&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2312" class="blob-num js-line-number" data-line-number="2312"></td>
        <td id="LC2312" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> <span class=pl-s>&#39; should be the last thing in the class&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2313" class="blob-num js-line-number" data-line-number="2313"></td>
        <td id="LC2313" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L2314" class="blob-num js-line-number" data-line-number="2314"></td>
        <td id="LC2314" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2315" class="blob-num js-line-number" data-line-number="2315"></td>
        <td id="LC2315" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*$&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]):</td>
      </tr>
      <tr>
        <td id="L2316" class="blob-num js-line-number" data-line-number="2316"></td>
        <td id="LC2316" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>seen_last_thing_in_class</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2317" class="blob-num js-line-number" data-line-number="2317"></td>
        <td id="LC2317" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2318" class="blob-num js-line-number" data-line-number="2318"></td>
        <td id="LC2318" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check that closing brace is aligned with beginning of the class.</span></td>
      </tr>
      <tr>
        <td id="L2319" class="blob-num js-line-number" data-line-number="2319"></td>
        <td id="LC2319" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Only do this if the closing brace is indented by only whitespaces.</span></td>
      </tr>
      <tr>
        <td id="L2320" class="blob-num js-line-number" data-line-number="2320"></td>
        <td id="LC2320" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># This means we will not check single-line class definitions.</span></td>
      </tr>
      <tr>
        <td id="L2321" class="blob-num js-line-number" data-line-number="2321"></td>
        <td id="LC2321" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>indent</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^( *)\}&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L2322" class="blob-num js-line-number" data-line-number="2322"></td>
        <td id="LC2322" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>indent</span> <span class=pl-c1>and</span> <span class=pl-en>len</span>(<span class=pl-s1>indent</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)) <span class=pl-c1>!=</span> <span class=pl-s1>self</span>.<span class=pl-s1>class_indent</span>:</td>
      </tr>
      <tr>
        <td id="L2323" class="blob-num js-line-number" data-line-number="2323"></td>
        <td id="LC2323" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>is_struct</span>:</td>
      </tr>
      <tr>
        <td id="L2324" class="blob-num js-line-number" data-line-number="2324"></td>
        <td id="LC2324" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>parent</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;struct &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>self</span>.<span class=pl-s1>name</span></td>
      </tr>
      <tr>
        <td id="L2325" class="blob-num js-line-number" data-line-number="2325"></td>
        <td id="LC2325" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2326" class="blob-num js-line-number" data-line-number="2326"></td>
        <td id="LC2326" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>parent</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;class &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>self</span>.<span class=pl-s1>name</span></td>
      </tr>
      <tr>
        <td id="L2327" class="blob-num js-line-number" data-line-number="2327"></td>
        <td id="LC2327" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/indent&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2328" class="blob-num js-line-number" data-line-number="2328"></td>
        <td id="LC2328" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Closing brace should be aligned with beginning of %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>parent</span>)</td>
      </tr>
      <tr>
        <td id="L2329" class="blob-num js-line-number" data-line-number="2329"></td>
        <td id="LC2329" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2330" class="blob-num js-line-number" data-line-number="2330"></td>
        <td id="LC2330" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2331" class="blob-num js-line-number" data-line-number="2331"></td>
        <td id="LC2331" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_NamespaceInfo</span>(<span class=pl-s1>_BlockInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2332" class="blob-num js-line-number" data-line-number="2332"></td>
        <td id="LC2332" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Stores information about a namespace.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2333" class="blob-num js-line-number" data-line-number="2333"></td>
        <td id="LC2333" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2334" class="blob-num js-line-number" data-line-number="2334"></td>
        <td id="LC2334" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>name</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L2335" class="blob-num js-line-number" data-line-number="2335"></td>
        <td id="LC2335" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_BlockInfo</span>.<span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>linenum</span>, <span class=pl-c1>False</span>)</td>
      </tr>
      <tr>
        <td id="L2336" class="blob-num js-line-number" data-line-number="2336"></td>
        <td id="LC2336" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>name</span> <span class=pl-c1>=</span> <span class=pl-s1>name</span> <span class=pl-c1>or</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L2337" class="blob-num js-line-number" data-line-number="2337"></td>
        <td id="LC2337" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>check_namespace_indentation</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2338" class="blob-num js-line-number" data-line-number="2338"></td>
        <td id="LC2338" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2339" class="blob-num js-line-number" data-line-number="2339"></td>
        <td id="LC2339" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckEnd</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2340" class="blob-num js-line-number" data-line-number="2340"></td>
        <td id="LC2340" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check end of namespace comments.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2341" class="blob-num js-line-number" data-line-number="2341"></td>
        <td id="LC2341" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2342" class="blob-num js-line-number" data-line-number="2342"></td>
        <td id="LC2342" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2343" class="blob-num js-line-number" data-line-number="2343"></td>
        <td id="LC2343" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check how many lines is enclosed in this namespace.  Don&#39;t issue</span></td>
      </tr>
      <tr>
        <td id="L2344" class="blob-num js-line-number" data-line-number="2344"></td>
        <td id="LC2344" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># warning for missing namespace comments if there aren&#39;t enough</span></td>
      </tr>
      <tr>
        <td id="L2345" class="blob-num js-line-number" data-line-number="2345"></td>
        <td id="LC2345" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># lines.  However, do apply checks if there is already an end of</span></td>
      </tr>
      <tr>
        <td id="L2346" class="blob-num js-line-number" data-line-number="2346"></td>
        <td id="LC2346" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># namespace comment and it&#39;s incorrect.</span></td>
      </tr>
      <tr>
        <td id="L2347" class="blob-num js-line-number" data-line-number="2347"></td>
        <td id="LC2347" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2348" class="blob-num js-line-number" data-line-number="2348"></td>
        <td id="LC2348" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># TODO(unknown): We always want to check end of namespace comments</span></td>
      </tr>
      <tr>
        <td id="L2349" class="blob-num js-line-number" data-line-number="2349"></td>
        <td id="LC2349" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># if a namespace is large, but sometimes we also want to apply the</span></td>
      </tr>
      <tr>
        <td id="L2350" class="blob-num js-line-number" data-line-number="2350"></td>
        <td id="LC2350" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># check if a short namespace contained nontrivial things (something</span></td>
      </tr>
      <tr>
        <td id="L2351" class="blob-num js-line-number" data-line-number="2351"></td>
        <td id="LC2351" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># other than forward declarations).  There is currently no logic on</span></td>
      </tr>
      <tr>
        <td id="L2352" class="blob-num js-line-number" data-line-number="2352"></td>
        <td id="LC2352" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># deciding what these nontrivial things are, so this check is</span></td>
      </tr>
      <tr>
        <td id="L2353" class="blob-num js-line-number" data-line-number="2353"></td>
        <td id="LC2353" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># triggered by namespace size only, which works most of the time.</span></td>
      </tr>
      <tr>
        <td id="L2354" class="blob-num js-line-number" data-line-number="2354"></td>
        <td id="LC2354" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-s1>self</span>.<span class=pl-s1>starting_linenum</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>10</span></td>
      </tr>
      <tr>
        <td id="L2355" class="blob-num js-line-number" data-line-number="2355"></td>
        <td id="LC2355" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*};*\s*(//|/\*).*\bnamespace\b&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L2356" class="blob-num js-line-number" data-line-number="2356"></td>
        <td id="LC2356" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L2357" class="blob-num js-line-number" data-line-number="2357"></td>
        <td id="LC2357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2358" class="blob-num js-line-number" data-line-number="2358"></td>
        <td id="LC2358" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for matching comment at end of namespace.</span></td>
      </tr>
      <tr>
        <td id="L2359" class="blob-num js-line-number" data-line-number="2359"></td>
        <td id="LC2359" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2360" class="blob-num js-line-number" data-line-number="2360"></td>
        <td id="LC2360" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Note that we accept C style &quot;/* */&quot; comments for terminating</span></td>
      </tr>
      <tr>
        <td id="L2361" class="blob-num js-line-number" data-line-number="2361"></td>
        <td id="LC2361" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># namespaces, so that code that terminate namespaces inside</span></td>
      </tr>
      <tr>
        <td id="L2362" class="blob-num js-line-number" data-line-number="2362"></td>
        <td id="LC2362" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># preprocessor macros can be cpplint clean.</span></td>
      </tr>
      <tr>
        <td id="L2363" class="blob-num js-line-number" data-line-number="2363"></td>
        <td id="LC2363" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2364" class="blob-num js-line-number" data-line-number="2364"></td>
        <td id="LC2364" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We also accept stuff like &quot;// end of namespace &lt;name&gt;.&quot; with the</span></td>
      </tr>
      <tr>
        <td id="L2365" class="blob-num js-line-number" data-line-number="2365"></td>
        <td id="LC2365" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># period at the end.</span></td>
      </tr>
      <tr>
        <td id="L2366" class="blob-num js-line-number" data-line-number="2366"></td>
        <td id="LC2366" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2367" class="blob-num js-line-number" data-line-number="2367"></td>
        <td id="LC2367" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Besides these, we don&#39;t accept anything else, otherwise we might</span></td>
      </tr>
      <tr>
        <td id="L2368" class="blob-num js-line-number" data-line-number="2368"></td>
        <td id="LC2368" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># get false negatives when existing comment is a substring of the</span></td>
      </tr>
      <tr>
        <td id="L2369" class="blob-num js-line-number" data-line-number="2369"></td>
        <td id="LC2369" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># expected namespace.</span></td>
      </tr>
      <tr>
        <td id="L2370" class="blob-num js-line-number" data-line-number="2370"></td>
        <td id="LC2370" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>name</span>:</td>
      </tr>
      <tr>
        <td id="L2371" class="blob-num js-line-number" data-line-number="2371"></td>
        <td id="LC2371" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Named namespace</span></td>
      </tr>
      <tr>
        <td id="L2372" class="blob-num js-line-number" data-line-number="2372"></td>
        <td id="LC2372" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>((<span class=pl-s>r&#39;^\s*};*\s*(//|/\*).*\bnamespace\s+&#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L2373" class="blob-num js-line-number" data-line-number="2373"></td>
        <td id="LC2373" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>re</span>.<span class=pl-en>escape</span>(<span class=pl-s1>self</span>.<span class=pl-s1>name</span>) <span class=pl-c1>+</span> <span class=pl-s>r&#39;[\*/\.\\\s]*$&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L2374" class="blob-num js-line-number" data-line-number="2374"></td>
        <td id="LC2374" class="blob-code blob-code-inner js-file-line">                   <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2375" class="blob-num js-line-number" data-line-number="2375"></td>
        <td id="LC2375" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/namespace&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2376" class="blob-num js-line-number" data-line-number="2376"></td>
        <td id="LC2376" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Namespace should be terminated with &quot;// namespace %s&quot;&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L2377" class="blob-num js-line-number" data-line-number="2377"></td>
        <td id="LC2377" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>self</span>.<span class=pl-s1>name</span>)</td>
      </tr>
      <tr>
        <td id="L2378" class="blob-num js-line-number" data-line-number="2378"></td>
        <td id="LC2378" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2379" class="blob-num js-line-number" data-line-number="2379"></td>
        <td id="LC2379" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Anonymous namespace</span></td>
      </tr>
      <tr>
        <td id="L2380" class="blob-num js-line-number" data-line-number="2380"></td>
        <td id="LC2380" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*};*\s*(//|/\*).*\bnamespace[\*/\.\\\s]*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2381" class="blob-num js-line-number" data-line-number="2381"></td>
        <td id="LC2381" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If &quot;// namespace anonymous&quot; or &quot;// anonymous namespace (more text)&quot;,</span></td>
      </tr>
      <tr>
        <td id="L2382" class="blob-num js-line-number" data-line-number="2382"></td>
        <td id="LC2382" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># mention &quot;// anonymous namespace&quot; as an acceptable form</span></td>
      </tr>
      <tr>
        <td id="L2383" class="blob-num js-line-number" data-line-number="2383"></td>
        <td id="LC2383" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*}.*\b(namespace anonymous|anonymous namespace)\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2384" class="blob-num js-line-number" data-line-number="2384"></td>
        <td id="LC2384" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/namespace&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2385" class="blob-num js-line-number" data-line-number="2385"></td>
        <td id="LC2385" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Anonymous namespace should be terminated with &quot;// namespace&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L2386" class="blob-num js-line-number" data-line-number="2386"></td>
        <td id="LC2386" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39; or &quot;// anonymous namespace&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2387" class="blob-num js-line-number" data-line-number="2387"></td>
        <td id="LC2387" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2388" class="blob-num js-line-number" data-line-number="2388"></td>
        <td id="LC2388" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/namespace&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2389" class="blob-num js-line-number" data-line-number="2389"></td>
        <td id="LC2389" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Anonymous namespace should be terminated with &quot;// namespace&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2390" class="blob-num js-line-number" data-line-number="2390"></td>
        <td id="LC2390" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2391" class="blob-num js-line-number" data-line-number="2391"></td>
        <td id="LC2391" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2392" class="blob-num js-line-number" data-line-number="2392"></td>
        <td id="LC2392" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-s1>_PreprocessorInfo</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L2393" class="blob-num js-line-number" data-line-number="2393"></td>
        <td id="LC2393" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Stores checkpoints of nesting stacks when #if/#else is seen.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2394" class="blob-num js-line-number" data-line-number="2394"></td>
        <td id="LC2394" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2395" class="blob-num js-line-number" data-line-number="2395"></td>
        <td id="LC2395" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>, <span class=pl-s1>stack_before_if</span>):</td>
      </tr>
      <tr>
        <td id="L2396" class="blob-num js-line-number" data-line-number="2396"></td>
        <td id="LC2396" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The entire nesting stack before #if</span></td>
      </tr>
      <tr>
        <td id="L2397" class="blob-num js-line-number" data-line-number="2397"></td>
        <td id="LC2397" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>stack_before_if</span> <span class=pl-c1>=</span> <span class=pl-s1>stack_before_if</span></td>
      </tr>
      <tr>
        <td id="L2398" class="blob-num js-line-number" data-line-number="2398"></td>
        <td id="LC2398" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2399" class="blob-num js-line-number" data-line-number="2399"></td>
        <td id="LC2399" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The entire nesting stack up to #else</span></td>
      </tr>
      <tr>
        <td id="L2400" class="blob-num js-line-number" data-line-number="2400"></td>
        <td id="LC2400" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>stack_before_else</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L2401" class="blob-num js-line-number" data-line-number="2401"></td>
        <td id="LC2401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2402" class="blob-num js-line-number" data-line-number="2402"></td>
        <td id="LC2402" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Whether we have already seen #else or #elif</span></td>
      </tr>
      <tr>
        <td id="L2403" class="blob-num js-line-number" data-line-number="2403"></td>
        <td id="LC2403" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>seen_else</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2404" class="blob-num js-line-number" data-line-number="2404"></td>
        <td id="LC2404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2405" class="blob-num js-line-number" data-line-number="2405"></td>
        <td id="LC2405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2406" class="blob-num js-line-number" data-line-number="2406"></td>
        <td id="LC2406" class="blob-code blob-code-inner js-file-line"><span class=pl-k>class</span> <span class=pl-v>NestingState</span>(<span class=pl-s1>object</span>):</td>
      </tr>
      <tr>
        <td id="L2407" class="blob-num js-line-number" data-line-number="2407"></td>
        <td id="LC2407" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Holds states related to parsing braces.&quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2408" class="blob-num js-line-number" data-line-number="2408"></td>
        <td id="LC2408" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2409" class="blob-num js-line-number" data-line-number="2409"></td>
        <td id="LC2409" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-en>__init__</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2410" class="blob-num js-line-number" data-line-number="2410"></td>
        <td id="LC2410" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Stack for tracking all braces.  An object is pushed whenever we</span></td>
      </tr>
      <tr>
        <td id="L2411" class="blob-num js-line-number" data-line-number="2411"></td>
        <td id="LC2411" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># see a &quot;{&quot;, and popped when we see a &quot;}&quot;.  Only 3 types of</span></td>
      </tr>
      <tr>
        <td id="L2412" class="blob-num js-line-number" data-line-number="2412"></td>
        <td id="LC2412" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># objects are possible:</span></td>
      </tr>
      <tr>
        <td id="L2413" class="blob-num js-line-number" data-line-number="2413"></td>
        <td id="LC2413" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - _ClassInfo: a class or struct.</span></td>
      </tr>
      <tr>
        <td id="L2414" class="blob-num js-line-number" data-line-number="2414"></td>
        <td id="LC2414" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - _NamespaceInfo: a namespace.</span></td>
      </tr>
      <tr>
        <td id="L2415" class="blob-num js-line-number" data-line-number="2415"></td>
        <td id="LC2415" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - _BlockInfo: some other type of block.</span></td>
      </tr>
      <tr>
        <td id="L2416" class="blob-num js-line-number" data-line-number="2416"></td>
        <td id="LC2416" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L2417" class="blob-num js-line-number" data-line-number="2417"></td>
        <td id="LC2417" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2418" class="blob-num js-line-number" data-line-number="2418"></td>
        <td id="LC2418" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Top of the previous stack before each Update().</span></td>
      </tr>
      <tr>
        <td id="L2419" class="blob-num js-line-number" data-line-number="2419"></td>
        <td id="LC2419" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2420" class="blob-num js-line-number" data-line-number="2420"></td>
        <td id="LC2420" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Because the nesting_stack is updated at the end of each line, we</span></td>
      </tr>
      <tr>
        <td id="L2421" class="blob-num js-line-number" data-line-number="2421"></td>
        <td id="LC2421" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># had to do some convoluted checks to find out what is the current</span></td>
      </tr>
      <tr>
        <td id="L2422" class="blob-num js-line-number" data-line-number="2422"></td>
        <td id="LC2422" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># scope at the beginning of the line.  This check is simplified by</span></td>
      </tr>
      <tr>
        <td id="L2423" class="blob-num js-line-number" data-line-number="2423"></td>
        <td id="LC2423" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># saving the previous top of nesting stack.</span></td>
      </tr>
      <tr>
        <td id="L2424" class="blob-num js-line-number" data-line-number="2424"></td>
        <td id="LC2424" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2425" class="blob-num js-line-number" data-line-number="2425"></td>
        <td id="LC2425" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We could save the full stack, but we only need the top.  Copying</span></td>
      </tr>
      <tr>
        <td id="L2426" class="blob-num js-line-number" data-line-number="2426"></td>
        <td id="LC2426" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the full nesting stack would slow down cpplint by ~10%.</span></td>
      </tr>
      <tr>
        <td id="L2427" class="blob-num js-line-number" data-line-number="2427"></td>
        <td id="LC2427" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>previous_stack_top</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L2428" class="blob-num js-line-number" data-line-number="2428"></td>
        <td id="LC2428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2429" class="blob-num js-line-number" data-line-number="2429"></td>
        <td id="LC2429" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Stack of _PreprocessorInfo objects.</span></td>
      </tr>
      <tr>
        <td id="L2430" class="blob-num js-line-number" data-line-number="2430"></td>
        <td id="LC2430" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L2431" class="blob-num js-line-number" data-line-number="2431"></td>
        <td id="LC2431" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2432" class="blob-num js-line-number" data-line-number="2432"></td>
        <td id="LC2432" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>SeenOpenBrace</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2433" class="blob-num js-line-number" data-line-number="2433"></td>
        <td id="LC2433" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if we have seen the opening brace for the innermost block.</span></td>
      </tr>
      <tr>
        <td id="L2434" class="blob-num js-line-number" data-line-number="2434"></td>
        <td id="LC2434" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2435" class="blob-num js-line-number" data-line-number="2435"></td>
        <td id="LC2435" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2436" class="blob-num js-line-number" data-line-number="2436"></td>
        <td id="LC2436" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if we have seen the opening brace, False if the innermost</span></td>
      </tr>
      <tr>
        <td id="L2437" class="blob-num js-line-number" data-line-number="2437"></td>
        <td id="LC2437" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      block is still expecting an opening brace.</span></td>
      </tr>
      <tr>
        <td id="L2438" class="blob-num js-line-number" data-line-number="2438"></td>
        <td id="LC2438" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2439" class="blob-num js-line-number" data-line-number="2439"></td>
        <td id="LC2439" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>) <span class=pl-c1>or</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>seen_open_brace</span></td>
      </tr>
      <tr>
        <td id="L2440" class="blob-num js-line-number" data-line-number="2440"></td>
        <td id="LC2440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2441" class="blob-num js-line-number" data-line-number="2441"></td>
        <td id="LC2441" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InNamespaceBody</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2442" class="blob-num js-line-number" data-line-number="2442"></td>
        <td id="LC2442" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if we are currently one level inside a namespace body.</span></td>
      </tr>
      <tr>
        <td id="L2443" class="blob-num js-line-number" data-line-number="2443"></td>
        <td id="LC2443" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2444" class="blob-num js-line-number" data-line-number="2444"></td>
        <td id="LC2444" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2445" class="blob-num js-line-number" data-line-number="2445"></td>
        <td id="LC2445" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if top of the stack is a namespace block, False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L2446" class="blob-num js-line-number" data-line-number="2446"></td>
        <td id="LC2446" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2447" class="blob-num js-line-number" data-line-number="2447"></td>
        <td id="LC2447" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>_NamespaceInfo</span>)</td>
      </tr>
      <tr>
        <td id="L2448" class="blob-num js-line-number" data-line-number="2448"></td>
        <td id="LC2448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2449" class="blob-num js-line-number" data-line-number="2449"></td>
        <td id="LC2449" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InExternC</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2450" class="blob-num js-line-number" data-line-number="2450"></td>
        <td id="LC2450" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if we are currently one level inside an &#39;extern &quot;C&quot;&#39; block.</span></td>
      </tr>
      <tr>
        <td id="L2451" class="blob-num js-line-number" data-line-number="2451"></td>
        <td id="LC2451" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2452" class="blob-num js-line-number" data-line-number="2452"></td>
        <td id="LC2452" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2453" class="blob-num js-line-number" data-line-number="2453"></td>
        <td id="LC2453" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if top of the stack is an extern block, False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L2454" class="blob-num js-line-number" data-line-number="2454"></td>
        <td id="LC2454" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2455" class="blob-num js-line-number" data-line-number="2455"></td>
        <td id="LC2455" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>_ExternCInfo</span>)</td>
      </tr>
      <tr>
        <td id="L2456" class="blob-num js-line-number" data-line-number="2456"></td>
        <td id="LC2456" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2457" class="blob-num js-line-number" data-line-number="2457"></td>
        <td id="LC2457" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InClassDeclaration</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2458" class="blob-num js-line-number" data-line-number="2458"></td>
        <td id="LC2458" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if we are currently one level inside a class or struct declaration.</span></td>
      </tr>
      <tr>
        <td id="L2459" class="blob-num js-line-number" data-line-number="2459"></td>
        <td id="LC2459" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2460" class="blob-num js-line-number" data-line-number="2460"></td>
        <td id="LC2460" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2461" class="blob-num js-line-number" data-line-number="2461"></td>
        <td id="LC2461" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if top of the stack is a class/struct, False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L2462" class="blob-num js-line-number" data-line-number="2462"></td>
        <td id="LC2462" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2463" class="blob-num js-line-number" data-line-number="2463"></td>
        <td id="LC2463" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>_ClassInfo</span>)</td>
      </tr>
      <tr>
        <td id="L2464" class="blob-num js-line-number" data-line-number="2464"></td>
        <td id="LC2464" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2465" class="blob-num js-line-number" data-line-number="2465"></td>
        <td id="LC2465" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InAsmBlock</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2466" class="blob-num js-line-number" data-line-number="2466"></td>
        <td id="LC2466" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if we are currently one level inside an inline ASM block.</span></td>
      </tr>
      <tr>
        <td id="L2467" class="blob-num js-line-number" data-line-number="2467"></td>
        <td id="LC2467" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2468" class="blob-num js-line-number" data-line-number="2468"></td>
        <td id="LC2468" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2469" class="blob-num js-line-number" data-line-number="2469"></td>
        <td id="LC2469" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if the top of the stack is a block containing inline ASM.</span></td>
      </tr>
      <tr>
        <td id="L2470" class="blob-num js-line-number" data-line-number="2470"></td>
        <td id="LC2470" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2471" class="blob-num js-line-number" data-line-number="2471"></td>
        <td id="LC2471" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>inline_asm</span> <span class=pl-c1>!=</span> <span class=pl-s1>_NO_ASM</span></td>
      </tr>
      <tr>
        <td id="L2472" class="blob-num js-line-number" data-line-number="2472"></td>
        <td id="LC2472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2473" class="blob-num js-line-number" data-line-number="2473"></td>
        <td id="LC2473" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InTemplateArgumentList</span>(<span class=pl-s1>self</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span>):</td>
      </tr>
      <tr>
        <td id="L2474" class="blob-num js-line-number" data-line-number="2474"></td>
        <td id="LC2474" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Check if current position is inside template argument list.</span></td>
      </tr>
      <tr>
        <td id="L2475" class="blob-num js-line-number" data-line-number="2475"></td>
        <td id="LC2475" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2476" class="blob-num js-line-number" data-line-number="2476"></td>
        <td id="LC2476" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2477" class="blob-num js-line-number" data-line-number="2477"></td>
        <td id="LC2477" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2478" class="blob-num js-line-number" data-line-number="2478"></td>
        <td id="LC2478" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2479" class="blob-num js-line-number" data-line-number="2479"></td>
        <td id="LC2479" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      pos: position just after the suspected template argument.</span></td>
      </tr>
      <tr>
        <td id="L2480" class="blob-num js-line-number" data-line-number="2480"></td>
        <td id="LC2480" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2481" class="blob-num js-line-number" data-line-number="2481"></td>
        <td id="LC2481" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      True if (linenum, pos) is inside template arguments.</span></td>
      </tr>
      <tr>
        <td id="L2482" class="blob-num js-line-number" data-line-number="2482"></td>
        <td id="LC2482" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2483" class="blob-num js-line-number" data-line-number="2483"></td>
        <td id="LC2483" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>():</td>
      </tr>
      <tr>
        <td id="L2484" class="blob-num js-line-number" data-line-number="2484"></td>
        <td id="LC2484" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Find the earliest character that might indicate a template argument</span></td>
      </tr>
      <tr>
        <td id="L2485" class="blob-num js-line-number" data-line-number="2485"></td>
        <td id="LC2485" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2486" class="blob-num js-line-number" data-line-number="2486"></td>
        <td id="LC2486" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^[^{};=\[\]\.&lt;&gt;]*(.)&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-s1>pos</span>:])</td>
      </tr>
      <tr>
        <td id="L2487" class="blob-num js-line-number" data-line-number="2487"></td>
        <td id="LC2487" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L2488" class="blob-num js-line-number" data-line-number="2488"></td>
        <td id="LC2488" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L2489" class="blob-num js-line-number" data-line-number="2489"></td>
        <td id="LC2489" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2490" class="blob-num js-line-number" data-line-number="2490"></td>
        <td id="LC2490" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L2491" class="blob-num js-line-number" data-line-number="2491"></td>
        <td id="LC2491" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>token</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L2492" class="blob-num js-line-number" data-line-number="2492"></td>
        <td id="LC2492" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>pos</span> <span class=pl-c1>+=</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>0</span>))</td>
      </tr>
      <tr>
        <td id="L2493" class="blob-num js-line-number" data-line-number="2493"></td>
        <td id="LC2493" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2494" class="blob-num js-line-number" data-line-number="2494"></td>
        <td id="LC2494" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># These things do not look like template argument list:</span></td>
      </tr>
      <tr>
        <td id="L2495" class="blob-num js-line-number" data-line-number="2495"></td>
        <td id="LC2495" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   class Suspect {</span></td>
      </tr>
      <tr>
        <td id="L2496" class="blob-num js-line-number" data-line-number="2496"></td>
        <td id="LC2496" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   class Suspect x; }</span></td>
      </tr>
      <tr>
        <td id="L2497" class="blob-num js-line-number" data-line-number="2497"></td>
        <td id="LC2497" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>token</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;{&#39;</span>, <span class=pl-s>&#39;}&#39;</span>, <span class=pl-s>&#39;;&#39;</span>): <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2498" class="blob-num js-line-number" data-line-number="2498"></td>
        <td id="LC2498" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2499" class="blob-num js-line-number" data-line-number="2499"></td>
        <td id="LC2499" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># These things look like template argument list:</span></td>
      </tr>
      <tr>
        <td id="L2500" class="blob-num js-line-number" data-line-number="2500"></td>
        <td id="LC2500" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   template &lt;class Suspect&gt;</span></td>
      </tr>
      <tr>
        <td id="L2501" class="blob-num js-line-number" data-line-number="2501"></td>
        <td id="LC2501" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   template &lt;class Suspect = default_value&gt;</span></td>
      </tr>
      <tr>
        <td id="L2502" class="blob-num js-line-number" data-line-number="2502"></td>
        <td id="LC2502" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   template &lt;class Suspect[]&gt;</span></td>
      </tr>
      <tr>
        <td id="L2503" class="blob-num js-line-number" data-line-number="2503"></td>
        <td id="LC2503" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   template &lt;class Suspect...&gt;</span></td>
      </tr>
      <tr>
        <td id="L2504" class="blob-num js-line-number" data-line-number="2504"></td>
        <td id="LC2504" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>token</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;&gt;&#39;</span>, <span class=pl-s>&#39;=&#39;</span>, <span class=pl-s>&#39;[&#39;</span>, <span class=pl-s>&#39;]&#39;</span>, <span class=pl-s>&#39;.&#39;</span>): <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2505" class="blob-num js-line-number" data-line-number="2505"></td>
        <td id="LC2505" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2506" class="blob-num js-line-number" data-line-number="2506"></td>
        <td id="LC2506" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Check if token is an unmatched &#39;&lt;&#39;.</span></td>
      </tr>
      <tr>
        <td id="L2507" class="blob-num js-line-number" data-line-number="2507"></td>
        <td id="LC2507" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># If not, move on to the next character.</span></td>
      </tr>
      <tr>
        <td id="L2508" class="blob-num js-line-number" data-line-number="2508"></td>
        <td id="LC2508" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>token</span> <span class=pl-c1>!=</span> <span class=pl-s>&#39;&lt;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L2509" class="blob-num js-line-number" data-line-number="2509"></td>
        <td id="LC2509" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>pos</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L2510" class="blob-num js-line-number" data-line-number="2510"></td>
        <td id="LC2510" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>pos</span> <span class=pl-c1>&gt;=</span> <span class=pl-en>len</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2511" class="blob-num js-line-number" data-line-number="2511"></td>
        <td id="LC2511" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L2512" class="blob-num js-line-number" data-line-number="2512"></td>
        <td id="LC2512" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2513" class="blob-num js-line-number" data-line-number="2513"></td>
        <td id="LC2513" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L2514" class="blob-num js-line-number" data-line-number="2514"></td>
        <td id="LC2514" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2515" class="blob-num js-line-number" data-line-number="2515"></td>
        <td id="LC2515" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># We can&#39;t be sure if we just find a single &#39;&lt;&#39;, and need to</span></td>
      </tr>
      <tr>
        <td id="L2516" class="blob-num js-line-number" data-line-number="2516"></td>
        <td id="LC2516" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># find the matching &#39;&gt;&#39;.</span></td>
      </tr>
      <tr>
        <td id="L2517" class="blob-num js-line-number" data-line-number="2517"></td>
        <td id="LC2517" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>_</span>, <span class=pl-s1>end_line</span>, <span class=pl-s1>end_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L2518" class="blob-num js-line-number" data-line-number="2518"></td>
        <td id="LC2518" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L2519" class="blob-num js-line-number" data-line-number="2519"></td>
        <td id="LC2519" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Not sure if template argument list or syntax error in file</span></td>
      </tr>
      <tr>
        <td id="L2520" class="blob-num js-line-number" data-line-number="2520"></td>
        <td id="LC2520" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2521" class="blob-num js-line-number" data-line-number="2521"></td>
        <td id="LC2521" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>end_line</span></td>
      </tr>
      <tr>
        <td id="L2522" class="blob-num js-line-number" data-line-number="2522"></td>
        <td id="LC2522" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-s1>end_pos</span></td>
      </tr>
      <tr>
        <td id="L2523" class="blob-num js-line-number" data-line-number="2523"></td>
        <td id="LC2523" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L2524" class="blob-num js-line-number" data-line-number="2524"></td>
        <td id="LC2524" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2525" class="blob-num js-line-number" data-line-number="2525"></td>
        <td id="LC2525" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>UpdatePreprocessor</span>(<span class=pl-s1>self</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2526" class="blob-num js-line-number" data-line-number="2526"></td>
        <td id="LC2526" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Update preprocessor stack.</span></td>
      </tr>
      <tr>
        <td id="L2527" class="blob-num js-line-number" data-line-number="2527"></td>
        <td id="LC2527" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2528" class="blob-num js-line-number" data-line-number="2528"></td>
        <td id="LC2528" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    We need to handle preprocessors due to classes like this:</span></td>
      </tr>
      <tr>
        <td id="L2529" class="blob-num js-line-number" data-line-number="2529"></td>
        <td id="LC2529" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      #ifdef SWIG</span></td>
      </tr>
      <tr>
        <td id="L2530" class="blob-num js-line-number" data-line-number="2530"></td>
        <td id="LC2530" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      struct ResultDetailsPageElementExtensionPoint {</span></td>
      </tr>
      <tr>
        <td id="L2531" class="blob-num js-line-number" data-line-number="2531"></td>
        <td id="LC2531" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      #else</span></td>
      </tr>
      <tr>
        <td id="L2532" class="blob-num js-line-number" data-line-number="2532"></td>
        <td id="LC2532" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      struct ResultDetailsPageElementExtensionPoint : public Extension {</span></td>
      </tr>
      <tr>
        <td id="L2533" class="blob-num js-line-number" data-line-number="2533"></td>
        <td id="LC2533" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      #endif</span></td>
      </tr>
      <tr>
        <td id="L2534" class="blob-num js-line-number" data-line-number="2534"></td>
        <td id="LC2534" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2535" class="blob-num js-line-number" data-line-number="2535"></td>
        <td id="LC2535" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    We make the following assumptions (good enough for most files):</span></td>
      </tr>
      <tr>
        <td id="L2536" class="blob-num js-line-number" data-line-number="2536"></td>
        <td id="LC2536" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    - Preprocessor condition evaluates to true from #if up to first</span></td>
      </tr>
      <tr>
        <td id="L2537" class="blob-num js-line-number" data-line-number="2537"></td>
        <td id="LC2537" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      #else/#elif/#endif.</span></td>
      </tr>
      <tr>
        <td id="L2538" class="blob-num js-line-number" data-line-number="2538"></td>
        <td id="LC2538" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2539" class="blob-num js-line-number" data-line-number="2539"></td>
        <td id="LC2539" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    - Preprocessor condition evaluates to false from #else/#elif up</span></td>
      </tr>
      <tr>
        <td id="L2540" class="blob-num js-line-number" data-line-number="2540"></td>
        <td id="LC2540" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      to #endif.  We still perform lint checks on these lines, but</span></td>
      </tr>
      <tr>
        <td id="L2541" class="blob-num js-line-number" data-line-number="2541"></td>
        <td id="LC2541" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      these do not affect nesting stack.</span></td>
      </tr>
      <tr>
        <td id="L2542" class="blob-num js-line-number" data-line-number="2542"></td>
        <td id="LC2542" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2543" class="blob-num js-line-number" data-line-number="2543"></td>
        <td id="LC2543" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2544" class="blob-num js-line-number" data-line-number="2544"></td>
        <td id="LC2544" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      line: current line to check.</span></td>
      </tr>
      <tr>
        <td id="L2545" class="blob-num js-line-number" data-line-number="2545"></td>
        <td id="LC2545" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2546" class="blob-num js-line-number" data-line-number="2546"></td>
        <td id="LC2546" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#\s*(if|ifdef|ifndef)\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2547" class="blob-num js-line-number" data-line-number="2547"></td>
        <td id="LC2547" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Beginning of #if block, save the nesting stack here.  The saved</span></td>
      </tr>
      <tr>
        <td id="L2548" class="blob-num js-line-number" data-line-number="2548"></td>
        <td id="LC2548" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># stack will allow us to restore the parsing state in the #else case.</span></td>
      </tr>
      <tr>
        <td id="L2549" class="blob-num js-line-number" data-line-number="2549"></td>
        <td id="LC2549" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>.<span class=pl-en>append</span>(<span class=pl-en>_PreprocessorInfo</span>(<span class=pl-s1>copy</span>.<span class=pl-en>deepcopy</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>)))</td>
      </tr>
      <tr>
        <td id="L2550" class="blob-num js-line-number" data-line-number="2550"></td>
        <td id="LC2550" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#\s*(else|elif)\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2551" class="blob-num js-line-number" data-line-number="2551"></td>
        <td id="LC2551" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Beginning of #else block</span></td>
      </tr>
      <tr>
        <td id="L2552" class="blob-num js-line-number" data-line-number="2552"></td>
        <td id="LC2552" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>:</td>
      </tr>
      <tr>
        <td id="L2553" class="blob-num js-line-number" data-line-number="2553"></td>
        <td id="LC2553" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>seen_else</span>:</td>
      </tr>
      <tr>
        <td id="L2554" class="blob-num js-line-number" data-line-number="2554"></td>
        <td id="LC2554" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># This is the first #else or #elif block.  Remember the</span></td>
      </tr>
      <tr>
        <td id="L2555" class="blob-num js-line-number" data-line-number="2555"></td>
        <td id="LC2555" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># whole nesting stack up to this point.  This is what we</span></td>
      </tr>
      <tr>
        <td id="L2556" class="blob-num js-line-number" data-line-number="2556"></td>
        <td id="LC2556" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># keep after the #endif.</span></td>
      </tr>
      <tr>
        <td id="L2557" class="blob-num js-line-number" data-line-number="2557"></td>
        <td id="LC2557" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>seen_else</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2558" class="blob-num js-line-number" data-line-number="2558"></td>
        <td id="LC2558" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>stack_before_else</span> <span class=pl-c1>=</span> <span class=pl-s1>copy</span>.<span class=pl-en>deepcopy</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>)</td>
      </tr>
      <tr>
        <td id="L2559" class="blob-num js-line-number" data-line-number="2559"></td>
        <td id="LC2559" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2560" class="blob-num js-line-number" data-line-number="2560"></td>
        <td id="LC2560" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Restore the stack to how it was before the #if</span></td>
      </tr>
      <tr>
        <td id="L2561" class="blob-num js-line-number" data-line-number="2561"></td>
        <td id="LC2561" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>=</span> <span class=pl-s1>copy</span>.<span class=pl-en>deepcopy</span>(<span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>stack_before_if</span>)</td>
      </tr>
      <tr>
        <td id="L2562" class="blob-num js-line-number" data-line-number="2562"></td>
        <td id="LC2562" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2563" class="blob-num js-line-number" data-line-number="2563"></td>
        <td id="LC2563" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># TODO(unknown): unexpected #else, issue warning?</span></td>
      </tr>
      <tr>
        <td id="L2564" class="blob-num js-line-number" data-line-number="2564"></td>
        <td id="LC2564" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L2565" class="blob-num js-line-number" data-line-number="2565"></td>
        <td id="LC2565" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#\s*endif\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2566" class="blob-num js-line-number" data-line-number="2566"></td>
        <td id="LC2566" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># End of #if or #else blocks.</span></td>
      </tr>
      <tr>
        <td id="L2567" class="blob-num js-line-number" data-line-number="2567"></td>
        <td id="LC2567" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>:</td>
      </tr>
      <tr>
        <td id="L2568" class="blob-num js-line-number" data-line-number="2568"></td>
        <td id="LC2568" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If we saw an #else, we will need to restore the nesting</span></td>
      </tr>
      <tr>
        <td id="L2569" class="blob-num js-line-number" data-line-number="2569"></td>
        <td id="LC2569" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># stack to its former state before the #else, otherwise we</span></td>
      </tr>
      <tr>
        <td id="L2570" class="blob-num js-line-number" data-line-number="2570"></td>
        <td id="LC2570" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># will just continue from where we left off.</span></td>
      </tr>
      <tr>
        <td id="L2571" class="blob-num js-line-number" data-line-number="2571"></td>
        <td id="LC2571" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>seen_else</span>:</td>
      </tr>
      <tr>
        <td id="L2572" class="blob-num js-line-number" data-line-number="2572"></td>
        <td id="LC2572" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Here we can just use a shallow copy since we are the last</span></td>
      </tr>
      <tr>
        <td id="L2573" class="blob-num js-line-number" data-line-number="2573"></td>
        <td id="LC2573" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># reference to it.</span></td>
      </tr>
      <tr>
        <td id="L2574" class="blob-num js-line-number" data-line-number="2574"></td>
        <td id="LC2574" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>stack_before_else</span></td>
      </tr>
      <tr>
        <td id="L2575" class="blob-num js-line-number" data-line-number="2575"></td>
        <td id="LC2575" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Drop the corresponding #if</span></td>
      </tr>
      <tr>
        <td id="L2576" class="blob-num js-line-number" data-line-number="2576"></td>
        <td id="LC2576" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>pp_stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L2577" class="blob-num js-line-number" data-line-number="2577"></td>
        <td id="LC2577" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2578" class="blob-num js-line-number" data-line-number="2578"></td>
        <td id="LC2578" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># TODO(unknown): unexpected #endif, issue warning?</span></td>
      </tr>
      <tr>
        <td id="L2579" class="blob-num js-line-number" data-line-number="2579"></td>
        <td id="LC2579" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L2580" class="blob-num js-line-number" data-line-number="2580"></td>
        <td id="LC2580" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2581" class="blob-num js-line-number" data-line-number="2581"></td>
        <td id="LC2581" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Update() is too long, but we will refactor later.</span></td>
      </tr>
      <tr>
        <td id="L2582" class="blob-num js-line-number" data-line-number="2582"></td>
        <td id="LC2582" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>Update</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2583" class="blob-num js-line-number" data-line-number="2583"></td>
        <td id="LC2583" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Update nesting state with current line.</span></td>
      </tr>
      <tr>
        <td id="L2584" class="blob-num js-line-number" data-line-number="2584"></td>
        <td id="LC2584" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2585" class="blob-num js-line-number" data-line-number="2585"></td>
        <td id="LC2585" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2586" class="blob-num js-line-number" data-line-number="2586"></td>
        <td id="LC2586" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2587" class="blob-num js-line-number" data-line-number="2587"></td>
        <td id="LC2587" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2588" class="blob-num js-line-number" data-line-number="2588"></td>
        <td id="LC2588" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2589" class="blob-num js-line-number" data-line-number="2589"></td>
        <td id="LC2589" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2590" class="blob-num js-line-number" data-line-number="2590"></td>
        <td id="LC2590" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2591" class="blob-num js-line-number" data-line-number="2591"></td>
        <td id="LC2591" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2592" class="blob-num js-line-number" data-line-number="2592"></td>
        <td id="LC2592" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2593" class="blob-num js-line-number" data-line-number="2593"></td>
        <td id="LC2593" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Remember top of the previous nesting stack.</span></td>
      </tr>
      <tr>
        <td id="L2594" class="blob-num js-line-number" data-line-number="2594"></td>
        <td id="LC2594" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2595" class="blob-num js-line-number" data-line-number="2595"></td>
        <td id="LC2595" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The stack is always pushed/popped and not modified in place, so</span></td>
      </tr>
      <tr>
        <td id="L2596" class="blob-num js-line-number" data-line-number="2596"></td>
        <td id="LC2596" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># we can just do a shallow copy instead of copy.deepcopy.  Using</span></td>
      </tr>
      <tr>
        <td id="L2597" class="blob-num js-line-number" data-line-number="2597"></td>
        <td id="LC2597" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># deepcopy would slow down cpplint by ~28%.</span></td>
      </tr>
      <tr>
        <td id="L2598" class="blob-num js-line-number" data-line-number="2598"></td>
        <td id="LC2598" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L2599" class="blob-num js-line-number" data-line-number="2599"></td>
        <td id="LC2599" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>previous_stack_top</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2600" class="blob-num js-line-number" data-line-number="2600"></td>
        <td id="LC2600" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2601" class="blob-num js-line-number" data-line-number="2601"></td>
        <td id="LC2601" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>previous_stack_top</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L2602" class="blob-num js-line-number" data-line-number="2602"></td>
        <td id="LC2602" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2603" class="blob-num js-line-number" data-line-number="2603"></td>
        <td id="LC2603" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Update pp_stack</span></td>
      </tr>
      <tr>
        <td id="L2604" class="blob-num js-line-number" data-line-number="2604"></td>
        <td id="LC2604" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>self</span>.<span class=pl-v>UpdatePreprocessor</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2605" class="blob-num js-line-number" data-line-number="2605"></td>
        <td id="LC2605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2606" class="blob-num js-line-number" data-line-number="2606"></td>
        <td id="LC2606" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Count parentheses.  This is to avoid adding struct arguments to</span></td>
      </tr>
      <tr>
        <td id="L2607" class="blob-num js-line-number" data-line-number="2607"></td>
        <td id="LC2607" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the nesting stack.</span></td>
      </tr>
      <tr>
        <td id="L2608" class="blob-num js-line-number" data-line-number="2608"></td>
        <td id="LC2608" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L2609" class="blob-num js-line-number" data-line-number="2609"></td>
        <td id="LC2609" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>inner_block</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2610" class="blob-num js-line-number" data-line-number="2610"></td>
        <td id="LC2610" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>depth_change</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;(&#39;</span>) <span class=pl-c1>-</span> <span class=pl-s1>line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2611" class="blob-num js-line-number" data-line-number="2611"></td>
        <td id="LC2611" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>inner_block</span>.<span class=pl-s1>open_parentheses</span> <span class=pl-c1>+=</span> <span class=pl-s1>depth_change</span></td>
      </tr>
      <tr>
        <td id="L2612" class="blob-num js-line-number" data-line-number="2612"></td>
        <td id="LC2612" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2613" class="blob-num js-line-number" data-line-number="2613"></td>
        <td id="LC2613" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Also check if we are starting or ending an inline assembly block.</span></td>
      </tr>
      <tr>
        <td id="L2614" class="blob-num js-line-number" data-line-number="2614"></td>
        <td id="LC2614" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>inner_block</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>in</span> (<span class=pl-s1>_NO_ASM</span>, <span class=pl-s1>_END_ASM</span>):</td>
      </tr>
      <tr>
        <td id="L2615" class="blob-num js-line-number" data-line-number="2615"></td>
        <td id="LC2615" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> (<span class=pl-s1>depth_change</span> <span class=pl-c1>!=</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2616" class="blob-num js-line-number" data-line-number="2616"></td>
        <td id="LC2616" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>inner_block</span>.<span class=pl-s1>open_parentheses</span> <span class=pl-c1>==</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2617" class="blob-num js-line-number" data-line-number="2617"></td>
        <td id="LC2617" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>_MATCH_ASM</span>.<span class=pl-en>match</span>(<span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L2618" class="blob-num js-line-number" data-line-number="2618"></td>
        <td id="LC2618" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Enter assembly block</span></td>
      </tr>
      <tr>
        <td id="L2619" class="blob-num js-line-number" data-line-number="2619"></td>
        <td id="LC2619" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>inner_block</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>=</span> <span class=pl-s1>_INSIDE_ASM</span></td>
      </tr>
      <tr>
        <td id="L2620" class="blob-num js-line-number" data-line-number="2620"></td>
        <td id="LC2620" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2621" class="blob-num js-line-number" data-line-number="2621"></td>
        <td id="LC2621" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Not entering assembly block.  If previous line was _END_ASM,</span></td>
      </tr>
      <tr>
        <td id="L2622" class="blob-num js-line-number" data-line-number="2622"></td>
        <td id="LC2622" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># we will now shift to _NO_ASM state.</span></td>
      </tr>
      <tr>
        <td id="L2623" class="blob-num js-line-number" data-line-number="2623"></td>
        <td id="LC2623" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>inner_block</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>=</span> <span class=pl-s1>_NO_ASM</span></td>
      </tr>
      <tr>
        <td id="L2624" class="blob-num js-line-number" data-line-number="2624"></td>
        <td id="LC2624" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> (<span class=pl-s1>inner_block</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>==</span> <span class=pl-s1>_INSIDE_ASM</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2625" class="blob-num js-line-number" data-line-number="2625"></td>
        <td id="LC2625" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>inner_block</span>.<span class=pl-s1>open_parentheses</span> <span class=pl-c1>==</span> <span class=pl-c1>0</span>):</td>
      </tr>
      <tr>
        <td id="L2626" class="blob-num js-line-number" data-line-number="2626"></td>
        <td id="LC2626" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Exit assembly block</span></td>
      </tr>
      <tr>
        <td id="L2627" class="blob-num js-line-number" data-line-number="2627"></td>
        <td id="LC2627" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>inner_block</span>.<span class=pl-s1>inline_asm</span> <span class=pl-c1>=</span> <span class=pl-s1>_END_ASM</span></td>
      </tr>
      <tr>
        <td id="L2628" class="blob-num js-line-number" data-line-number="2628"></td>
        <td id="LC2628" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2629" class="blob-num js-line-number" data-line-number="2629"></td>
        <td id="LC2629" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Consume namespace declaration at the beginning of the line.  Do</span></td>
      </tr>
      <tr>
        <td id="L2630" class="blob-num js-line-number" data-line-number="2630"></td>
        <td id="LC2630" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># this in a loop so that we catch same line declarations like this:</span></td>
      </tr>
      <tr>
        <td id="L2631" class="blob-num js-line-number" data-line-number="2631"></td>
        <td id="LC2631" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   namespace proto2 { namespace bridge { class MessageSet; } }</span></td>
      </tr>
      <tr>
        <td id="L2632" class="blob-num js-line-number" data-line-number="2632"></td>
        <td id="LC2632" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>
      </tr>
      <tr>
        <td id="L2633" class="blob-num js-line-number" data-line-number="2633"></td>
        <td id="LC2633" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Match start of namespace.  The &quot;\b\s*&quot; below catches namespace</span></td>
      </tr>
      <tr>
        <td id="L2634" class="blob-num js-line-number" data-line-number="2634"></td>
        <td id="LC2634" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># declarations even if it weren&#39;t followed by a whitespace, this</span></td>
      </tr>
      <tr>
        <td id="L2635" class="blob-num js-line-number" data-line-number="2635"></td>
        <td id="LC2635" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># is so that we don&#39;t confuse our namespace checker.  The</span></td>
      </tr>
      <tr>
        <td id="L2636" class="blob-num js-line-number" data-line-number="2636"></td>
        <td id="LC2636" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># missing spaces will be flagged by CheckSpacing.</span></td>
      </tr>
      <tr>
        <td id="L2637" class="blob-num js-line-number" data-line-number="2637"></td>
        <td id="LC2637" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>namespace_decl_match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*namespace\b\s*([:\w]+)?(.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2638" class="blob-num js-line-number" data-line-number="2638"></td>
        <td id="LC2638" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>namespace_decl_match</span>:</td>
      </tr>
      <tr>
        <td id="L2639" class="blob-num js-line-number" data-line-number="2639"></td>
        <td id="LC2639" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L2640" class="blob-num js-line-number" data-line-number="2640"></td>
        <td id="LC2640" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2641" class="blob-num js-line-number" data-line-number="2641"></td>
        <td id="LC2641" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>new_namespace</span> <span class=pl-c1>=</span> <span class=pl-en>_NamespaceInfo</span>(<span class=pl-s1>namespace_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>), <span class=pl-s1>linenum</span>)</td>
      </tr>
      <tr>
        <td id="L2642" class="blob-num js-line-number" data-line-number="2642"></td>
        <td id="LC2642" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-s1>new_namespace</span>)</td>
      </tr>
      <tr>
        <td id="L2643" class="blob-num js-line-number" data-line-number="2643"></td>
        <td id="LC2643" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2644" class="blob-num js-line-number" data-line-number="2644"></td>
        <td id="LC2644" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>namespace_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L2645" class="blob-num js-line-number" data-line-number="2645"></td>
        <td id="LC2645" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;{&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L2646" class="blob-num js-line-number" data-line-number="2646"></td>
        <td id="LC2646" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>new_namespace</span>.<span class=pl-s1>seen_open_brace</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2647" class="blob-num js-line-number" data-line-number="2647"></td>
        <td id="LC2647" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;{&#39;</span>) <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L2648" class="blob-num js-line-number" data-line-number="2648"></td>
        <td id="LC2648" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2649" class="blob-num js-line-number" data-line-number="2649"></td>
        <td id="LC2649" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for a class declaration in whatever is left of the line</span></td>
      </tr>
      <tr>
        <td id="L2650" class="blob-num js-line-number" data-line-number="2650"></td>
        <td id="LC2650" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># after parsing namespaces.  The regexp accounts for decorated classes</span></td>
      </tr>
      <tr>
        <td id="L2651" class="blob-num js-line-number" data-line-number="2651"></td>
        <td id="LC2651" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># such as in:</span></td>
      </tr>
      <tr>
        <td id="L2652" class="blob-num js-line-number" data-line-number="2652"></td>
        <td id="LC2652" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   class LOCKABLE API Object {</span></td>
      </tr>
      <tr>
        <td id="L2653" class="blob-num js-line-number" data-line-number="2653"></td>
        <td id="LC2653" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   };</span></td>
      </tr>
      <tr>
        <td id="L2654" class="blob-num js-line-number" data-line-number="2654"></td>
        <td id="LC2654" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>class_decl_match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(</td>
      </tr>
      <tr>
        <td id="L2655" class="blob-num js-line-number" data-line-number="2655"></td>
        <td id="LC2655" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>r&#39;^(\s*(?:template\s*&lt;[\w\s&lt;&gt;,:]*&gt;\s*)?&#39;</span></td>
      </tr>
      <tr>
        <td id="L2656" class="blob-num js-line-number" data-line-number="2656"></td>
        <td id="LC2656" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>r&#39;(class|struct)\s+(?:[A-Z_]+\s+)*(\w+(?:::\w+)*))&#39;</span></td>
      </tr>
      <tr>
        <td id="L2657" class="blob-num js-line-number" data-line-number="2657"></td>
        <td id="LC2657" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>r&#39;(.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2658" class="blob-num js-line-number" data-line-number="2658"></td>
        <td id="LC2658" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>class_decl_match</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2659" class="blob-num js-line-number" data-line-number="2659"></td>
        <td id="LC2659" class="blob-code blob-code-inner js-file-line">        (<span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>or</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>open_parentheses</span> <span class=pl-c1>==</span> <span class=pl-c1>0</span>)):</td>
      </tr>
      <tr>
        <td id="L2660" class="blob-num js-line-number" data-line-number="2660"></td>
        <td id="LC2660" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># We do not want to accept classes that are actually template arguments:</span></td>
      </tr>
      <tr>
        <td id="L2661" class="blob-num js-line-number" data-line-number="2661"></td>
        <td id="LC2661" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   template &lt;class Ignore1,</span></td>
      </tr>
      <tr>
        <td id="L2662" class="blob-num js-line-number" data-line-number="2662"></td>
        <td id="LC2662" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#             class Ignore2 = Default&lt;Args&gt;,</span></td>
      </tr>
      <tr>
        <td id="L2663" class="blob-num js-line-number" data-line-number="2663"></td>
        <td id="LC2663" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#             template &lt;Args&gt; class Ignore3&gt;</span></td>
      </tr>
      <tr>
        <td id="L2664" class="blob-num js-line-number" data-line-number="2664"></td>
        <td id="LC2664" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   void Function() {};</span></td>
      </tr>
      <tr>
        <td id="L2665" class="blob-num js-line-number" data-line-number="2665"></td>
        <td id="LC2665" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2666" class="blob-num js-line-number" data-line-number="2666"></td>
        <td id="LC2666" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># To avoid template argument cases, we scan forward and look for</span></td>
      </tr>
      <tr>
        <td id="L2667" class="blob-num js-line-number" data-line-number="2667"></td>
        <td id="LC2667" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># an unmatched &#39;&gt;&#39;.  If we see one, assume we are inside a</span></td>
      </tr>
      <tr>
        <td id="L2668" class="blob-num js-line-number" data-line-number="2668"></td>
        <td id="LC2668" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># template argument list.</span></td>
      </tr>
      <tr>
        <td id="L2669" class="blob-num js-line-number" data-line-number="2669"></td>
        <td id="LC2669" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>end_declaration</span> <span class=pl-c1>=</span> <span class=pl-en>len</span>(<span class=pl-s1>class_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L2670" class="blob-num js-line-number" data-line-number="2670"></td>
        <td id="LC2670" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-v>InTemplateArgumentList</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>end_declaration</span>):</td>
      </tr>
      <tr>
        <td id="L2671" class="blob-num js-line-number" data-line-number="2671"></td>
        <td id="LC2671" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-en>_ClassInfo</span>(</td>
      </tr>
      <tr>
        <td id="L2672" class="blob-num js-line-number" data-line-number="2672"></td>
        <td id="LC2672" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>class_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>), <span class=pl-s1>class_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>),</td>
      </tr>
      <tr>
        <td id="L2673" class="blob-num js-line-number" data-line-number="2673"></td>
        <td id="LC2673" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>))</td>
      </tr>
      <tr>
        <td id="L2674" class="blob-num js-line-number" data-line-number="2674"></td>
        <td id="LC2674" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>class_decl_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>4</span>)</td>
      </tr>
      <tr>
        <td id="L2675" class="blob-num js-line-number" data-line-number="2675"></td>
        <td id="LC2675" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2676" class="blob-num js-line-number" data-line-number="2676"></td>
        <td id="LC2676" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If we have not yet seen the opening brace for the innermost block,</span></td>
      </tr>
      <tr>
        <td id="L2677" class="blob-num js-line-number" data-line-number="2677"></td>
        <td id="LC2677" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># run checks here.</span></td>
      </tr>
      <tr>
        <td id="L2678" class="blob-num js-line-number" data-line-number="2678"></td>
        <td id="LC2678" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-v>SeenOpenBrace</span>():</td>
      </tr>
      <tr>
        <td id="L2679" class="blob-num js-line-number" data-line-number="2679"></td>
        <td id="LC2679" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-v>CheckBegin</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L2680" class="blob-num js-line-number" data-line-number="2680"></td>
        <td id="LC2680" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2681" class="blob-num js-line-number" data-line-number="2681"></td>
        <td id="LC2681" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Update access control if we are inside a class/struct</span></td>
      </tr>
      <tr>
        <td id="L2682" class="blob-num js-line-number" data-line-number="2682"></td>
        <td id="LC2682" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span> <span class=pl-c1>and</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>_ClassInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2683" class="blob-num js-line-number" data-line-number="2683"></td>
        <td id="LC2683" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>classinfo</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2684" class="blob-num js-line-number" data-line-number="2684"></td>
        <td id="LC2684" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>access_match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(</td>
      </tr>
      <tr>
        <td id="L2685" class="blob-num js-line-number" data-line-number="2685"></td>
        <td id="LC2685" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>r&#39;^(.*)\b(public|private|protected|signals)(\s+(?:slots\s*)?)?&#39;</span></td>
      </tr>
      <tr>
        <td id="L2686" class="blob-num js-line-number" data-line-number="2686"></td>
        <td id="LC2686" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>r&#39;:(?:[^:]|$)&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2687" class="blob-num js-line-number" data-line-number="2687"></td>
        <td id="LC2687" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2688" class="blob-num js-line-number" data-line-number="2688"></td>
        <td id="LC2688" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>access_match</span>:</td>
      </tr>
      <tr>
        <td id="L2689" class="blob-num js-line-number" data-line-number="2689"></td>
        <td id="LC2689" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>classinfo</span>.<span class=pl-s1>access</span> <span class=pl-c1>=</span> <span class=pl-s1>access_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L2690" class="blob-num js-line-number" data-line-number="2690"></td>
        <td id="LC2690" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2691" class="blob-num js-line-number" data-line-number="2691"></td>
        <td id="LC2691" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Check that access keywords are indented +1 space.  Skip this</span></td>
      </tr>
      <tr>
        <td id="L2692" class="blob-num js-line-number" data-line-number="2692"></td>
        <td id="LC2692" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># check if the keywords are not preceded by whitespaces.</span></td>
      </tr>
      <tr>
        <td id="L2693" class="blob-num js-line-number" data-line-number="2693"></td>
        <td id="LC2693" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>indent</span> <span class=pl-c1>=</span> <span class=pl-s1>access_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L2694" class="blob-num js-line-number" data-line-number="2694"></td>
        <td id="LC2694" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> (<span class=pl-en>len</span>(<span class=pl-s1>indent</span>) <span class=pl-c1>!=</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>class_indent</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2695" class="blob-num js-line-number" data-line-number="2695"></td>
        <td id="LC2695" class="blob-code blob-code-inner js-file-line">            <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*$&#39;</span>, <span class=pl-s1>indent</span>)):</td>
      </tr>
      <tr>
        <td id="L2696" class="blob-num js-line-number" data-line-number="2696"></td>
        <td id="LC2696" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>is_struct</span>:</td>
      </tr>
      <tr>
        <td id="L2697" class="blob-num js-line-number" data-line-number="2697"></td>
        <td id="LC2697" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>parent</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;struct &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>name</span></td>
      </tr>
      <tr>
        <td id="L2698" class="blob-num js-line-number" data-line-number="2698"></td>
        <td id="LC2698" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2699" class="blob-num js-line-number" data-line-number="2699"></td>
        <td id="LC2699" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>parent</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;class &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>name</span></td>
      </tr>
      <tr>
        <td id="L2700" class="blob-num js-line-number" data-line-number="2700"></td>
        <td id="LC2700" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>slots</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L2701" class="blob-num js-line-number" data-line-number="2701"></td>
        <td id="LC2701" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>access_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>):</td>
      </tr>
      <tr>
        <td id="L2702" class="blob-num js-line-number" data-line-number="2702"></td>
        <td id="LC2702" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>slots</span> <span class=pl-c1>=</span> <span class=pl-s1>access_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)</td>
      </tr>
      <tr>
        <td id="L2703" class="blob-num js-line-number" data-line-number="2703"></td>
        <td id="LC2703" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/indent&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2704" class="blob-num js-line-number" data-line-number="2704"></td>
        <td id="LC2704" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;%s%s: should be indented +1 space inside %s&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L2705" class="blob-num js-line-number" data-line-number="2705"></td>
        <td id="LC2705" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>access_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>), <span class=pl-s1>slots</span>, <span class=pl-s1>parent</span>))</td>
      </tr>
      <tr>
        <td id="L2706" class="blob-num js-line-number" data-line-number="2706"></td>
        <td id="LC2706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2707" class="blob-num js-line-number" data-line-number="2707"></td>
        <td id="LC2707" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Consume braces or semicolons from what&#39;s left of the line</span></td>
      </tr>
      <tr>
        <td id="L2708" class="blob-num js-line-number" data-line-number="2708"></td>
        <td id="LC2708" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>
      </tr>
      <tr>
        <td id="L2709" class="blob-num js-line-number" data-line-number="2709"></td>
        <td id="LC2709" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Match first brace, semicolon, or closed parenthesis.</span></td>
      </tr>
      <tr>
        <td id="L2710" class="blob-num js-line-number" data-line-number="2710"></td>
        <td id="LC2710" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^[^{;)}]*([{;)}])(.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2711" class="blob-num js-line-number" data-line-number="2711"></td>
        <td id="LC2711" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L2712" class="blob-num js-line-number" data-line-number="2712"></td>
        <td id="LC2712" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L2713" class="blob-num js-line-number" data-line-number="2713"></td>
        <td id="LC2713" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2714" class="blob-num js-line-number" data-line-number="2714"></td>
        <td id="LC2714" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>token</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L2715" class="blob-num js-line-number" data-line-number="2715"></td>
        <td id="LC2715" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>token</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;{&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L2716" class="blob-num js-line-number" data-line-number="2716"></td>
        <td id="LC2716" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If namespace or class hasn&#39;t seen a opening brace yet, mark</span></td>
      </tr>
      <tr>
        <td id="L2717" class="blob-num js-line-number" data-line-number="2717"></td>
        <td id="LC2717" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># namespace/class head as complete.  Push a new block onto the</span></td>
      </tr>
      <tr>
        <td id="L2718" class="blob-num js-line-number" data-line-number="2718"></td>
        <td id="LC2718" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># stack otherwise.</span></td>
      </tr>
      <tr>
        <td id="L2719" class="blob-num js-line-number" data-line-number="2719"></td>
        <td id="LC2719" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-v>SeenOpenBrace</span>():</td>
      </tr>
      <tr>
        <td id="L2720" class="blob-num js-line-number" data-line-number="2720"></td>
        <td id="LC2720" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>seen_open_brace</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L2721" class="blob-num js-line-number" data-line-number="2721"></td>
        <td id="LC2721" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>elif</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^extern\s*&quot;[^&quot;]*&quot;\s*\{&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2722" class="blob-num js-line-number" data-line-number="2722"></td>
        <td id="LC2722" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-en>_ExternCInfo</span>(<span class=pl-s1>linenum</span>))</td>
      </tr>
      <tr>
        <td id="L2723" class="blob-num js-line-number" data-line-number="2723"></td>
        <td id="LC2723" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2724" class="blob-num js-line-number" data-line-number="2724"></td>
        <td id="LC2724" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>append</span>(<span class=pl-en>_BlockInfo</span>(<span class=pl-s1>linenum</span>, <span class=pl-c1>True</span>))</td>
      </tr>
      <tr>
        <td id="L2725" class="blob-num js-line-number" data-line-number="2725"></td>
        <td id="LC2725" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>_MATCH_ASM</span>.<span class=pl-en>match</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2726" class="blob-num js-line-number" data-line-number="2726"></td>
        <td id="LC2726" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>inline_asm</span> <span class=pl-c1>=</span> <span class=pl-s1>_BLOCK_ASM</span></td>
      </tr>
      <tr>
        <td id="L2727" class="blob-num js-line-number" data-line-number="2727"></td>
        <td id="LC2727" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2728" class="blob-num js-line-number" data-line-number="2728"></td>
        <td id="LC2728" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-s1>token</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;;&#39;</span> <span class=pl-c1>or</span> <span class=pl-s1>token</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;)&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L2729" class="blob-num js-line-number" data-line-number="2729"></td>
        <td id="LC2729" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If we haven&#39;t seen an opening brace yet, but we already saw</span></td>
      </tr>
      <tr>
        <td id="L2730" class="blob-num js-line-number" data-line-number="2730"></td>
        <td id="LC2730" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># a semicolon, this is probably a forward declaration.  Pop</span></td>
      </tr>
      <tr>
        <td id="L2731" class="blob-num js-line-number" data-line-number="2731"></td>
        <td id="LC2731" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># the stack for these.</span></td>
      </tr>
      <tr>
        <td id="L2732" class="blob-num js-line-number" data-line-number="2732"></td>
        <td id="LC2732" class="blob-code blob-code-inner js-file-line">        <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L2733" class="blob-num js-line-number" data-line-number="2733"></td>
        <td id="LC2733" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Similarly, if we haven&#39;t seen an opening brace yet, but we</span></td>
      </tr>
      <tr>
        <td id="L2734" class="blob-num js-line-number" data-line-number="2734"></td>
        <td id="LC2734" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># already saw a closing parenthesis, then these are probably</span></td>
      </tr>
      <tr>
        <td id="L2735" class="blob-num js-line-number" data-line-number="2735"></td>
        <td id="LC2735" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># function arguments with extra &quot;class&quot; or &quot;struct&quot; keywords.</span></td>
      </tr>
      <tr>
        <td id="L2736" class="blob-num js-line-number" data-line-number="2736"></td>
        <td id="LC2736" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Also pop these stack for these.</span></td>
      </tr>
      <tr>
        <td id="L2737" class="blob-num js-line-number" data-line-number="2737"></td>
        <td id="LC2737" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>self</span>.<span class=pl-v>SeenOpenBrace</span>():</td>
      </tr>
      <tr>
        <td id="L2738" class="blob-num js-line-number" data-line-number="2738"></td>
        <td id="LC2738" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L2739" class="blob-num js-line-number" data-line-number="2739"></td>
        <td id="LC2739" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:  <span class=pl-c># token == &#39;}&#39;</span></td>
      </tr>
      <tr>
        <td id="L2740" class="blob-num js-line-number" data-line-number="2740"></td>
        <td id="LC2740" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Perform end of block checks and pop the stack.</span></td>
      </tr>
      <tr>
        <td id="L2741" class="blob-num js-line-number" data-line-number="2741"></td>
        <td id="LC2741" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L2742" class="blob-num js-line-number" data-line-number="2742"></td>
        <td id="LC2742" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-v>CheckEnd</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L2743" class="blob-num js-line-number" data-line-number="2743"></td>
        <td id="LC2743" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L2744" class="blob-num js-line-number" data-line-number="2744"></td>
        <td id="LC2744" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L2745" class="blob-num js-line-number" data-line-number="2745"></td>
        <td id="LC2745" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2746" class="blob-num js-line-number" data-line-number="2746"></td>
        <td id="LC2746" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>InnermostClass</span>(<span class=pl-s1>self</span>):</td>
      </tr>
      <tr>
        <td id="L2747" class="blob-num js-line-number" data-line-number="2747"></td>
        <td id="LC2747" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Get class info on the top of the stack.</span></td>
      </tr>
      <tr>
        <td id="L2748" class="blob-num js-line-number" data-line-number="2748"></td>
        <td id="LC2748" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2749" class="blob-num js-line-number" data-line-number="2749"></td>
        <td id="LC2749" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Returns:</span></td>
      </tr>
      <tr>
        <td id="L2750" class="blob-num js-line-number" data-line-number="2750"></td>
        <td id="LC2750" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      A _ClassInfo object if we are inside a class, or None otherwise.</span></td>
      </tr>
      <tr>
        <td id="L2751" class="blob-num js-line-number" data-line-number="2751"></td>
        <td id="LC2751" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2752" class="blob-num js-line-number" data-line-number="2752"></td>
        <td id="LC2752" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-en>len</span>(<span class=pl-s1>self</span>.<span class=pl-s1>stack</span>), <span class=pl-c1>0</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L2753" class="blob-num js-line-number" data-line-number="2753"></td>
        <td id="LC2753" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>classinfo</span> <span class=pl-c1>=</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>[<span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2754" class="blob-num js-line-number" data-line-number="2754"></td>
        <td id="LC2754" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>classinfo</span>, <span class=pl-s1>_ClassInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2755" class="blob-num js-line-number" data-line-number="2755"></td>
        <td id="LC2755" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-s1>classinfo</span></td>
      </tr>
      <tr>
        <td id="L2756" class="blob-num js-line-number" data-line-number="2756"></td>
        <td id="LC2756" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L2757" class="blob-num js-line-number" data-line-number="2757"></td>
        <td id="LC2757" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2758" class="blob-num js-line-number" data-line-number="2758"></td>
        <td id="LC2758" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>def</span> <span class=pl-v>CheckCompletedBlocks</span>(<span class=pl-s1>self</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2759" class="blob-num js-line-number" data-line-number="2759"></td>
        <td id="LC2759" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>&quot;&quot;&quot;Checks that all classes and namespaces have been completely parsed.</span></td>
      </tr>
      <tr>
        <td id="L2760" class="blob-num js-line-number" data-line-number="2760"></td>
        <td id="LC2760" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2761" class="blob-num js-line-number" data-line-number="2761"></td>
        <td id="LC2761" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Call this when all lines in a file have been processed.</span></td>
      </tr>
      <tr>
        <td id="L2762" class="blob-num js-line-number" data-line-number="2762"></td>
        <td id="LC2762" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Args:</span></td>
      </tr>
      <tr>
        <td id="L2763" class="blob-num js-line-number" data-line-number="2763"></td>
        <td id="LC2763" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2764" class="blob-num js-line-number" data-line-number="2764"></td>
        <td id="LC2764" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2765" class="blob-num js-line-number" data-line-number="2765"></td>
        <td id="LC2765" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2766" class="blob-num js-line-number" data-line-number="2766"></td>
        <td id="LC2766" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Note: This test can result in false positives if #ifdef constructs</span></td>
      </tr>
      <tr>
        <td id="L2767" class="blob-num js-line-number" data-line-number="2767"></td>
        <td id="LC2767" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># get in the way of brace matching. See the testBuildClass test in</span></td>
      </tr>
      <tr>
        <td id="L2768" class="blob-num js-line-number" data-line-number="2768"></td>
        <td id="LC2768" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># cpplint_unittest.py for an example of this.</span></td>
      </tr>
      <tr>
        <td id="L2769" class="blob-num js-line-number" data-line-number="2769"></td>
        <td id="LC2769" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>obj</span> <span class=pl-c1>in</span> <span class=pl-s1>self</span>.<span class=pl-s1>stack</span>:</td>
      </tr>
      <tr>
        <td id="L2770" class="blob-num js-line-number" data-line-number="2770"></td>
        <td id="LC2770" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>obj</span>, <span class=pl-s1>_ClassInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2771" class="blob-num js-line-number" data-line-number="2771"></td>
        <td id="LC2771" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>obj</span>.<span class=pl-s1>starting_linenum</span>, <span class=pl-s>&#39;build/class&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2772" class="blob-num js-line-number" data-line-number="2772"></td>
        <td id="LC2772" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Failed to find complete declaration of class %s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L2773" class="blob-num js-line-number" data-line-number="2773"></td>
        <td id="LC2773" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>obj</span>.<span class=pl-s1>name</span>)</td>
      </tr>
      <tr>
        <td id="L2774" class="blob-num js-line-number" data-line-number="2774"></td>
        <td id="LC2774" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>obj</span>, <span class=pl-s1>_NamespaceInfo</span>):</td>
      </tr>
      <tr>
        <td id="L2775" class="blob-num js-line-number" data-line-number="2775"></td>
        <td id="LC2775" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>obj</span>.<span class=pl-s1>starting_linenum</span>, <span class=pl-s>&#39;build/namespaces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2776" class="blob-num js-line-number" data-line-number="2776"></td>
        <td id="LC2776" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Failed to find complete declaration of namespace %s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L2777" class="blob-num js-line-number" data-line-number="2777"></td>
        <td id="LC2777" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>obj</span>.<span class=pl-s1>name</span>)</td>
      </tr>
      <tr>
        <td id="L2778" class="blob-num js-line-number" data-line-number="2778"></td>
        <td id="LC2778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2779" class="blob-num js-line-number" data-line-number="2779"></td>
        <td id="LC2779" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2780" class="blob-num js-line-number" data-line-number="2780"></td>
        <td id="LC2780" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForNonStandardConstructs</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>,</td>
      </tr>
      <tr>
        <td id="L2781" class="blob-num js-line-number" data-line-number="2781"></td>
        <td id="LC2781" class="blob-code blob-code-inner js-file-line">                                  <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2782" class="blob-num js-line-number" data-line-number="2782"></td>
        <td id="LC2782" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>r&quot;&quot;&quot;Logs an error if we see certain non-ANSI constructs ignored by gcc-2.</span></td>
      </tr>
      <tr>
        <td id="L2783" class="blob-num js-line-number" data-line-number="2783"></td>
        <td id="LC2783" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2784" class="blob-num js-line-number" data-line-number="2784"></td>
        <td id="LC2784" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Complain about several constructs which gcc-2 accepts, but which are</span></td>
      </tr>
      <tr>
        <td id="L2785" class="blob-num js-line-number" data-line-number="2785"></td>
        <td id="LC2785" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  not standard C++.  Warning about these in lint is one way to ease the</span></td>
      </tr>
      <tr>
        <td id="L2786" class="blob-num js-line-number" data-line-number="2786"></td>
        <td id="LC2786" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  transition to new compilers.</span></td>
      </tr>
      <tr>
        <td id="L2787" class="blob-num js-line-number" data-line-number="2787"></td>
        <td id="LC2787" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - put storage class first (e.g. &quot;static const&quot; instead of &quot;const static&quot;).</span></td>
      </tr>
      <tr>
        <td id="L2788" class="blob-num js-line-number" data-line-number="2788"></td>
        <td id="LC2788" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - &quot;%lld&quot; instead of %qd&quot; in printf-type functions.</span></td>
      </tr>
      <tr>
        <td id="L2789" class="blob-num js-line-number" data-line-number="2789"></td>
        <td id="LC2789" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - &quot;%1$d&quot; is non-standard in printf-type functions.</span></td>
      </tr>
      <tr>
        <td id="L2790" class="blob-num js-line-number" data-line-number="2790"></td>
        <td id="LC2790" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - &quot;\%&quot; is an undefined character escape sequence.</span></td>
      </tr>
      <tr>
        <td id="L2791" class="blob-num js-line-number" data-line-number="2791"></td>
        <td id="LC2791" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - text after #endif is not allowed.</span></td>
      </tr>
      <tr>
        <td id="L2792" class="blob-num js-line-number" data-line-number="2792"></td>
        <td id="LC2792" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - invalid inner-style forward declaration.</span></td>
      </tr>
      <tr>
        <td id="L2793" class="blob-num js-line-number" data-line-number="2793"></td>
        <td id="LC2793" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  - &gt;? and &lt;? operators, and their &gt;?= and &lt;?= cousins.</span></td>
      </tr>
      <tr>
        <td id="L2794" class="blob-num js-line-number" data-line-number="2794"></td>
        <td id="LC2794" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2795" class="blob-num js-line-number" data-line-number="2795"></td>
        <td id="LC2795" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Additionally, check for constructor/destructor style violations and reference</span></td>
      </tr>
      <tr>
        <td id="L2796" class="blob-num js-line-number" data-line-number="2796"></td>
        <td id="LC2796" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  members, as it is very convenient to do so while checking for</span></td>
      </tr>
      <tr>
        <td id="L2797" class="blob-num js-line-number" data-line-number="2797"></td>
        <td id="LC2797" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  gcc-2 compliance.</span></td>
      </tr>
      <tr>
        <td id="L2798" class="blob-num js-line-number" data-line-number="2798"></td>
        <td id="LC2798" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2799" class="blob-num js-line-number" data-line-number="2799"></td>
        <td id="LC2799" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2800" class="blob-num js-line-number" data-line-number="2800"></td>
        <td id="LC2800" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2801" class="blob-num js-line-number" data-line-number="2801"></td>
        <td id="LC2801" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2802" class="blob-num js-line-number" data-line-number="2802"></td>
        <td id="LC2802" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2803" class="blob-num js-line-number" data-line-number="2803"></td>
        <td id="LC2803" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L2804" class="blob-num js-line-number" data-line-number="2804"></td>
        <td id="LC2804" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L2805" class="blob-num js-line-number" data-line-number="2805"></td>
        <td id="LC2805" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: A callable to which errors are reported, which takes 4 arguments:</span></td>
      </tr>
      <tr>
        <td id="L2806" class="blob-num js-line-number" data-line-number="2806"></td>
        <td id="LC2806" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           filename, line number, error level, and message</span></td>
      </tr>
      <tr>
        <td id="L2807" class="blob-num js-line-number" data-line-number="2807"></td>
        <td id="LC2807" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2808" class="blob-num js-line-number" data-line-number="2808"></td>
        <td id="LC2808" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2809" class="blob-num js-line-number" data-line-number="2809"></td>
        <td id="LC2809" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Remove comments from the line, but leave in strings for now.</span></td>
      </tr>
      <tr>
        <td id="L2810" class="blob-num js-line-number" data-line-number="2810"></td>
        <td id="LC2810" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2811" class="blob-num js-line-number" data-line-number="2811"></td>
        <td id="LC2811" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2812" class="blob-num js-line-number" data-line-number="2812"></td>
        <td id="LC2812" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;printf\s*\(.*&quot;.*%[-+ ]?\d*q&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2813" class="blob-num js-line-number" data-line-number="2813"></td>
        <td id="LC2813" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf_format&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2814" class="blob-num js-line-number" data-line-number="2814"></td>
        <td id="LC2814" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;%q in format strings is deprecated.  Use %ll instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2815" class="blob-num js-line-number" data-line-number="2815"></td>
        <td id="LC2815" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2816" class="blob-num js-line-number" data-line-number="2816"></td>
        <td id="LC2816" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;printf\s*\(.*&quot;.*%\d+\$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2817" class="blob-num js-line-number" data-line-number="2817"></td>
        <td id="LC2817" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf_format&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L2818" class="blob-num js-line-number" data-line-number="2818"></td>
        <td id="LC2818" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;%N$ formats are unconventional.  Try rewriting to avoid them.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2819" class="blob-num js-line-number" data-line-number="2819"></td>
        <td id="LC2819" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2820" class="blob-num js-line-number" data-line-number="2820"></td>
        <td id="LC2820" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Remove escaped backslashes before looking for undefined escapes.</span></td>
      </tr>
      <tr>
        <td id="L2821" class="blob-num js-line-number" data-line-number="2821"></td>
        <td id="LC2821" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;<span class=pl-cce>\\</span><span class=pl-cce>\\</span>&#39;</span>, <span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2822" class="blob-num js-line-number" data-line-number="2822"></td>
        <td id="LC2822" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2823" class="blob-num js-line-number" data-line-number="2823"></td>
        <td id="LC2823" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(&quot;|\&#39;).*\\(%|\[|\(|{)&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2824" class="blob-num js-line-number" data-line-number="2824"></td>
        <td id="LC2824" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/printf_format&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2825" class="blob-num js-line-number" data-line-number="2825"></td>
        <td id="LC2825" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;%, [, (, and { are undefined character escapes.  Unescape them.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2826" class="blob-num js-line-number" data-line-number="2826"></td>
        <td id="LC2826" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2827" class="blob-num js-line-number" data-line-number="2827"></td>
        <td id="LC2827" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># For the rest, work with both comments and strings removed.</span></td>
      </tr>
      <tr>
        <td id="L2828" class="blob-num js-line-number" data-line-number="2828"></td>
        <td id="LC2828" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2829" class="blob-num js-line-number" data-line-number="2829"></td>
        <td id="LC2829" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2830" class="blob-num js-line-number" data-line-number="2830"></td>
        <td id="LC2830" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(const|volatile|void|char|short|int|long&#39;</span></td>
      </tr>
      <tr>
        <td id="L2831" class="blob-num js-line-number" data-line-number="2831"></td>
        <td id="LC2831" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>r&#39;|float|double|signed|unsigned&#39;</span></td>
      </tr>
      <tr>
        <td id="L2832" class="blob-num js-line-number" data-line-number="2832"></td>
        <td id="LC2832" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>r&#39;|schar|u?int8|u?int16|u?int32|u?int64)&#39;</span></td>
      </tr>
      <tr>
        <td id="L2833" class="blob-num js-line-number" data-line-number="2833"></td>
        <td id="LC2833" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>r&#39;\s+(register|static|extern|typedef)\b&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2834" class="blob-num js-line-number" data-line-number="2834"></td>
        <td id="LC2834" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2835" class="blob-num js-line-number" data-line-number="2835"></td>
        <td id="LC2835" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/storage_class&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2836" class="blob-num js-line-number" data-line-number="2836"></td>
        <td id="LC2836" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Storage-class specifier (static, extern, typedef, etc) should be &#39;</span></td>
      </tr>
      <tr>
        <td id="L2837" class="blob-num js-line-number" data-line-number="2837"></td>
        <td id="LC2837" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;at the beginning of the declaration.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2838" class="blob-num js-line-number" data-line-number="2838"></td>
        <td id="LC2838" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2839" class="blob-num js-line-number" data-line-number="2839"></td>
        <td id="LC2839" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#\s*endif\s*[^/\s]+&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2840" class="blob-num js-line-number" data-line-number="2840"></td>
        <td id="LC2840" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/endif_comment&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2841" class="blob-num js-line-number" data-line-number="2841"></td>
        <td id="LC2841" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Uncommented text after #endif is non-standard.  Use a comment.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2842" class="blob-num js-line-number" data-line-number="2842"></td>
        <td id="LC2842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2843" class="blob-num js-line-number" data-line-number="2843"></td>
        <td id="LC2843" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*class\s+(\w+\s*::\s*)+\w+\s*;&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2844" class="blob-num js-line-number" data-line-number="2844"></td>
        <td id="LC2844" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/forward_decl&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2845" class="blob-num js-line-number" data-line-number="2845"></td>
        <td id="LC2845" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Inner-style forward declarations are invalid.  Remove this line.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2846" class="blob-num js-line-number" data-line-number="2846"></td>
        <td id="LC2846" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2847" class="blob-num js-line-number" data-line-number="2847"></td>
        <td id="LC2847" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(\w+|[+-]?\d+(\.\d*)?)\s*(&lt;|&gt;)\?=?\s*(\w+|[+-]?\d+)(\.\d*)?&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2848" class="blob-num js-line-number" data-line-number="2848"></td>
        <td id="LC2848" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2849" class="blob-num js-line-number" data-line-number="2849"></td>
        <td id="LC2849" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/deprecated&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L2850" class="blob-num js-line-number" data-line-number="2850"></td>
        <td id="LC2850" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;&gt;? and &lt;? (max and min) operators are non-standard and deprecated.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2851" class="blob-num js-line-number" data-line-number="2851"></td>
        <td id="LC2851" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2852" class="blob-num js-line-number" data-line-number="2852"></td>
        <td id="LC2852" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^\s*const\s*string\s*&amp;\s*\w+\s*;&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2853" class="blob-num js-line-number" data-line-number="2853"></td>
        <td id="LC2853" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># TODO(unknown): Could it be expanded safely to arbitrary references,</span></td>
      </tr>
      <tr>
        <td id="L2854" class="blob-num js-line-number" data-line-number="2854"></td>
        <td id="LC2854" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># without triggering too many false positives? The first</span></td>
      </tr>
      <tr>
        <td id="L2855" class="blob-num js-line-number" data-line-number="2855"></td>
        <td id="LC2855" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># attempt triggered 5 warnings for mostly benign code in the regtest, hence</span></td>
      </tr>
      <tr>
        <td id="L2856" class="blob-num js-line-number" data-line-number="2856"></td>
        <td id="LC2856" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the restriction.</span></td>
      </tr>
      <tr>
        <td id="L2857" class="blob-num js-line-number" data-line-number="2857"></td>
        <td id="LC2857" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Here&#39;s the original regexp, for the reference:</span></td>
      </tr>
      <tr>
        <td id="L2858" class="blob-num js-line-number" data-line-number="2858"></td>
        <td id="LC2858" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># type_name = r&#39;\w+((\s*::\s*\w+)|(\s*&lt;\s*\w+?\s*&gt;))?&#39;</span></td>
      </tr>
      <tr>
        <td id="L2859" class="blob-num js-line-number" data-line-number="2859"></td>
        <td id="LC2859" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># r&#39;\s*const\s*&#39; + type_name + &#39;\s*&amp;\s*\w+\s*;&#39;</span></td>
      </tr>
      <tr>
        <td id="L2860" class="blob-num js-line-number" data-line-number="2860"></td>
        <td id="LC2860" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/member_string_references&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L2861" class="blob-num js-line-number" data-line-number="2861"></td>
        <td id="LC2861" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;const string&amp; members are dangerous. It is much better to use &#39;</span></td>
      </tr>
      <tr>
        <td id="L2862" class="blob-num js-line-number" data-line-number="2862"></td>
        <td id="LC2862" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;alternatives, such as pointers or simple constants.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2863" class="blob-num js-line-number" data-line-number="2863"></td>
        <td id="LC2863" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2864" class="blob-num js-line-number" data-line-number="2864"></td>
        <td id="LC2864" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Everything else in this function operates on class declarations.</span></td>
      </tr>
      <tr>
        <td id="L2865" class="blob-num js-line-number" data-line-number="2865"></td>
        <td id="LC2865" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Return early if the top of the nesting stack is not a class, or if</span></td>
      </tr>
      <tr>
        <td id="L2866" class="blob-num js-line-number" data-line-number="2866"></td>
        <td id="LC2866" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># the class head is not completed yet.</span></td>
      </tr>
      <tr>
        <td id="L2867" class="blob-num js-line-number" data-line-number="2867"></td>
        <td id="LC2867" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>classinfo</span> <span class=pl-c1>=</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InnermostClass</span>()</td>
      </tr>
      <tr>
        <td id="L2868" class="blob-num js-line-number" data-line-number="2868"></td>
        <td id="LC2868" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>classinfo</span> <span class=pl-c1>or</span> <span class=pl-c1>not</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>seen_open_brace</span>:</td>
      </tr>
      <tr>
        <td id="L2869" class="blob-num js-line-number" data-line-number="2869"></td>
        <td id="LC2869" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L2870" class="blob-num js-line-number" data-line-number="2870"></td>
        <td id="LC2870" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2871" class="blob-num js-line-number" data-line-number="2871"></td>
        <td id="LC2871" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The class may have been declared with namespace or classname qualifiers.</span></td>
      </tr>
      <tr>
        <td id="L2872" class="blob-num js-line-number" data-line-number="2872"></td>
        <td id="LC2872" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The constructor and destructor will not have those qualifiers.</span></td>
      </tr>
      <tr>
        <td id="L2873" class="blob-num js-line-number" data-line-number="2873"></td>
        <td id="LC2873" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>base_classname</span> <span class=pl-c1>=</span> <span class=pl-s1>classinfo</span>.<span class=pl-s1>name</span>.<span class=pl-en>split</span>(<span class=pl-s>&#39;::&#39;</span>)[<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2874" class="blob-num js-line-number" data-line-number="2874"></td>
        <td id="LC2874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2875" class="blob-num js-line-number" data-line-number="2875"></td>
        <td id="LC2875" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Look for single-argument constructors that aren&#39;t marked explicit.</span></td>
      </tr>
      <tr>
        <td id="L2876" class="blob-num js-line-number" data-line-number="2876"></td>
        <td id="LC2876" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Technically a valid construct, but against style.</span></td>
      </tr>
      <tr>
        <td id="L2877" class="blob-num js-line-number" data-line-number="2877"></td>
        <td id="LC2877" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>explicit_constructor_match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(</td>
      </tr>
      <tr>
        <td id="L2878" class="blob-num js-line-number" data-line-number="2878"></td>
        <td id="LC2878" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;\s+(?:(?:inline|constexpr)\s+)*(explicit\s+)?&#39;</span></td>
      </tr>
      <tr>
        <td id="L2879" class="blob-num js-line-number" data-line-number="2879"></td>
        <td id="LC2879" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(?:(?:inline|constexpr)\s+)*%s\s*&#39;</span></td>
      </tr>
      <tr>
        <td id="L2880" class="blob-num js-line-number" data-line-number="2880"></td>
        <td id="LC2880" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;\(((?:[^()]|\([^()]*\))*)\)&#39;</span></td>
      </tr>
      <tr>
        <td id="L2881" class="blob-num js-line-number" data-line-number="2881"></td>
        <td id="LC2881" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>%</span> <span class=pl-s1>re</span>.<span class=pl-en>escape</span>(<span class=pl-s1>base_classname</span>),</td>
      </tr>
      <tr>
        <td id="L2882" class="blob-num js-line-number" data-line-number="2882"></td>
        <td id="LC2882" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2883" class="blob-num js-line-number" data-line-number="2883"></td>
        <td id="LC2883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2884" class="blob-num js-line-number" data-line-number="2884"></td>
        <td id="LC2884" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>explicit_constructor_match</span>:</td>
      </tr>
      <tr>
        <td id="L2885" class="blob-num js-line-number" data-line-number="2885"></td>
        <td id="LC2885" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>is_marked_explicit</span> <span class=pl-c1>=</span> <span class=pl-s1>explicit_constructor_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L2886" class="blob-num js-line-number" data-line-number="2886"></td>
        <td id="LC2886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2887" class="blob-num js-line-number" data-line-number="2887"></td>
        <td id="LC2887" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>explicit_constructor_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>):</td>
      </tr>
      <tr>
        <td id="L2888" class="blob-num js-line-number" data-line-number="2888"></td>
        <td id="LC2888" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>constructor_args</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L2889" class="blob-num js-line-number" data-line-number="2889"></td>
        <td id="LC2889" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2890" class="blob-num js-line-number" data-line-number="2890"></td>
        <td id="LC2890" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>constructor_args</span> <span class=pl-c1>=</span> <span class=pl-s1>explicit_constructor_match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>).<span class=pl-en>split</span>(<span class=pl-s>&#39;,&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2891" class="blob-num js-line-number" data-line-number="2891"></td>
        <td id="LC2891" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2892" class="blob-num js-line-number" data-line-number="2892"></td>
        <td id="LC2892" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># collapse arguments so that commas in template parameter lists and function</span></td>
      </tr>
      <tr>
        <td id="L2893" class="blob-num js-line-number" data-line-number="2893"></td>
        <td id="LC2893" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># argument parameter lists don&#39;t split arguments in two</span></td>
      </tr>
      <tr>
        <td id="L2894" class="blob-num js-line-number" data-line-number="2894"></td>
        <td id="LC2894" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>i</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L2895" class="blob-num js-line-number" data-line-number="2895"></td>
        <td id="LC2895" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-s1>i</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>constructor_args</span>):</td>
      </tr>
      <tr>
        <td id="L2896" class="blob-num js-line-number" data-line-number="2896"></td>
        <td id="LC2896" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>constructor_arg</span> <span class=pl-c1>=</span> <span class=pl-s1>constructor_args</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L2897" class="blob-num js-line-number" data-line-number="2897"></td>
        <td id="LC2897" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> (<span class=pl-s1>constructor_arg</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;&lt;&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-s1>constructor_arg</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;&gt;&#39;</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L2898" class="blob-num js-line-number" data-line-number="2898"></td>
        <td id="LC2898" class="blob-code blob-code-inner js-file-line">             <span class=pl-s1>constructor_arg</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;(&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-s1>constructor_arg</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;)&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L2899" class="blob-num js-line-number" data-line-number="2899"></td>
        <td id="LC2899" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>constructor_arg</span> <span class=pl-c1>+=</span> <span class=pl-s>&#39;,&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>constructor_args</span>[<span class=pl-s1>i</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2900" class="blob-num js-line-number" data-line-number="2900"></td>
        <td id="LC2900" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>del</span> <span class=pl-s1>constructor_args</span>[<span class=pl-s1>i</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L2901" class="blob-num js-line-number" data-line-number="2901"></td>
        <td id="LC2901" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>constructor_args</span>[<span class=pl-s1>i</span>] <span class=pl-c1>=</span> <span class=pl-s1>constructor_arg</span></td>
      </tr>
      <tr>
        <td id="L2902" class="blob-num js-line-number" data-line-number="2902"></td>
        <td id="LC2902" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>i</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L2903" class="blob-num js-line-number" data-line-number="2903"></td>
        <td id="LC2903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2904" class="blob-num js-line-number" data-line-number="2904"></td>
        <td id="LC2904" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>defaulted_args</span> <span class=pl-c1>=</span> [<span class=pl-s1>arg</span> <span class=pl-k>for</span> <span class=pl-s1>arg</span> <span class=pl-c1>in</span> <span class=pl-s1>constructor_args</span> <span class=pl-k>if</span> <span class=pl-s>&#39;=&#39;</span> <span class=pl-c1>in</span> <span class=pl-s1>arg</span>]</td>
      </tr>
      <tr>
        <td id="L2905" class="blob-num js-line-number" data-line-number="2905"></td>
        <td id="LC2905" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>noarg_constructor</span> <span class=pl-c1>=</span> (<span class=pl-c1>not</span> <span class=pl-s1>constructor_args</span> <span class=pl-c1>or</span>  <span class=pl-c># empty arg list</span></td>
      </tr>
      <tr>
        <td id="L2906" class="blob-num js-line-number" data-line-number="2906"></td>
        <td id="LC2906" class="blob-code blob-code-inner js-file-line">                         <span class=pl-c># &#39;void&#39; arg specifier</span></td>
      </tr>
      <tr>
        <td id="L2907" class="blob-num js-line-number" data-line-number="2907"></td>
        <td id="LC2907" class="blob-code blob-code-inner js-file-line">                         (<span class=pl-en>len</span>(<span class=pl-s1>constructor_args</span>) <span class=pl-c1>==</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2908" class="blob-num js-line-number" data-line-number="2908"></td>
        <td id="LC2908" class="blob-code blob-code-inner js-file-line">                          <span class=pl-s1>constructor_args</span>[<span class=pl-c1>0</span>].<span class=pl-en>strip</span>() <span class=pl-c1>==</span> <span class=pl-s>&#39;void&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L2909" class="blob-num js-line-number" data-line-number="2909"></td>
        <td id="LC2909" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>onearg_constructor</span> <span class=pl-c1>=</span> ((<span class=pl-en>len</span>(<span class=pl-s1>constructor_args</span>) <span class=pl-c1>==</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span>  <span class=pl-c># exactly one arg</span></td>
      </tr>
      <tr>
        <td id="L2910" class="blob-num js-line-number" data-line-number="2910"></td>
        <td id="LC2910" class="blob-code blob-code-inner js-file-line">                           <span class=pl-c1>not</span> <span class=pl-s1>noarg_constructor</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L2911" class="blob-num js-line-number" data-line-number="2911"></td>
        <td id="LC2911" class="blob-code blob-code-inner js-file-line">                          <span class=pl-c># all but at most one arg defaulted</span></td>
      </tr>
      <tr>
        <td id="L2912" class="blob-num js-line-number" data-line-number="2912"></td>
        <td id="LC2912" class="blob-code blob-code-inner js-file-line">                          (<span class=pl-en>len</span>(<span class=pl-s1>constructor_args</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2913" class="blob-num js-line-number" data-line-number="2913"></td>
        <td id="LC2913" class="blob-code blob-code-inner js-file-line">                           <span class=pl-c1>not</span> <span class=pl-s1>noarg_constructor</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2914" class="blob-num js-line-number" data-line-number="2914"></td>
        <td id="LC2914" class="blob-code blob-code-inner js-file-line">                           <span class=pl-en>len</span>(<span class=pl-s1>defaulted_args</span>) <span class=pl-c1>&gt;=</span> <span class=pl-en>len</span>(<span class=pl-s1>constructor_args</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L2915" class="blob-num js-line-number" data-line-number="2915"></td>
        <td id="LC2915" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>initializer_list_constructor</span> <span class=pl-c1>=</span> <span class=pl-en>bool</span>(</td>
      </tr>
      <tr>
        <td id="L2916" class="blob-num js-line-number" data-line-number="2916"></td>
        <td id="LC2916" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>onearg_constructor</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2917" class="blob-num js-line-number" data-line-number="2917"></td>
        <td id="LC2917" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bstd\s*::\s*initializer_list\b&#39;</span>, <span class=pl-s1>constructor_args</span>[<span class=pl-c1>0</span>]))</td>
      </tr>
      <tr>
        <td id="L2918" class="blob-num js-line-number" data-line-number="2918"></td>
        <td id="LC2918" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>copy_constructor</span> <span class=pl-c1>=</span> <span class=pl-en>bool</span>(</td>
      </tr>
      <tr>
        <td id="L2919" class="blob-num js-line-number" data-line-number="2919"></td>
        <td id="LC2919" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>onearg_constructor</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2920" class="blob-num js-line-number" data-line-number="2920"></td>
        <td id="LC2920" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>Match</span>(<span class=pl-s>r&#39;(const\s+)?%s(\s*&lt;[^&gt;]*&gt;)?(\s+const)?\s*(?:&lt;\w+&gt;\s*)?&amp;&#39;</span></td>
      </tr>
      <tr>
        <td id="L2921" class="blob-num js-line-number" data-line-number="2921"></td>
        <td id="LC2921" class="blob-code blob-code-inner js-file-line">              <span class=pl-c1>%</span> <span class=pl-s1>re</span>.<span class=pl-en>escape</span>(<span class=pl-s1>base_classname</span>), <span class=pl-s1>constructor_args</span>[<span class=pl-c1>0</span>].<span class=pl-en>strip</span>()))</td>
      </tr>
      <tr>
        <td id="L2922" class="blob-num js-line-number" data-line-number="2922"></td>
        <td id="LC2922" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2923" class="blob-num js-line-number" data-line-number="2923"></td>
        <td id="LC2923" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-s1>is_marked_explicit</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2924" class="blob-num js-line-number" data-line-number="2924"></td>
        <td id="LC2924" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>onearg_constructor</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2925" class="blob-num js-line-number" data-line-number="2925"></td>
        <td id="LC2925" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-s1>initializer_list_constructor</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2926" class="blob-num js-line-number" data-line-number="2926"></td>
        <td id="LC2926" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-s1>copy_constructor</span>):</td>
      </tr>
      <tr>
        <td id="L2927" class="blob-num js-line-number" data-line-number="2927"></td>
        <td id="LC2927" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>defaulted_args</span>:</td>
      </tr>
      <tr>
        <td id="L2928" class="blob-num js-line-number" data-line-number="2928"></td>
        <td id="LC2928" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/explicit&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2929" class="blob-num js-line-number" data-line-number="2929"></td>
        <td id="LC2929" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Constructors callable with one argument &#39;</span></td>
      </tr>
      <tr>
        <td id="L2930" class="blob-num js-line-number" data-line-number="2930"></td>
        <td id="LC2930" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;should be marked explicit.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2931" class="blob-num js-line-number" data-line-number="2931"></td>
        <td id="LC2931" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L2932" class="blob-num js-line-number" data-line-number="2932"></td>
        <td id="LC2932" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/explicit&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2933" class="blob-num js-line-number" data-line-number="2933"></td>
        <td id="LC2933" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Single-parameter constructors should be marked explicit.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2934" class="blob-num js-line-number" data-line-number="2934"></td>
        <td id="LC2934" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>is_marked_explicit</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-s1>onearg_constructor</span>:</td>
      </tr>
      <tr>
        <td id="L2935" class="blob-num js-line-number" data-line-number="2935"></td>
        <td id="LC2935" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>noarg_constructor</span>:</td>
      </tr>
      <tr>
        <td id="L2936" class="blob-num js-line-number" data-line-number="2936"></td>
        <td id="LC2936" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/explicit&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L2937" class="blob-num js-line-number" data-line-number="2937"></td>
        <td id="LC2937" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Zero-parameter constructors should not be marked explicit.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2938" class="blob-num js-line-number" data-line-number="2938"></td>
        <td id="LC2938" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2939" class="blob-num js-line-number" data-line-number="2939"></td>
        <td id="LC2939" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2940" class="blob-num js-line-number" data-line-number="2940"></td>
        <td id="LC2940" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckSpacingForFunctionCall</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L2941" class="blob-num js-line-number" data-line-number="2941"></td>
        <td id="LC2941" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for the correctness of various spacing around function calls.</span></td>
      </tr>
      <tr>
        <td id="L2942" class="blob-num js-line-number" data-line-number="2942"></td>
        <td id="LC2942" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L2943" class="blob-num js-line-number" data-line-number="2943"></td>
        <td id="LC2943" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L2944" class="blob-num js-line-number" data-line-number="2944"></td>
        <td id="LC2944" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L2945" class="blob-num js-line-number" data-line-number="2945"></td>
        <td id="LC2945" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L2946" class="blob-num js-line-number" data-line-number="2946"></td>
        <td id="LC2946" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L2947" class="blob-num js-line-number" data-line-number="2947"></td>
        <td id="LC2947" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L2948" class="blob-num js-line-number" data-line-number="2948"></td>
        <td id="LC2948" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L2949" class="blob-num js-line-number" data-line-number="2949"></td>
        <td id="LC2949" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L2950" class="blob-num js-line-number" data-line-number="2950"></td>
        <td id="LC2950" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2951" class="blob-num js-line-number" data-line-number="2951"></td>
        <td id="LC2951" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Since function calls often occur inside if/for/while/switch</span></td>
      </tr>
      <tr>
        <td id="L2952" class="blob-num js-line-number" data-line-number="2952"></td>
        <td id="LC2952" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># expressions - which have their own, more liberal conventions - we</span></td>
      </tr>
      <tr>
        <td id="L2953" class="blob-num js-line-number" data-line-number="2953"></td>
        <td id="LC2953" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># first see if we should be looking inside such an expression for a</span></td>
      </tr>
      <tr>
        <td id="L2954" class="blob-num js-line-number" data-line-number="2954"></td>
        <td id="LC2954" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># function call, to which we can apply more strict standards.</span></td>
      </tr>
      <tr>
        <td id="L2955" class="blob-num js-line-number" data-line-number="2955"></td>
        <td id="LC2955" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fncall</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>    <span class=pl-c># if there&#39;s no control flow construct, look at whole line</span></td>
      </tr>
      <tr>
        <td id="L2956" class="blob-num js-line-number" data-line-number="2956"></td>
        <td id="LC2956" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>pattern</span> <span class=pl-c1>in</span> (<span class=pl-s>r&#39;\bif\s*\((.*)\)\s*{&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2957" class="blob-num js-line-number" data-line-number="2957"></td>
        <td id="LC2957" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>r&#39;\bfor\s*\((.*)\)\s*{&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2958" class="blob-num js-line-number" data-line-number="2958"></td>
        <td id="LC2958" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>r&#39;\bwhile\s*\((.*)\)\s*[{;]&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2959" class="blob-num js-line-number" data-line-number="2959"></td>
        <td id="LC2959" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>r&#39;\bswitch\s*\((.*)\)\s*{&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L2960" class="blob-num js-line-number" data-line-number="2960"></td>
        <td id="LC2960" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L2961" class="blob-num js-line-number" data-line-number="2961"></td>
        <td id="LC2961" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L2962" class="blob-num js-line-number" data-line-number="2962"></td>
        <td id="LC2962" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>fncall</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)    <span class=pl-c># look inside the parens for function calls</span></td>
      </tr>
      <tr>
        <td id="L2963" class="blob-num js-line-number" data-line-number="2963"></td>
        <td id="LC2963" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L2964" class="blob-num js-line-number" data-line-number="2964"></td>
        <td id="LC2964" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2965" class="blob-num js-line-number" data-line-number="2965"></td>
        <td id="LC2965" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Except in if/for/while/switch, there should never be space</span></td>
      </tr>
      <tr>
        <td id="L2966" class="blob-num js-line-number" data-line-number="2966"></td>
        <td id="LC2966" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># immediately inside parens (eg &quot;f( 3, 4 )&quot;).  We make an exception</span></td>
      </tr>
      <tr>
        <td id="L2967" class="blob-num js-line-number" data-line-number="2967"></td>
        <td id="LC2967" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># for nested parens ( (a+b) + c ).  Likewise, there should never be</span></td>
      </tr>
      <tr>
        <td id="L2968" class="blob-num js-line-number" data-line-number="2968"></td>
        <td id="LC2968" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># a space before a ( when it&#39;s a function argument.  I assume it&#39;s a</span></td>
      </tr>
      <tr>
        <td id="L2969" class="blob-num js-line-number" data-line-number="2969"></td>
        <td id="LC2969" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># function argument when the char before the whitespace is legal in</span></td>
      </tr>
      <tr>
        <td id="L2970" class="blob-num js-line-number" data-line-number="2970"></td>
        <td id="LC2970" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># a function name (alnum + _) and we&#39;re not starting a macro. Also ignore</span></td>
      </tr>
      <tr>
        <td id="L2971" class="blob-num js-line-number" data-line-number="2971"></td>
        <td id="LC2971" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># pointers and references to arrays and functions coz they&#39;re too tricky:</span></td>
      </tr>
      <tr>
        <td id="L2972" class="blob-num js-line-number" data-line-number="2972"></td>
        <td id="LC2972" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># we use a very simple way to recognize these:</span></td>
      </tr>
      <tr>
        <td id="L2973" class="blob-num js-line-number" data-line-number="2973"></td>
        <td id="LC2973" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># &quot; (something)(maybe-something)&quot; or</span></td>
      </tr>
      <tr>
        <td id="L2974" class="blob-num js-line-number" data-line-number="2974"></td>
        <td id="LC2974" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># &quot; (something)(maybe-something,&quot; or</span></td>
      </tr>
      <tr>
        <td id="L2975" class="blob-num js-line-number" data-line-number="2975"></td>
        <td id="LC2975" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># &quot; (something)[something]&quot;</span></td>
      </tr>
      <tr>
        <td id="L2976" class="blob-num js-line-number" data-line-number="2976"></td>
        <td id="LC2976" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Note that we assume the contents of [] to be short enough that</span></td>
      </tr>
      <tr>
        <td id="L2977" class="blob-num js-line-number" data-line-number="2977"></td>
        <td id="LC2977" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># they&#39;ll never need to wrap.</span></td>
      </tr>
      <tr>
        <td id="L2978" class="blob-num js-line-number" data-line-number="2978"></td>
        <td id="LC2978" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (  <span class=pl-c># Ignore control structures.</span></td>
      </tr>
      <tr>
        <td id="L2979" class="blob-num js-line-number" data-line-number="2979"></td>
        <td id="LC2979" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(if|for|while|switch|return|new|delete|catch|sizeof)\b&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L2980" class="blob-num js-line-number" data-line-number="2980"></td>
        <td id="LC2980" class="blob-code blob-code-inner js-file-line">                 <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2981" class="blob-num js-line-number" data-line-number="2981"></td>
        <td id="LC2981" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Ignore pointers/references to functions.</span></td>
      </tr>
      <tr>
        <td id="L2982" class="blob-num js-line-number" data-line-number="2982"></td>
        <td id="LC2982" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39; \([^)]+\)\([^)]*(\)|,$)&#39;</span>, <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2983" class="blob-num js-line-number" data-line-number="2983"></td>
        <td id="LC2983" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Ignore pointers/references to arrays.</span></td>
      </tr>
      <tr>
        <td id="L2984" class="blob-num js-line-number" data-line-number="2984"></td>
        <td id="LC2984" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39; \([^)]+\)\[[^\]]+\]&#39;</span>, <span class=pl-s1>fncall</span>)):</td>
      </tr>
      <tr>
        <td id="L2985" class="blob-num js-line-number" data-line-number="2985"></td>
        <td id="LC2985" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\w\s*\(\s(?!\s*\\$)&#39;</span>, <span class=pl-s1>fncall</span>):      <span class=pl-c># a ( used for a fn call</span></td>
      </tr>
      <tr>
        <td id="L2986" class="blob-num js-line-number" data-line-number="2986"></td>
        <td id="LC2986" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L2987" class="blob-num js-line-number" data-line-number="2987"></td>
        <td id="LC2987" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Extra space after ( in function call&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2988" class="blob-num js-line-number" data-line-number="2988"></td>
        <td id="LC2988" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\(\s+(?!(\s*\\)|\()&#39;</span>, <span class=pl-s1>fncall</span>):</td>
      </tr>
      <tr>
        <td id="L2989" class="blob-num js-line-number" data-line-number="2989"></td>
        <td id="LC2989" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L2990" class="blob-num js-line-number" data-line-number="2990"></td>
        <td id="LC2990" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Extra space after (&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L2991" class="blob-num js-line-number" data-line-number="2991"></td>
        <td id="LC2991" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;\w\s+\(&#39;</span>, <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2992" class="blob-num js-line-number" data-line-number="2992"></td>
        <td id="LC2992" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;_{0,2}asm_{0,2}\s+_{0,2}volatile_{0,2}\s+\(&#39;</span>, <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2993" class="blob-num js-line-number" data-line-number="2993"></td>
        <td id="LC2993" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;#\s*define|typedef|using\s+\w+\s*=&#39;</span>, <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2994" class="blob-num js-line-number" data-line-number="2994"></td>
        <td id="LC2994" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\w\s+\((\w+::)*\*\w+\)\(&#39;</span>, <span class=pl-s1>fncall</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L2995" class="blob-num js-line-number" data-line-number="2995"></td>
        <td id="LC2995" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bcase\s+\(&#39;</span>, <span class=pl-s1>fncall</span>)):</td>
      </tr>
      <tr>
        <td id="L2996" class="blob-num js-line-number" data-line-number="2996"></td>
        <td id="LC2996" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># TODO(unknown): Space after an operator function seem to be a common</span></td>
      </tr>
      <tr>
        <td id="L2997" class="blob-num js-line-number" data-line-number="2997"></td>
        <td id="LC2997" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># error, silence those for now by restricting them to highest verbosity.</span></td>
      </tr>
      <tr>
        <td id="L2998" class="blob-num js-line-number" data-line-number="2998"></td>
        <td id="LC2998" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator_*\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L2999" class="blob-num js-line-number" data-line-number="2999"></td>
        <td id="LC2999" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>0</span>,</td>
      </tr>
      <tr>
        <td id="L3000" class="blob-num js-line-number" data-line-number="3000"></td>
        <td id="LC3000" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Extra space before ( in function call&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3001" class="blob-num js-line-number" data-line-number="3001"></td>
        <td id="LC3001" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3002" class="blob-num js-line-number" data-line-number="3002"></td>
        <td id="LC3002" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3003" class="blob-num js-line-number" data-line-number="3003"></td>
        <td id="LC3003" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Extra space before ( in function call&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3004" class="blob-num js-line-number" data-line-number="3004"></td>
        <td id="LC3004" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If the ) is followed only by a newline or a { + newline, assume it&#39;s</span></td>
      </tr>
      <tr>
        <td id="L3005" class="blob-num js-line-number" data-line-number="3005"></td>
        <td id="LC3005" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># part of a control statement (if/while/etc), and don&#39;t complain</span></td>
      </tr>
      <tr>
        <td id="L3006" class="blob-num js-line-number" data-line-number="3006"></td>
        <td id="LC3006" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[^)]\s+\)\s*[^{\s]&#39;</span>, <span class=pl-s1>fncall</span>):</td>
      </tr>
      <tr>
        <td id="L3007" class="blob-num js-line-number" data-line-number="3007"></td>
        <td id="LC3007" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># If the closing parenthesis is preceded by only whitespaces,</span></td>
      </tr>
      <tr>
        <td id="L3008" class="blob-num js-line-number" data-line-number="3008"></td>
        <td id="LC3008" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># try to give a more descriptive error message.</span></td>
      </tr>
      <tr>
        <td id="L3009" class="blob-num js-line-number" data-line-number="3009"></td>
        <td id="LC3009" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^\s+\)&#39;</span>, <span class=pl-s1>fncall</span>):</td>
      </tr>
      <tr>
        <td id="L3010" class="blob-num js-line-number" data-line-number="3010"></td>
        <td id="LC3010" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3011" class="blob-num js-line-number" data-line-number="3011"></td>
        <td id="LC3011" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Closing ) should be moved to the previous line&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3012" class="blob-num js-line-number" data-line-number="3012"></td>
        <td id="LC3012" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3013" class="blob-num js-line-number" data-line-number="3013"></td>
        <td id="LC3013" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3014" class="blob-num js-line-number" data-line-number="3014"></td>
        <td id="LC3014" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Extra space before )&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3015" class="blob-num js-line-number" data-line-number="3015"></td>
        <td id="LC3015" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3016" class="blob-num js-line-number" data-line-number="3016"></td>
        <td id="LC3016" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3017" class="blob-num js-line-number" data-line-number="3017"></td>
        <td id="LC3017" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsBlankLine</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3018" class="blob-num js-line-number" data-line-number="3018"></td>
        <td id="LC3018" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Returns true if the given line is blank.</span></td>
      </tr>
      <tr>
        <td id="L3019" class="blob-num js-line-number" data-line-number="3019"></td>
        <td id="LC3019" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3020" class="blob-num js-line-number" data-line-number="3020"></td>
        <td id="LC3020" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  We consider a line to be blank if the line is empty or consists of</span></td>
      </tr>
      <tr>
        <td id="L3021" class="blob-num js-line-number" data-line-number="3021"></td>
        <td id="LC3021" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  only white spaces.</span></td>
      </tr>
      <tr>
        <td id="L3022" class="blob-num js-line-number" data-line-number="3022"></td>
        <td id="LC3022" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3023" class="blob-num js-line-number" data-line-number="3023"></td>
        <td id="LC3023" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3024" class="blob-num js-line-number" data-line-number="3024"></td>
        <td id="LC3024" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: A line of a string.</span></td>
      </tr>
      <tr>
        <td id="L3025" class="blob-num js-line-number" data-line-number="3025"></td>
        <td id="LC3025" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3026" class="blob-num js-line-number" data-line-number="3026"></td>
        <td id="LC3026" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L3027" class="blob-num js-line-number" data-line-number="3027"></td>
        <td id="LC3027" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True, if the given line is blank.</span></td>
      </tr>
      <tr>
        <td id="L3028" class="blob-num js-line-number" data-line-number="3028"></td>
        <td id="LC3028" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3029" class="blob-num js-line-number" data-line-number="3029"></td>
        <td id="LC3029" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>not</span> <span class=pl-s1>line</span> <span class=pl-c1>or</span> <span class=pl-s1>line</span>.<span class=pl-en>isspace</span>()</td>
      </tr>
      <tr>
        <td id="L3030" class="blob-num js-line-number" data-line-number="3030"></td>
        <td id="LC3030" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3031" class="blob-num js-line-number" data-line-number="3031"></td>
        <td id="LC3031" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3032" class="blob-num js-line-number" data-line-number="3032"></td>
        <td id="LC3032" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForNamespaceIndentation</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>,</td>
      </tr>
      <tr>
        <td id="L3033" class="blob-num js-line-number" data-line-number="3033"></td>
        <td id="LC3033" class="blob-code blob-code-inner js-file-line">                                 <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3034" class="blob-num js-line-number" data-line-number="3034"></td>
        <td id="LC3034" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>is_namespace_indent_item</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L3035" class="blob-num js-line-number" data-line-number="3035"></td>
        <td id="LC3035" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>len</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3036" class="blob-num js-line-number" data-line-number="3036"></td>
        <td id="LC3036" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>check_namespace_indentation</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3037" class="blob-num js-line-number" data-line-number="3037"></td>
        <td id="LC3037" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>previous_stack_top</span>, <span class=pl-s1>_NamespaceInfo</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3038" class="blob-num js-line-number" data-line-number="3038"></td>
        <td id="LC3038" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>nesting_state</span>.<span class=pl-s1>previous_stack_top</span> <span class=pl-c1>==</span> <span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>2</span>])</td>
      </tr>
      <tr>
        <td id="L3039" class="blob-num js-line-number" data-line-number="3039"></td>
        <td id="LC3039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3040" class="blob-num js-line-number" data-line-number="3040"></td>
        <td id="LC3040" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>ShouldCheckNamespaceIndentation</span>(<span class=pl-s1>nesting_state</span>, <span class=pl-s1>is_namespace_indent_item</span>,</td>
      </tr>
      <tr>
        <td id="L3041" class="blob-num js-line-number" data-line-number="3041"></td>
        <td id="LC3041" class="blob-code blob-code-inner js-file-line">                                     <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3042" class="blob-num js-line-number" data-line-number="3042"></td>
        <td id="LC3042" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckItemIndentationInNamespace</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>,</td>
      </tr>
      <tr>
        <td id="L3043" class="blob-num js-line-number" data-line-number="3043"></td>
        <td id="LC3043" class="blob-code blob-code-inner js-file-line">                                    <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L3044" class="blob-num js-line-number" data-line-number="3044"></td>
        <td id="LC3044" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3045" class="blob-num js-line-number" data-line-number="3045"></td>
        <td id="LC3045" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3046" class="blob-num js-line-number" data-line-number="3046"></td>
        <td id="LC3046" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForFunctionLengths</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>,</td>
      </tr>
      <tr>
        <td id="L3047" class="blob-num js-line-number" data-line-number="3047"></td>
        <td id="LC3047" class="blob-code blob-code-inner js-file-line">                            <span class=pl-s1>function_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3048" class="blob-num js-line-number" data-line-number="3048"></td>
        <td id="LC3048" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Reports for long function bodies.</span></td>
      </tr>
      <tr>
        <td id="L3049" class="blob-num js-line-number" data-line-number="3049"></td>
        <td id="LC3049" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3050" class="blob-num js-line-number" data-line-number="3050"></td>
        <td id="LC3050" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  For an overview why this is done, see:</span></td>
      </tr>
      <tr>
        <td id="L3051" class="blob-num js-line-number" data-line-number="3051"></td>
        <td id="LC3051" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Write_Short_Functions</span></td>
      </tr>
      <tr>
        <td id="L3052" class="blob-num js-line-number" data-line-number="3052"></td>
        <td id="LC3052" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3053" class="blob-num js-line-number" data-line-number="3053"></td>
        <td id="LC3053" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Uses a simplistic algorithm assuming other style guidelines</span></td>
      </tr>
      <tr>
        <td id="L3054" class="blob-num js-line-number" data-line-number="3054"></td>
        <td id="LC3054" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  (especially spacing) are followed.</span></td>
      </tr>
      <tr>
        <td id="L3055" class="blob-num js-line-number" data-line-number="3055"></td>
        <td id="LC3055" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Only checks unindented functions, so class members are unchecked.</span></td>
      </tr>
      <tr>
        <td id="L3056" class="blob-num js-line-number" data-line-number="3056"></td>
        <td id="LC3056" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Trivial bodies are unchecked, so constructors with huge initializer lists</span></td>
      </tr>
      <tr>
        <td id="L3057" class="blob-num js-line-number" data-line-number="3057"></td>
        <td id="LC3057" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  may be missed.</span></td>
      </tr>
      <tr>
        <td id="L3058" class="blob-num js-line-number" data-line-number="3058"></td>
        <td id="LC3058" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Blank/comment lines are not counted so as to avoid encouraging the removal</span></td>
      </tr>
      <tr>
        <td id="L3059" class="blob-num js-line-number" data-line-number="3059"></td>
        <td id="LC3059" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  of vertical space and comments just to get through a lint check.</span></td>
      </tr>
      <tr>
        <td id="L3060" class="blob-num js-line-number" data-line-number="3060"></td>
        <td id="LC3060" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  NOLINT *on the last line of a function* disables this check.</span></td>
      </tr>
      <tr>
        <td id="L3061" class="blob-num js-line-number" data-line-number="3061"></td>
        <td id="LC3061" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3062" class="blob-num js-line-number" data-line-number="3062"></td>
        <td id="LC3062" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3063" class="blob-num js-line-number" data-line-number="3063"></td>
        <td id="LC3063" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3064" class="blob-num js-line-number" data-line-number="3064"></td>
        <td id="LC3064" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3065" class="blob-num js-line-number" data-line-number="3065"></td>
        <td id="LC3065" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3066" class="blob-num js-line-number" data-line-number="3066"></td>
        <td id="LC3066" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    function_state: Current function name and lines in body so far.</span></td>
      </tr>
      <tr>
        <td id="L3067" class="blob-num js-line-number" data-line-number="3067"></td>
        <td id="LC3067" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3068" class="blob-num js-line-number" data-line-number="3068"></td>
        <td id="LC3068" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3069" class="blob-num js-line-number" data-line-number="3069"></td>
        <td id="LC3069" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span></td>
      </tr>
      <tr>
        <td id="L3070" class="blob-num js-line-number" data-line-number="3070"></td>
        <td id="LC3070" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3071" class="blob-num js-line-number" data-line-number="3071"></td>
        <td id="LC3071" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>joined_line</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L3072" class="blob-num js-line-number" data-line-number="3072"></td>
        <td id="LC3072" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3073" class="blob-num js-line-number" data-line-number="3073"></td>
        <td id="LC3073" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>starting_func</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3074" class="blob-num js-line-number" data-line-number="3074"></td>
        <td id="LC3074" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>regexp</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;(\w(\w|::|\*|\&amp;|\s)*)\(&#39;</span>  <span class=pl-c># decls * &amp; space::name( ...</span></td>
      </tr>
      <tr>
        <td id="L3075" class="blob-num js-line-number" data-line-number="3075"></td>
        <td id="LC3075" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match_result</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s1>regexp</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3076" class="blob-num js-line-number" data-line-number="3076"></td>
        <td id="LC3076" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match_result</span>:</td>
      </tr>
      <tr>
        <td id="L3077" class="blob-num js-line-number" data-line-number="3077"></td>
        <td id="LC3077" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If the name is all caps and underscores, figure it&#39;s a macro and</span></td>
      </tr>
      <tr>
        <td id="L3078" class="blob-num js-line-number" data-line-number="3078"></td>
        <td id="LC3078" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># ignore it, unless it&#39;s TEST or TEST_F.</span></td>
      </tr>
      <tr>
        <td id="L3079" class="blob-num js-line-number" data-line-number="3079"></td>
        <td id="LC3079" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>function_name</span> <span class=pl-c1>=</span> <span class=pl-s1>match_result</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>).<span class=pl-en>split</span>()[<span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3080" class="blob-num js-line-number" data-line-number="3080"></td>
        <td id="LC3080" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>function_name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;TEST&#39;</span> <span class=pl-c1>or</span> <span class=pl-s1>function_name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;TEST_F&#39;</span> <span class=pl-c1>or</span> (</td>
      </tr>
      <tr>
        <td id="L3081" class="blob-num js-line-number" data-line-number="3081"></td>
        <td id="LC3081" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;[A-Z_]+$&#39;</span>, <span class=pl-s1>function_name</span>)):</td>
      </tr>
      <tr>
        <td id="L3082" class="blob-num js-line-number" data-line-number="3082"></td>
        <td id="LC3082" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>starting_func</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3083" class="blob-num js-line-number" data-line-number="3083"></td>
        <td id="LC3083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3084" class="blob-num js-line-number" data-line-number="3084"></td>
        <td id="LC3084" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>starting_func</span>:</td>
      </tr>
      <tr>
        <td id="L3085" class="blob-num js-line-number" data-line-number="3085"></td>
        <td id="LC3085" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>body_found</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3086" class="blob-num js-line-number" data-line-number="3086"></td>
        <td id="LC3086" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>start_linenum</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>()):</td>
      </tr>
      <tr>
        <td id="L3087" class="blob-num js-line-number" data-line-number="3087"></td>
        <td id="LC3087" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>start_line</span> <span class=pl-c1>=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>start_linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3088" class="blob-num js-line-number" data-line-number="3088"></td>
        <td id="LC3088" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>joined_line</span> <span class=pl-c1>+=</span> <span class=pl-s>&#39; &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>start_line</span>.<span class=pl-en>lstrip</span>()</td>
      </tr>
      <tr>
        <td id="L3089" class="blob-num js-line-number" data-line-number="3089"></td>
        <td id="LC3089" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(;|})&#39;</span>, <span class=pl-s1>start_line</span>):  <span class=pl-c># Declarations and trivial functions</span></td>
      </tr>
      <tr>
        <td id="L3090" class="blob-num js-line-number" data-line-number="3090"></td>
        <td id="LC3090" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body_found</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3091" class="blob-num js-line-number" data-line-number="3091"></td>
        <td id="LC3091" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span>                              <span class=pl-c># ... ignore</span></td>
      </tr>
      <tr>
        <td id="L3092" class="blob-num js-line-number" data-line-number="3092"></td>
        <td id="LC3092" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;{&#39;</span>, <span class=pl-s1>start_line</span>):</td>
      </tr>
      <tr>
        <td id="L3093" class="blob-num js-line-number" data-line-number="3093"></td>
        <td id="LC3093" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body_found</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3094" class="blob-num js-line-number" data-line-number="3094"></td>
        <td id="LC3094" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>function</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;((\w|:)*)\(&#39;</span>, <span class=pl-s1>line</span>).<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3095" class="blob-num js-line-number" data-line-number="3095"></td>
        <td id="LC3095" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;TEST&#39;</span>, <span class=pl-s1>function</span>):    <span class=pl-c># Handle TEST... macros</span></td>
      </tr>
      <tr>
        <td id="L3096" class="blob-num js-line-number" data-line-number="3096"></td>
        <td id="LC3096" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>parameter_regexp</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(\(.*\))&#39;</span>, <span class=pl-s1>joined_line</span>)</td>
      </tr>
      <tr>
        <td id="L3097" class="blob-num js-line-number" data-line-number="3097"></td>
        <td id="LC3097" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>parameter_regexp</span>:             <span class=pl-c># Ignore bad syntax</span></td>
      </tr>
      <tr>
        <td id="L3098" class="blob-num js-line-number" data-line-number="3098"></td>
        <td id="LC3098" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>function</span> <span class=pl-c1>+=</span> <span class=pl-s1>parameter_regexp</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3099" class="blob-num js-line-number" data-line-number="3099"></td>
        <td id="LC3099" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3100" class="blob-num js-line-number" data-line-number="3100"></td>
        <td id="LC3100" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>function</span> <span class=pl-c1>+=</span> <span class=pl-s>&#39;()&#39;</span></td>
      </tr>
      <tr>
        <td id="L3101" class="blob-num js-line-number" data-line-number="3101"></td>
        <td id="LC3101" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>function_state</span>.<span class=pl-v>Begin</span>(<span class=pl-s1>function</span>)</td>
      </tr>
      <tr>
        <td id="L3102" class="blob-num js-line-number" data-line-number="3102"></td>
        <td id="LC3102" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L3103" class="blob-num js-line-number" data-line-number="3103"></td>
        <td id="LC3103" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>body_found</span>:</td>
      </tr>
      <tr>
        <td id="L3104" class="blob-num js-line-number" data-line-number="3104"></td>
        <td id="LC3104" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># No body for the function (or evidence of a non-function) was found.</span></td>
      </tr>
      <tr>
        <td id="L3105" class="blob-num js-line-number" data-line-number="3105"></td>
        <td id="LC3105" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/fn_size&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3106" class="blob-num js-line-number" data-line-number="3106"></td>
        <td id="LC3106" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Lint failed to find start of function body.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3107" class="blob-num js-line-number" data-line-number="3107"></td>
        <td id="LC3107" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\}\s*$&#39;</span>, <span class=pl-s1>line</span>):  <span class=pl-c># function end</span></td>
      </tr>
      <tr>
        <td id="L3108" class="blob-num js-line-number" data-line-number="3108"></td>
        <td id="LC3108" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>function_state</span>.<span class=pl-v>Check</span>(<span class=pl-s1>error</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>)</td>
      </tr>
      <tr>
        <td id="L3109" class="blob-num js-line-number" data-line-number="3109"></td>
        <td id="LC3109" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>function_state</span>.<span class=pl-v>End</span>()</td>
      </tr>
      <tr>
        <td id="L3110" class="blob-num js-line-number" data-line-number="3110"></td>
        <td id="LC3110" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3111" class="blob-num js-line-number" data-line-number="3111"></td>
        <td id="LC3111" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>function_state</span>.<span class=pl-v>Count</span>()  <span class=pl-c># Count non-blank/non-comment lines.</span></td>
      </tr>
      <tr>
        <td id="L3112" class="blob-num js-line-number" data-line-number="3112"></td>
        <td id="LC3112" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3113" class="blob-num js-line-number" data-line-number="3113"></td>
        <td id="LC3113" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3114" class="blob-num js-line-number" data-line-number="3114"></td>
        <td id="LC3114" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_TODO</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;^//(\s*)TODO(\(.+?\))?:?(\s|$)?&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3115" class="blob-num js-line-number" data-line-number="3115"></td>
        <td id="LC3115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3116" class="blob-num js-line-number" data-line-number="3116"></td>
        <td id="LC3116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3117" class="blob-num js-line-number" data-line-number="3117"></td>
        <td id="LC3117" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckComment</span>(<span class=pl-s1>line</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>next_line_start</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3118" class="blob-num js-line-number" data-line-number="3118"></td>
        <td id="LC3118" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for common mistakes in comments.</span></td>
      </tr>
      <tr>
        <td id="L3119" class="blob-num js-line-number" data-line-number="3119"></td>
        <td id="LC3119" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3120" class="blob-num js-line-number" data-line-number="3120"></td>
        <td id="LC3120" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3121" class="blob-num js-line-number" data-line-number="3121"></td>
        <td id="LC3121" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: The line in question.</span></td>
      </tr>
      <tr>
        <td id="L3122" class="blob-num js-line-number" data-line-number="3122"></td>
        <td id="LC3122" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3123" class="blob-num js-line-number" data-line-number="3123"></td>
        <td id="LC3123" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3124" class="blob-num js-line-number" data-line-number="3124"></td>
        <td id="LC3124" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    next_line_start: The first non-whitespace column of the next line.</span></td>
      </tr>
      <tr>
        <td id="L3125" class="blob-num js-line-number" data-line-number="3125"></td>
        <td id="LC3125" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3126" class="blob-num js-line-number" data-line-number="3126"></td>
        <td id="LC3126" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3127" class="blob-num js-line-number" data-line-number="3127"></td>
        <td id="LC3127" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>commentpos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;//&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3128" class="blob-num js-line-number" data-line-number="3128"></td>
        <td id="LC3128" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>commentpos</span> <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3129" class="blob-num js-line-number" data-line-number="3129"></td>
        <td id="LC3129" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check if the // may be in quotes.  If so, ignore it</span></td>
      </tr>
      <tr>
        <td id="L3130" class="blob-num js-line-number" data-line-number="3130"></td>
        <td id="LC3130" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>re</span>.<span class=pl-en>sub</span>(<span class=pl-s>r&#39;\\.&#39;</span>, <span class=pl-s>&#39;&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>commentpos</span>]).<span class=pl-en>count</span>(<span class=pl-s>&#39;&quot;&#39;</span>) <span class=pl-c1>%</span> <span class=pl-c1>2</span> <span class=pl-c1>==</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3131" class="blob-num js-line-number" data-line-number="3131"></td>
        <td id="LC3131" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Allow one space for new scopes, two spaces otherwise:</span></td>
      </tr>
      <tr>
        <td id="L3132" class="blob-num js-line-number" data-line-number="3132"></td>
        <td id="LC3132" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-c1>not</span> (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;^.*{ *//&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span> <span class=pl-s1>next_line_start</span> <span class=pl-c1>==</span> <span class=pl-s1>commentpos</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3133" class="blob-num js-line-number" data-line-number="3133"></td>
        <td id="LC3133" class="blob-code blob-code-inner js-file-line">          ((<span class=pl-s1>commentpos</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3134" class="blob-num js-line-number" data-line-number="3134"></td>
        <td id="LC3134" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>line</span>[<span class=pl-s1>commentpos</span><span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>string</span>.<span class=pl-s1>whitespace</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3135" class="blob-num js-line-number" data-line-number="3135"></td>
        <td id="LC3135" class="blob-code blob-code-inner js-file-line">           (<span class=pl-s1>commentpos</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>2</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3136" class="blob-num js-line-number" data-line-number="3136"></td>
        <td id="LC3136" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>line</span>[<span class=pl-s1>commentpos</span><span class=pl-c1>-</span><span class=pl-c1>2</span>] <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>string</span>.<span class=pl-s1>whitespace</span>))):</td>
      </tr>
      <tr>
        <td id="L3137" class="blob-num js-line-number" data-line-number="3137"></td>
        <td id="LC3137" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/comments&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3138" class="blob-num js-line-number" data-line-number="3138"></td>
        <td id="LC3138" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;At least two spaces is best between code and comments&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3139" class="blob-num js-line-number" data-line-number="3139"></td>
        <td id="LC3139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3140" class="blob-num js-line-number" data-line-number="3140"></td>
        <td id="LC3140" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Checks for common mistakes in TODO comments.</span></td>
      </tr>
      <tr>
        <td id="L3141" class="blob-num js-line-number" data-line-number="3141"></td>
        <td id="LC3141" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>comment</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>commentpos</span>:]</td>
      </tr>
      <tr>
        <td id="L3142" class="blob-num js-line-number" data-line-number="3142"></td>
        <td id="LC3142" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_TODO</span>.<span class=pl-en>match</span>(<span class=pl-s1>comment</span>)</td>
      </tr>
      <tr>
        <td id="L3143" class="blob-num js-line-number" data-line-number="3143"></td>
        <td id="LC3143" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3144" class="blob-num js-line-number" data-line-number="3144"></td>
        <td id="LC3144" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># One whitespace is correct; zero whitespace is handled elsewhere.</span></td>
      </tr>
      <tr>
        <td id="L3145" class="blob-num js-line-number" data-line-number="3145"></td>
        <td id="LC3145" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>leading_whitespace</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3146" class="blob-num js-line-number" data-line-number="3146"></td>
        <td id="LC3146" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>leading_whitespace</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3147" class="blob-num js-line-number" data-line-number="3147"></td>
        <td id="LC3147" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/todo&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3148" class="blob-num js-line-number" data-line-number="3148"></td>
        <td id="LC3148" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Too many spaces before TODO&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3149" class="blob-num js-line-number" data-line-number="3149"></td>
        <td id="LC3149" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3150" class="blob-num js-line-number" data-line-number="3150"></td>
        <td id="LC3150" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>username</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L3151" class="blob-num js-line-number" data-line-number="3151"></td>
        <td id="LC3151" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>username</span>:</td>
      </tr>
      <tr>
        <td id="L3152" class="blob-num js-line-number" data-line-number="3152"></td>
        <td id="LC3152" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/todo&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3153" class="blob-num js-line-number" data-line-number="3153"></td>
        <td id="LC3153" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Missing username in TODO; it should look like &#39;</span></td>
      </tr>
      <tr>
        <td id="L3154" class="blob-num js-line-number" data-line-number="3154"></td>
        <td id="LC3154" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;&quot;// TODO(my_username): Stuff.&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3155" class="blob-num js-line-number" data-line-number="3155"></td>
        <td id="LC3155" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3156" class="blob-num js-line-number" data-line-number="3156"></td>
        <td id="LC3156" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>middle_whitespace</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)</td>
      </tr>
      <tr>
        <td id="L3157" class="blob-num js-line-number" data-line-number="3157"></td>
        <td id="LC3157" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Comparisons made explicit for correctness -- pylint: disable=g-explicit-bool-comparison</span></td>
      </tr>
      <tr>
        <td id="L3158" class="blob-num js-line-number" data-line-number="3158"></td>
        <td id="LC3158" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>middle_whitespace</span> <span class=pl-c1>!=</span> <span class=pl-s>&#39; &#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>middle_whitespace</span> <span class=pl-c1>!=</span> <span class=pl-s>&#39;&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L3159" class="blob-num js-line-number" data-line-number="3159"></td>
        <td id="LC3159" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/todo&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3160" class="blob-num js-line-number" data-line-number="3160"></td>
        <td id="LC3160" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;TODO(my_username) should be followed by a space&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3161" class="blob-num js-line-number" data-line-number="3161"></td>
        <td id="LC3161" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3162" class="blob-num js-line-number" data-line-number="3162"></td>
        <td id="LC3162" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># If the comment contains an alphanumeric character, there</span></td>
      </tr>
      <tr>
        <td id="L3163" class="blob-num js-line-number" data-line-number="3163"></td>
        <td id="LC3163" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># should be a space somewhere between it and the // unless</span></td>
      </tr>
      <tr>
        <td id="L3164" class="blob-num js-line-number" data-line-number="3164"></td>
        <td id="LC3164" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># it&#39;s a /// or //! Doxygen comment.</span></td>
      </tr>
      <tr>
        <td id="L3165" class="blob-num js-line-number" data-line-number="3165"></td>
        <td id="LC3165" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;//[^ ]*\w&#39;</span>, <span class=pl-s1>comment</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3166" class="blob-num js-line-number" data-line-number="3166"></td>
        <td id="LC3166" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;(///|//\!)(\s+|$)&#39;</span>, <span class=pl-s1>comment</span>)):</td>
      </tr>
      <tr>
        <td id="L3167" class="blob-num js-line-number" data-line-number="3167"></td>
        <td id="LC3167" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/comments&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3168" class="blob-num js-line-number" data-line-number="3168"></td>
        <td id="LC3168" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Should have a space between // and comment&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3169" class="blob-num js-line-number" data-line-number="3169"></td>
        <td id="LC3169" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3170" class="blob-num js-line-number" data-line-number="3170"></td>
        <td id="LC3170" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3171" class="blob-num js-line-number" data-line-number="3171"></td>
        <td id="LC3171" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3172" class="blob-num js-line-number" data-line-number="3172"></td>
        <td id="LC3172" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for the correctness of various spacing issues in the code.</span></td>
      </tr>
      <tr>
        <td id="L3173" class="blob-num js-line-number" data-line-number="3173"></td>
        <td id="LC3173" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3174" class="blob-num js-line-number" data-line-number="3174"></td>
        <td id="LC3174" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Things we check for: spaces around operators, spaces after</span></td>
      </tr>
      <tr>
        <td id="L3175" class="blob-num js-line-number" data-line-number="3175"></td>
        <td id="LC3175" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  if/for/while/switch, no spaces around parens in function calls, two</span></td>
      </tr>
      <tr>
        <td id="L3176" class="blob-num js-line-number" data-line-number="3176"></td>
        <td id="LC3176" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  spaces between code and comment, don&#39;t start a block with a blank</span></td>
      </tr>
      <tr>
        <td id="L3177" class="blob-num js-line-number" data-line-number="3177"></td>
        <td id="LC3177" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  line, don&#39;t end a function with a blank line, don&#39;t add a blank line</span></td>
      </tr>
      <tr>
        <td id="L3178" class="blob-num js-line-number" data-line-number="3178"></td>
        <td id="LC3178" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  after public/protected/private, don&#39;t have too many blank lines in a row.</span></td>
      </tr>
      <tr>
        <td id="L3179" class="blob-num js-line-number" data-line-number="3179"></td>
        <td id="LC3179" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3180" class="blob-num js-line-number" data-line-number="3180"></td>
        <td id="LC3180" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3181" class="blob-num js-line-number" data-line-number="3181"></td>
        <td id="LC3181" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3182" class="blob-num js-line-number" data-line-number="3182"></td>
        <td id="LC3182" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3183" class="blob-num js-line-number" data-line-number="3183"></td>
        <td id="LC3183" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3184" class="blob-num js-line-number" data-line-number="3184"></td>
        <td id="LC3184" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L3185" class="blob-num js-line-number" data-line-number="3185"></td>
        <td id="LC3185" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L3186" class="blob-num js-line-number" data-line-number="3186"></td>
        <td id="LC3186" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3187" class="blob-num js-line-number" data-line-number="3187"></td>
        <td id="LC3187" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3188" class="blob-num js-line-number" data-line-number="3188"></td>
        <td id="LC3188" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3189" class="blob-num js-line-number" data-line-number="3189"></td>
        <td id="LC3189" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t use &quot;elided&quot; lines here, otherwise we can&#39;t check commented lines.</span></td>
      </tr>
      <tr>
        <td id="L3190" class="blob-num js-line-number" data-line-number="3190"></td>
        <td id="LC3190" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t want to use &quot;raw&quot; either, because we don&#39;t want to check inside C++11</span></td>
      </tr>
      <tr>
        <td id="L3191" class="blob-num js-line-number" data-line-number="3191"></td>
        <td id="LC3191" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># raw strings,</span></td>
      </tr>
      <tr>
        <td id="L3192" class="blob-num js-line-number" data-line-number="3192"></td>
        <td id="LC3192" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>raw</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines_without_raw_strings</span></td>
      </tr>
      <tr>
        <td id="L3193" class="blob-num js-line-number" data-line-number="3193"></td>
        <td id="LC3193" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3194" class="blob-num js-line-number" data-line-number="3194"></td>
        <td id="LC3194" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3195" class="blob-num js-line-number" data-line-number="3195"></td>
        <td id="LC3195" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Before nixing comments, check if the line is blank for no good</span></td>
      </tr>
      <tr>
        <td id="L3196" class="blob-num js-line-number" data-line-number="3196"></td>
        <td id="LC3196" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># reason.  This includes the first line after a block is opened, and</span></td>
      </tr>
      <tr>
        <td id="L3197" class="blob-num js-line-number" data-line-number="3197"></td>
        <td id="LC3197" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># blank lines at the end of a function (ie, right before a line like &#39;}&#39;</span></td>
      </tr>
      <tr>
        <td id="L3198" class="blob-num js-line-number" data-line-number="3198"></td>
        <td id="LC3198" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3199" class="blob-num js-line-number" data-line-number="3199"></td>
        <td id="LC3199" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Skip all the blank line checks if we are immediately inside a</span></td>
      </tr>
      <tr>
        <td id="L3200" class="blob-num js-line-number" data-line-number="3200"></td>
        <td id="LC3200" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># namespace body.  In other words, don&#39;t issue blank line warnings</span></td>
      </tr>
      <tr>
        <td id="L3201" class="blob-num js-line-number" data-line-number="3201"></td>
        <td id="LC3201" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># for this block:</span></td>
      </tr>
      <tr>
        <td id="L3202" class="blob-num js-line-number" data-line-number="3202"></td>
        <td id="LC3202" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   namespace {</span></td>
      </tr>
      <tr>
        <td id="L3203" class="blob-num js-line-number" data-line-number="3203"></td>
        <td id="LC3203" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3204" class="blob-num js-line-number" data-line-number="3204"></td>
        <td id="LC3204" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   }</span></td>
      </tr>
      <tr>
        <td id="L3205" class="blob-num js-line-number" data-line-number="3205"></td>
        <td id="LC3205" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3206" class="blob-num js-line-number" data-line-number="3206"></td>
        <td id="LC3206" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># A warning about missing end of namespace comments will be issued instead.</span></td>
      </tr>
      <tr>
        <td id="L3207" class="blob-num js-line-number" data-line-number="3207"></td>
        <td id="LC3207" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3208" class="blob-num js-line-number" data-line-number="3208"></td>
        <td id="LC3208" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Also skip blank line checks for &#39;extern &quot;C&quot;&#39; blocks, which are formatted</span></td>
      </tr>
      <tr>
        <td id="L3209" class="blob-num js-line-number" data-line-number="3209"></td>
        <td id="LC3209" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># like namespaces.</span></td>
      </tr>
      <tr>
        <td id="L3210" class="blob-num js-line-number" data-line-number="3210"></td>
        <td id="LC3210" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>IsBlankLine</span>(<span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3211" class="blob-num js-line-number" data-line-number="3211"></td>
        <td id="LC3211" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InNamespaceBody</span>() <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3212" class="blob-num js-line-number" data-line-number="3212"></td>
        <td id="LC3212" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InExternC</span>()):</td>
      </tr>
      <tr>
        <td id="L3213" class="blob-num js-line-number" data-line-number="3213"></td>
        <td id="LC3213" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>elided</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L3214" class="blob-num js-line-number" data-line-number="3214"></td>
        <td id="LC3214" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prev_line</span> <span class=pl-c1>=</span> <span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3215" class="blob-num js-line-number" data-line-number="3215"></td>
        <td id="LC3215" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prevbrace</span> <span class=pl-c1>=</span> <span class=pl-s1>prev_line</span>.<span class=pl-en>rfind</span>(<span class=pl-s>&#39;{&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3216" class="blob-num js-line-number" data-line-number="3216"></td>
        <td id="LC3216" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># TODO(unknown): Don&#39;t complain if line before blank line, and line after,</span></td>
      </tr>
      <tr>
        <td id="L3217" class="blob-num js-line-number" data-line-number="3217"></td>
        <td id="LC3217" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                both start with alnums and are indented the same amount.</span></td>
      </tr>
      <tr>
        <td id="L3218" class="blob-num js-line-number" data-line-number="3218"></td>
        <td id="LC3218" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                This ignores whitespace at the start of a namespace block</span></td>
      </tr>
      <tr>
        <td id="L3219" class="blob-num js-line-number" data-line-number="3219"></td>
        <td id="LC3219" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                because those are not usually indented.</span></td>
      </tr>
      <tr>
        <td id="L3220" class="blob-num js-line-number" data-line-number="3220"></td>
        <td id="LC3220" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>prevbrace</span> <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>and</span> <span class=pl-s1>prev_line</span>[<span class=pl-s1>prevbrace</span>:].<span class=pl-en>find</span>(<span class=pl-s>&#39;}&#39;</span>) <span class=pl-c1>==</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3221" class="blob-num js-line-number" data-line-number="3221"></td>
        <td id="LC3221" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># OK, we have a blank line at the start of a code block.  Before we</span></td>
      </tr>
      <tr>
        <td id="L3222" class="blob-num js-line-number" data-line-number="3222"></td>
        <td id="LC3222" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># complain, we check if it is an exception to the rule: The previous</span></td>
      </tr>
      <tr>
        <td id="L3223" class="blob-num js-line-number" data-line-number="3223"></td>
        <td id="LC3223" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># non-empty line has the parameters of a function header that are indented</span></td>
      </tr>
      <tr>
        <td id="L3224" class="blob-num js-line-number" data-line-number="3224"></td>
        <td id="LC3224" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 4 spaces (because they did not fit in a 80 column line when placed on</span></td>
      </tr>
      <tr>
        <td id="L3225" class="blob-num js-line-number" data-line-number="3225"></td>
        <td id="LC3225" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># the same line as the function name).  We also check for the case where</span></td>
      </tr>
      <tr>
        <td id="L3226" class="blob-num js-line-number" data-line-number="3226"></td>
        <td id="LC3226" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># the previous line is indented 6 spaces, which may happen when the</span></td>
      </tr>
      <tr>
        <td id="L3227" class="blob-num js-line-number" data-line-number="3227"></td>
        <td id="LC3227" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># initializers of a constructor do not fit into a 80 column line.</span></td>
      </tr>
      <tr>
        <td id="L3228" class="blob-num js-line-number" data-line-number="3228"></td>
        <td id="LC3228" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>exception</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3229" class="blob-num js-line-number" data-line-number="3229"></td>
        <td id="LC3229" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39; {6}\w&#39;</span>, <span class=pl-s1>prev_line</span>):  <span class=pl-c># Initializer list?</span></td>
      </tr>
      <tr>
        <td id="L3230" class="blob-num js-line-number" data-line-number="3230"></td>
        <td id="LC3230" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># We are looking for the opening column of initializer list, which</span></td>
      </tr>
      <tr>
        <td id="L3231" class="blob-num js-line-number" data-line-number="3231"></td>
        <td id="LC3231" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># should be indented 4 spaces to cause 6 space indentation afterwards.</span></td>
      </tr>
      <tr>
        <td id="L3232" class="blob-num js-line-number" data-line-number="3232"></td>
        <td id="LC3232" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>search_position</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span><span class=pl-c1>-</span><span class=pl-c1>2</span></td>
      </tr>
      <tr>
        <td id="L3233" class="blob-num js-line-number" data-line-number="3233"></td>
        <td id="LC3233" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>while</span> (<span class=pl-s1>search_position</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L3234" class="blob-num js-line-number" data-line-number="3234"></td>
        <td id="LC3234" class="blob-code blob-code-inner js-file-line">               <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39; {6}\w&#39;</span>, <span class=pl-s1>elided</span>[<span class=pl-s1>search_position</span>])):</td>
      </tr>
      <tr>
        <td id="L3235" class="blob-num js-line-number" data-line-number="3235"></td>
        <td id="LC3235" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>search_position</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3236" class="blob-num js-line-number" data-line-number="3236"></td>
        <td id="LC3236" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>exception</span> <span class=pl-c1>=</span> (<span class=pl-s1>search_position</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L3237" class="blob-num js-line-number" data-line-number="3237"></td>
        <td id="LC3237" class="blob-code blob-code-inner js-file-line">                     <span class=pl-c1>and</span> <span class=pl-s1>elided</span>[<span class=pl-s1>search_position</span>][:<span class=pl-c1>5</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;    :&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3238" class="blob-num js-line-number" data-line-number="3238"></td>
        <td id="LC3238" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3239" class="blob-num js-line-number" data-line-number="3239"></td>
        <td id="LC3239" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Search for the function arguments or an initializer list.  We use a</span></td>
      </tr>
      <tr>
        <td id="L3240" class="blob-num js-line-number" data-line-number="3240"></td>
        <td id="LC3240" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># simple heuristic here: If the line is indented 4 spaces; and we have a</span></td>
      </tr>
      <tr>
        <td id="L3241" class="blob-num js-line-number" data-line-number="3241"></td>
        <td id="LC3241" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># closing paren, without the opening paren, followed by an opening brace</span></td>
      </tr>
      <tr>
        <td id="L3242" class="blob-num js-line-number" data-line-number="3242"></td>
        <td id="LC3242" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># or colon (for initializer lists) we assume that it is the last line of</span></td>
      </tr>
      <tr>
        <td id="L3243" class="blob-num js-line-number" data-line-number="3243"></td>
        <td id="LC3243" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># a function header.  If we have a colon indented 4 spaces, it is an</span></td>
      </tr>
      <tr>
        <td id="L3244" class="blob-num js-line-number" data-line-number="3244"></td>
        <td id="LC3244" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># initializer list.</span></td>
      </tr>
      <tr>
        <td id="L3245" class="blob-num js-line-number" data-line-number="3245"></td>
        <td id="LC3245" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>exception</span> <span class=pl-c1>=</span> (<span class=pl-v>Match</span>(<span class=pl-s>r&#39; {4}\w[^\(]*\)\s*(const\s*)?(\{\s*$|:)&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L3246" class="blob-num js-line-number" data-line-number="3246"></td>
        <td id="LC3246" class="blob-code blob-code-inner js-file-line">                           <span class=pl-s1>prev_line</span>)</td>
      </tr>
      <tr>
        <td id="L3247" class="blob-num js-line-number" data-line-number="3247"></td>
        <td id="LC3247" class="blob-code blob-code-inner js-file-line">                     <span class=pl-c1>or</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39; {4}:&#39;</span>, <span class=pl-s1>prev_line</span>))</td>
      </tr>
      <tr>
        <td id="L3248" class="blob-num js-line-number" data-line-number="3248"></td>
        <td id="LC3248" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3249" class="blob-num js-line-number" data-line-number="3249"></td>
        <td id="LC3249" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>exception</span>:</td>
      </tr>
      <tr>
        <td id="L3250" class="blob-num js-line-number" data-line-number="3250"></td>
        <td id="LC3250" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/blank_line&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3251" class="blob-num js-line-number" data-line-number="3251"></td>
        <td id="LC3251" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Redundant blank line at the start of a code block &#39;</span></td>
      </tr>
      <tr>
        <td id="L3252" class="blob-num js-line-number" data-line-number="3252"></td>
        <td id="LC3252" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;should be deleted.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3253" class="blob-num js-line-number" data-line-number="3253"></td>
        <td id="LC3253" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Ignore blank lines at the end of a block in a long if-else</span></td>
      </tr>
      <tr>
        <td id="L3254" class="blob-num js-line-number" data-line-number="3254"></td>
        <td id="LC3254" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># chain, like this:</span></td>
      </tr>
      <tr>
        <td id="L3255" class="blob-num js-line-number" data-line-number="3255"></td>
        <td id="LC3255" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   if (condition1) {</span></td>
      </tr>
      <tr>
        <td id="L3256" class="blob-num js-line-number" data-line-number="3256"></td>
        <td id="LC3256" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#     // Something followed by a blank line</span></td>
      </tr>
      <tr>
        <td id="L3257" class="blob-num js-line-number" data-line-number="3257"></td>
        <td id="LC3257" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3258" class="blob-num js-line-number" data-line-number="3258"></td>
        <td id="LC3258" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   } else if (condition2) {</span></td>
      </tr>
      <tr>
        <td id="L3259" class="blob-num js-line-number" data-line-number="3259"></td>
        <td id="LC3259" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#     // Something else</span></td>
      </tr>
      <tr>
        <td id="L3260" class="blob-num js-line-number" data-line-number="3260"></td>
        <td id="LC3260" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   }</span></td>
      </tr>
      <tr>
        <td id="L3261" class="blob-num js-line-number" data-line-number="3261"></td>
        <td id="LC3261" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>():</td>
      </tr>
      <tr>
        <td id="L3262" class="blob-num js-line-number" data-line-number="3262"></td>
        <td id="LC3262" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>next_line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3263" class="blob-num js-line-number" data-line-number="3263"></td>
        <td id="LC3263" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>next_line</span></td>
      </tr>
      <tr>
        <td id="L3264" class="blob-num js-line-number" data-line-number="3264"></td>
        <td id="LC3264" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*}&#39;</span>, <span class=pl-s1>next_line</span>)</td>
      </tr>
      <tr>
        <td id="L3265" class="blob-num js-line-number" data-line-number="3265"></td>
        <td id="LC3265" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>and</span> <span class=pl-s1>next_line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;} else &#39;</span>) <span class=pl-c1>==</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L3266" class="blob-num js-line-number" data-line-number="3266"></td>
        <td id="LC3266" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/blank_line&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3267" class="blob-num js-line-number" data-line-number="3267"></td>
        <td id="LC3267" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Redundant blank line at the end of a code block &#39;</span></td>
      </tr>
      <tr>
        <td id="L3268" class="blob-num js-line-number" data-line-number="3268"></td>
        <td id="LC3268" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;should be deleted.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3269" class="blob-num js-line-number" data-line-number="3269"></td>
        <td id="LC3269" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3270" class="blob-num js-line-number" data-line-number="3270"></td>
        <td id="LC3270" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(public|protected|private):&#39;</span>, <span class=pl-s1>prev_line</span>)</td>
      </tr>
      <tr>
        <td id="L3271" class="blob-num js-line-number" data-line-number="3271"></td>
        <td id="LC3271" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L3272" class="blob-num js-line-number" data-line-number="3272"></td>
        <td id="LC3272" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/blank_line&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3273" class="blob-num js-line-number" data-line-number="3273"></td>
        <td id="LC3273" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Do not leave a blank line after &quot;%s:&quot;&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3274" class="blob-num js-line-number" data-line-number="3274"></td>
        <td id="LC3274" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3275" class="blob-num js-line-number" data-line-number="3275"></td>
        <td id="LC3275" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Next, check comments</span></td>
      </tr>
      <tr>
        <td id="L3276" class="blob-num js-line-number" data-line-number="3276"></td>
        <td id="LC3276" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>next_line_start</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L3277" class="blob-num js-line-number" data-line-number="3277"></td>
        <td id="LC3277" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>():</td>
      </tr>
      <tr>
        <td id="L3278" class="blob-num js-line-number" data-line-number="3278"></td>
        <td id="LC3278" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>next_line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3279" class="blob-num js-line-number" data-line-number="3279"></td>
        <td id="LC3279" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>next_line_start</span> <span class=pl-c1>=</span> <span class=pl-en>len</span>(<span class=pl-s1>next_line</span>) <span class=pl-c1>-</span> <span class=pl-en>len</span>(<span class=pl-s1>next_line</span>.<span class=pl-en>lstrip</span>())</td>
      </tr>
      <tr>
        <td id="L3280" class="blob-num js-line-number" data-line-number="3280"></td>
        <td id="LC3280" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckComment</span>(<span class=pl-s1>line</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>next_line_start</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L3281" class="blob-num js-line-number" data-line-number="3281"></td>
        <td id="LC3281" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3282" class="blob-num js-line-number" data-line-number="3282"></td>
        <td id="LC3282" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># get rid of comments and strings</span></td>
      </tr>
      <tr>
        <td id="L3283" class="blob-num js-line-number" data-line-number="3283"></td>
        <td id="LC3283" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3284" class="blob-num js-line-number" data-line-number="3284"></td>
        <td id="LC3284" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3285" class="blob-num js-line-number" data-line-number="3285"></td>
        <td id="LC3285" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># You shouldn&#39;t have spaces before your brackets, except maybe after</span></td>
      </tr>
      <tr>
        <td id="L3286" class="blob-num js-line-number" data-line-number="3286"></td>
        <td id="LC3286" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># &#39;delete []&#39;, &#39;return []() {};&#39;, or &#39;auto [abc, ...] = ...;&#39;.</span></td>
      </tr>
      <tr>
        <td id="L3287" class="blob-num js-line-number" data-line-number="3287"></td>
        <td id="LC3287" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\w\s+\[&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(?:auto&amp;?|delete|return)\s+\[&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3288" class="blob-num js-line-number" data-line-number="3288"></td>
        <td id="LC3288" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/braces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3289" class="blob-num js-line-number" data-line-number="3289"></td>
        <td id="LC3289" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Extra space before [&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3290" class="blob-num js-line-number" data-line-number="3290"></td>
        <td id="LC3290" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3291" class="blob-num js-line-number" data-line-number="3291"></td>
        <td id="LC3291" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># In range-based for, we wanted spaces before and after the colon, but</span></td>
      </tr>
      <tr>
        <td id="L3292" class="blob-num js-line-number" data-line-number="3292"></td>
        <td id="LC3292" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># not around &quot;::&quot; tokens that might appear.</span></td>
      </tr>
      <tr>
        <td id="L3293" class="blob-num js-line-number" data-line-number="3293"></td>
        <td id="LC3293" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;for *\(.*[^:]:[^: ]&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3294" class="blob-num js-line-number" data-line-number="3294"></td>
        <td id="LC3294" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>Search</span>(<span class=pl-s>r&#39;for *\(.*[^: ]:[^:]&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L3295" class="blob-num js-line-number" data-line-number="3295"></td>
        <td id="LC3295" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/forcolon&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L3296" class="blob-num js-line-number" data-line-number="3296"></td>
        <td id="LC3296" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing space around colon in range-based for loop&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3297" class="blob-num js-line-number" data-line-number="3297"></td>
        <td id="LC3297" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3298" class="blob-num js-line-number" data-line-number="3298"></td>
        <td id="LC3298" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3299" class="blob-num js-line-number" data-line-number="3299"></td>
        <td id="LC3299" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckOperatorSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3300" class="blob-num js-line-number" data-line-number="3300"></td>
        <td id="LC3300" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for horizontal spacing around operators.</span></td>
      </tr>
      <tr>
        <td id="L3301" class="blob-num js-line-number" data-line-number="3301"></td>
        <td id="LC3301" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3302" class="blob-num js-line-number" data-line-number="3302"></td>
        <td id="LC3302" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3303" class="blob-num js-line-number" data-line-number="3303"></td>
        <td id="LC3303" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3304" class="blob-num js-line-number" data-line-number="3304"></td>
        <td id="LC3304" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3305" class="blob-num js-line-number" data-line-number="3305"></td>
        <td id="LC3305" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3306" class="blob-num js-line-number" data-line-number="3306"></td>
        <td id="LC3306" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3307" class="blob-num js-line-number" data-line-number="3307"></td>
        <td id="LC3307" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3308" class="blob-num js-line-number" data-line-number="3308"></td>
        <td id="LC3308" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3309" class="blob-num js-line-number" data-line-number="3309"></td>
        <td id="LC3309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3310" class="blob-num js-line-number" data-line-number="3310"></td>
        <td id="LC3310" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t try to do spacing checks for operator methods.  Do this by</span></td>
      </tr>
      <tr>
        <td id="L3311" class="blob-num js-line-number" data-line-number="3311"></td>
        <td id="LC3311" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># replacing the troublesome characters with something else,</span></td>
      </tr>
      <tr>
        <td id="L3312" class="blob-num js-line-number" data-line-number="3312"></td>
        <td id="LC3312" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># preserving column position for all other characters.</span></td>
      </tr>
      <tr>
        <td id="L3313" class="blob-num js-line-number" data-line-number="3313"></td>
        <td id="LC3313" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3314" class="blob-num js-line-number" data-line-number="3314"></td>
        <td id="LC3314" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The replacement is done repeatedly to avoid false positives from</span></td>
      </tr>
      <tr>
        <td id="L3315" class="blob-num js-line-number" data-line-number="3315"></td>
        <td id="LC3315" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># operators that call operators.</span></td>
      </tr>
      <tr>
        <td id="L3316" class="blob-num js-line-number" data-line-number="3316"></td>
        <td id="LC3316" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>
      </tr>
      <tr>
        <td id="L3317" class="blob-num js-line-number" data-line-number="3317"></td>
        <td id="LC3317" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*\boperator\b)(\S+)(\s*\(.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3318" class="blob-num js-line-number" data-line-number="3318"></td>
        <td id="LC3318" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3319" class="blob-num js-line-number" data-line-number="3319"></td>
        <td id="LC3319" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> (<span class=pl-s>&#39;_&#39;</span> <span class=pl-c1>*</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>))) <span class=pl-c1>+</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)</td>
      </tr>
      <tr>
        <td id="L3320" class="blob-num js-line-number" data-line-number="3320"></td>
        <td id="LC3320" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3321" class="blob-num js-line-number" data-line-number="3321"></td>
        <td id="LC3321" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L3322" class="blob-num js-line-number" data-line-number="3322"></td>
        <td id="LC3322" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3323" class="blob-num js-line-number" data-line-number="3323"></td>
        <td id="LC3323" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We allow no-spaces around = within an if: &quot;if ( (a=Foo()) == 0 )&quot;.</span></td>
      </tr>
      <tr>
        <td id="L3324" class="blob-num js-line-number" data-line-number="3324"></td>
        <td id="LC3324" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Otherwise not.  Note we only check for non-spaces on *both* sides;</span></td>
      </tr>
      <tr>
        <td id="L3325" class="blob-num js-line-number" data-line-number="3325"></td>
        <td id="LC3325" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># sometimes people put non-spaces on one side when aligning =&#39;s among</span></td>
      </tr>
      <tr>
        <td id="L3326" class="blob-num js-line-number" data-line-number="3326"></td>
        <td id="LC3326" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># many lines (not that this is behavior that I approve of...)</span></td>
      </tr>
      <tr>
        <td id="L3327" class="blob-num js-line-number" data-line-number="3327"></td>
        <td id="LC3327" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> ((<span class=pl-v>Search</span>(<span class=pl-s>r&#39;[\w.]=&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3328" class="blob-num js-line-number" data-line-number="3328"></td>
        <td id="LC3328" class="blob-code blob-code-inner js-file-line">       <span class=pl-v>Search</span>(<span class=pl-s>r&#39;=[\w.]&#39;</span>, <span class=pl-s1>line</span>))</td>
      </tr>
      <tr>
        <td id="L3329" class="blob-num js-line-number" data-line-number="3329"></td>
        <td id="LC3329" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(if|while|for) &#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3330" class="blob-num js-line-number" data-line-number="3330"></td>
        <td id="LC3330" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Operators taken from [lex.operators] in C++11 standard.</span></td>
      </tr>
      <tr>
        <td id="L3331" class="blob-num js-line-number" data-line-number="3331"></td>
        <td id="LC3331" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(&gt;=|&lt;=|==|!=|&amp;=|\^=|\|=|\+=|\*=|\/=|\%=)&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3332" class="blob-num js-line-number" data-line-number="3332"></td>
        <td id="LC3332" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;operator=&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L3333" class="blob-num js-line-number" data-line-number="3333"></td>
        <td id="LC3333" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3334" class="blob-num js-line-number" data-line-number="3334"></td>
        <td id="LC3334" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing spaces around =&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3335" class="blob-num js-line-number" data-line-number="3335"></td>
        <td id="LC3335" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3336" class="blob-num js-line-number" data-line-number="3336"></td>
        <td id="LC3336" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># It&#39;s ok not to have spaces around binary operators like + - * /, but if</span></td>
      </tr>
      <tr>
        <td id="L3337" class="blob-num js-line-number" data-line-number="3337"></td>
        <td id="LC3337" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># there&#39;s too little whitespace, we get concerned.  It&#39;s hard to tell,</span></td>
      </tr>
      <tr>
        <td id="L3338" class="blob-num js-line-number" data-line-number="3338"></td>
        <td id="LC3338" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># though, so we punt on this one for now.  TODO.</span></td>
      </tr>
      <tr>
        <td id="L3339" class="blob-num js-line-number" data-line-number="3339"></td>
        <td id="LC3339" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3340" class="blob-num js-line-number" data-line-number="3340"></td>
        <td id="LC3340" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># You should always have whitespace around binary operators.</span></td>
      </tr>
      <tr>
        <td id="L3341" class="blob-num js-line-number" data-line-number="3341"></td>
        <td id="LC3341" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3342" class="blob-num js-line-number" data-line-number="3342"></td>
        <td id="LC3342" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check &lt;= and &gt;= first to avoid false positives with &lt; and &gt;, then</span></td>
      </tr>
      <tr>
        <td id="L3343" class="blob-num js-line-number" data-line-number="3343"></td>
        <td id="LC3343" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># check non-include lines for spacing around &lt; and &gt;.</span></td>
      </tr>
      <tr>
        <td id="L3344" class="blob-num js-line-number" data-line-number="3344"></td>
        <td id="LC3344" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3345" class="blob-num js-line-number" data-line-number="3345"></td>
        <td id="LC3345" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If the operator is followed by a comma, assume it&#39;s be used in a</span></td>
      </tr>
      <tr>
        <td id="L3346" class="blob-num js-line-number" data-line-number="3346"></td>
        <td id="LC3346" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># macro context and don&#39;t do any checks.  This avoids false</span></td>
      </tr>
      <tr>
        <td id="L3347" class="blob-num js-line-number" data-line-number="3347"></td>
        <td id="LC3347" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># positives.</span></td>
      </tr>
      <tr>
        <td id="L3348" class="blob-num js-line-number" data-line-number="3348"></td>
        <td id="LC3348" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3349" class="blob-num js-line-number" data-line-number="3349"></td>
        <td id="LC3349" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Note that &amp;&amp; is not included here.  This is because there are too</span></td>
      </tr>
      <tr>
        <td id="L3350" class="blob-num js-line-number" data-line-number="3350"></td>
        <td id="LC3350" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># many false positives due to RValue references.</span></td>
      </tr>
      <tr>
        <td id="L3351" class="blob-num js-line-number" data-line-number="3351"></td>
        <td id="LC3351" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[^&lt;&gt;=!\s](==|!=|&lt;=|&gt;=|\|\|)[^&lt;&gt;=!\s,;\)]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3352" class="blob-num js-line-number" data-line-number="3352"></td>
        <td id="LC3352" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3353" class="blob-num js-line-number" data-line-number="3353"></td>
        <td id="LC3353" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3354" class="blob-num js-line-number" data-line-number="3354"></td>
        <td id="LC3354" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing spaces around %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3355" class="blob-num js-line-number" data-line-number="3355"></td>
        <td id="LC3355" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;#.*include&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3356" class="blob-num js-line-number" data-line-number="3356"></td>
        <td id="LC3356" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for &lt; that is not surrounded by spaces.  This is only</span></td>
      </tr>
      <tr>
        <td id="L3357" class="blob-num js-line-number" data-line-number="3357"></td>
        <td id="LC3357" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># triggered if both sides are missing spaces, even though</span></td>
      </tr>
      <tr>
        <td id="L3358" class="blob-num js-line-number" data-line-number="3358"></td>
        <td id="LC3358" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># technically should should flag if at least one side is missing a</span></td>
      </tr>
      <tr>
        <td id="L3359" class="blob-num js-line-number" data-line-number="3359"></td>
        <td id="LC3359" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># space.  This is done to avoid some false positives with shifts.</span></td>
      </tr>
      <tr>
        <td id="L3360" class="blob-num js-line-number" data-line-number="3360"></td>
        <td id="LC3360" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*[^\s&lt;])&lt;[^\s=&lt;,]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3361" class="blob-num js-line-number" data-line-number="3361"></td>
        <td id="LC3361" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3362" class="blob-num js-line-number" data-line-number="3362"></td>
        <td id="LC3362" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>_</span>, <span class=pl-s1>_</span>, <span class=pl-s1>end_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L3363" class="blob-num js-line-number" data-line-number="3363"></td>
        <td id="LC3363" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L3364" class="blob-num js-line-number" data-line-number="3364"></td>
        <td id="LC3364" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&lt;=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3365" class="blob-num js-line-number" data-line-number="3365"></td>
        <td id="LC3365" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3366" class="blob-num js-line-number" data-line-number="3366"></td>
        <td id="LC3366" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Missing spaces around &lt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3367" class="blob-num js-line-number" data-line-number="3367"></td>
        <td id="LC3367" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3368" class="blob-num js-line-number" data-line-number="3368"></td>
        <td id="LC3368" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for &gt; that is not surrounded by spaces.  Similar to the</span></td>
      </tr>
      <tr>
        <td id="L3369" class="blob-num js-line-number" data-line-number="3369"></td>
        <td id="LC3369" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># above, we only trigger if both sides are missing spaces to avoid</span></td>
      </tr>
      <tr>
        <td id="L3370" class="blob-num js-line-number" data-line-number="3370"></td>
        <td id="LC3370" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># false positives with shifts.</span></td>
      </tr>
      <tr>
        <td id="L3371" class="blob-num js-line-number" data-line-number="3371"></td>
        <td id="LC3371" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*[^-\s&gt;])&gt;[^\s=&gt;,]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3372" class="blob-num js-line-number" data-line-number="3372"></td>
        <td id="LC3372" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3373" class="blob-num js-line-number" data-line-number="3373"></td>
        <td id="LC3373" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>_</span>, <span class=pl-s1>_</span>, <span class=pl-s1>start_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>ReverseCloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L3374" class="blob-num js-line-number" data-line-number="3374"></td>
        <td id="LC3374" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L3375" class="blob-num js-line-number" data-line-number="3375"></td>
        <td id="LC3375" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>start_pos</span> <span class=pl-c1>&lt;=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3376" class="blob-num js-line-number" data-line-number="3376"></td>
        <td id="LC3376" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3377" class="blob-num js-line-number" data-line-number="3377"></td>
        <td id="LC3377" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Missing spaces around &gt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3378" class="blob-num js-line-number" data-line-number="3378"></td>
        <td id="LC3378" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3379" class="blob-num js-line-number" data-line-number="3379"></td>
        <td id="LC3379" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We allow no-spaces around &lt;&lt; when used like this: 10&lt;&lt;20, but</span></td>
      </tr>
      <tr>
        <td id="L3380" class="blob-num js-line-number" data-line-number="3380"></td>
        <td id="LC3380" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># not otherwise (particularly, not when used as streams)</span></td>
      </tr>
      <tr>
        <td id="L3381" class="blob-num js-line-number" data-line-number="3381"></td>
        <td id="LC3381" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3382" class="blob-num js-line-number" data-line-number="3382"></td>
        <td id="LC3382" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We also allow operators following an opening parenthesis, since</span></td>
      </tr>
      <tr>
        <td id="L3383" class="blob-num js-line-number" data-line-number="3383"></td>
        <td id="LC3383" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># those tend to be macros that deal with operators.</span></td>
      </tr>
      <tr>
        <td id="L3384" class="blob-num js-line-number" data-line-number="3384"></td>
        <td id="LC3384" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(operator|[^\s(&lt;])(?:L|UL|LL|ULL|l|ul|ll|ull)?&lt;&lt;([^\s,=&lt;])&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3385" class="blob-num js-line-number" data-line-number="3385"></td>
        <td id="LC3385" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>).<span class=pl-en>isdigit</span>() <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>).<span class=pl-en>isdigit</span>()) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3386" class="blob-num js-line-number" data-line-number="3386"></td>
        <td id="LC3386" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;operator&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;;&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L3387" class="blob-num js-line-number" data-line-number="3387"></td>
        <td id="LC3387" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3388" class="blob-num js-line-number" data-line-number="3388"></td>
        <td id="LC3388" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing spaces around &lt;&lt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3389" class="blob-num js-line-number" data-line-number="3389"></td>
        <td id="LC3389" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3390" class="blob-num js-line-number" data-line-number="3390"></td>
        <td id="LC3390" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We allow no-spaces around &gt;&gt; for almost anything.  This is because</span></td>
      </tr>
      <tr>
        <td id="L3391" class="blob-num js-line-number" data-line-number="3391"></td>
        <td id="LC3391" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># C++11 allows &quot;&gt;&gt;&quot; to close nested templates, which accounts for</span></td>
      </tr>
      <tr>
        <td id="L3392" class="blob-num js-line-number" data-line-number="3392"></td>
        <td id="LC3392" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># most cases when &quot;&gt;&gt;&quot; is not followed by a space.</span></td>
      </tr>
      <tr>
        <td id="L3393" class="blob-num js-line-number" data-line-number="3393"></td>
        <td id="LC3393" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3394" class="blob-num js-line-number" data-line-number="3394"></td>
        <td id="LC3394" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We still warn on &quot;&gt;&gt;&quot; followed by alpha character, because that is</span></td>
      </tr>
      <tr>
        <td id="L3395" class="blob-num js-line-number" data-line-number="3395"></td>
        <td id="LC3395" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># likely due to &quot;&gt;&gt;&quot; being used for right shifts, e.g.:</span></td>
      </tr>
      <tr>
        <td id="L3396" class="blob-num js-line-number" data-line-number="3396"></td>
        <td id="LC3396" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   value &gt;&gt; alpha</span></td>
      </tr>
      <tr>
        <td id="L3397" class="blob-num js-line-number" data-line-number="3397"></td>
        <td id="LC3397" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3398" class="blob-num js-line-number" data-line-number="3398"></td>
        <td id="LC3398" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># When &quot;&gt;&gt;&quot; is used to close templates, the alphanumeric letter that</span></td>
      </tr>
      <tr>
        <td id="L3399" class="blob-num js-line-number" data-line-number="3399"></td>
        <td id="LC3399" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># follows would be part of an identifier, and there should still be</span></td>
      </tr>
      <tr>
        <td id="L3400" class="blob-num js-line-number" data-line-number="3400"></td>
        <td id="LC3400" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># a space separating the template type and the identifier.</span></td>
      </tr>
      <tr>
        <td id="L3401" class="blob-num js-line-number" data-line-number="3401"></td>
        <td id="LC3401" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   type&lt;type&lt;type&gt;&gt; alpha</span></td>
      </tr>
      <tr>
        <td id="L3402" class="blob-num js-line-number" data-line-number="3402"></td>
        <td id="LC3402" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;&gt;&gt;[a-zA-Z_]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3403" class="blob-num js-line-number" data-line-number="3403"></td>
        <td id="LC3403" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3404" class="blob-num js-line-number" data-line-number="3404"></td>
        <td id="LC3404" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3405" class="blob-num js-line-number" data-line-number="3405"></td>
        <td id="LC3405" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing spaces around &gt;&gt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3406" class="blob-num js-line-number" data-line-number="3406"></td>
        <td id="LC3406" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3407" class="blob-num js-line-number" data-line-number="3407"></td>
        <td id="LC3407" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># There shouldn&#39;t be space around unary operators</span></td>
      </tr>
      <tr>
        <td id="L3408" class="blob-num js-line-number" data-line-number="3408"></td>
        <td id="LC3408" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;(!\s|~\s|[\s]--[\s;]|[\s]\+\+[\s;])&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3409" class="blob-num js-line-number" data-line-number="3409"></td>
        <td id="LC3409" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3410" class="blob-num js-line-number" data-line-number="3410"></td>
        <td id="LC3410" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/operators&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3411" class="blob-num js-line-number" data-line-number="3411"></td>
        <td id="LC3411" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Extra space for operator %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3412" class="blob-num js-line-number" data-line-number="3412"></td>
        <td id="LC3412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3413" class="blob-num js-line-number" data-line-number="3413"></td>
        <td id="LC3413" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3414" class="blob-num js-line-number" data-line-number="3414"></td>
        <td id="LC3414" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckParenthesisSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3415" class="blob-num js-line-number" data-line-number="3415"></td>
        <td id="LC3415" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for horizontal spacing around parentheses.</span></td>
      </tr>
      <tr>
        <td id="L3416" class="blob-num js-line-number" data-line-number="3416"></td>
        <td id="LC3416" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3417" class="blob-num js-line-number" data-line-number="3417"></td>
        <td id="LC3417" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3418" class="blob-num js-line-number" data-line-number="3418"></td>
        <td id="LC3418" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3419" class="blob-num js-line-number" data-line-number="3419"></td>
        <td id="LC3419" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3420" class="blob-num js-line-number" data-line-number="3420"></td>
        <td id="LC3420" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3421" class="blob-num js-line-number" data-line-number="3421"></td>
        <td id="LC3421" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3422" class="blob-num js-line-number" data-line-number="3422"></td>
        <td id="LC3422" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3423" class="blob-num js-line-number" data-line-number="3423"></td>
        <td id="LC3423" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3424" class="blob-num js-line-number" data-line-number="3424"></td>
        <td id="LC3424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3425" class="blob-num js-line-number" data-line-number="3425"></td>
        <td id="LC3425" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># No spaces after an if, while, switch, or for</span></td>
      </tr>
      <tr>
        <td id="L3426" class="blob-num js-line-number" data-line-number="3426"></td>
        <td id="LC3426" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39; (if\(|for\(|while\(|switch\()&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3427" class="blob-num js-line-number" data-line-number="3427"></td>
        <td id="LC3427" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3428" class="blob-num js-line-number" data-line-number="3428"></td>
        <td id="LC3428" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3429" class="blob-num js-line-number" data-line-number="3429"></td>
        <td id="LC3429" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing space before ( in %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3430" class="blob-num js-line-number" data-line-number="3430"></td>
        <td id="LC3430" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3431" class="blob-num js-line-number" data-line-number="3431"></td>
        <td id="LC3431" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># For if/for/while/switch, the left and right parens should be</span></td>
      </tr>
      <tr>
        <td id="L3432" class="blob-num js-line-number" data-line-number="3432"></td>
        <td id="LC3432" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># consistent about how many spaces are inside the parens, and</span></td>
      </tr>
      <tr>
        <td id="L3433" class="blob-num js-line-number" data-line-number="3433"></td>
        <td id="LC3433" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># there should either be zero or one spaces inside the parens.</span></td>
      </tr>
      <tr>
        <td id="L3434" class="blob-num js-line-number" data-line-number="3434"></td>
        <td id="LC3434" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We don&#39;t want: &quot;if ( foo)&quot; or &quot;if ( foo   )&quot;.</span></td>
      </tr>
      <tr>
        <td id="L3435" class="blob-num js-line-number" data-line-number="3435"></td>
        <td id="LC3435" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Exception: &quot;for ( ; foo; bar)&quot; and &quot;for (foo; bar; )&quot; are allowed.</span></td>
      </tr>
      <tr>
        <td id="L3436" class="blob-num js-line-number" data-line-number="3436"></td>
        <td id="LC3436" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(if|for|while|switch)\s*&#39;</span></td>
      </tr>
      <tr>
        <td id="L3437" class="blob-num js-line-number" data-line-number="3437"></td>
        <td id="LC3437" class="blob-code blob-code-inner js-file-line">                 <span class=pl-s>r&#39;\(([ ]*)(.).*[^ ]+([ ]*)\)\s*{\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L3438" class="blob-num js-line-number" data-line-number="3438"></td>
        <td id="LC3438" class="blob-code blob-code-inner js-file-line">                 <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3439" class="blob-num js-line-number" data-line-number="3439"></td>
        <td id="LC3439" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3440" class="blob-num js-line-number" data-line-number="3440"></td>
        <td id="LC3440" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)) <span class=pl-c1>!=</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>4</span>)):</td>
      </tr>
      <tr>
        <td id="L3441" class="blob-num js-line-number" data-line-number="3441"></td>
        <td id="LC3441" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;;&#39;</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3442" class="blob-num js-line-number" data-line-number="3442"></td>
        <td id="LC3442" class="blob-code blob-code-inner js-file-line">              <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)) <span class=pl-c1>==</span> <span class=pl-c1>1</span> <span class=pl-c1>+</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>4</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3443" class="blob-num js-line-number" data-line-number="3443"></td>
        <td id="LC3443" class="blob-code blob-code-inner js-file-line">              <span class=pl-c1>not</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bfor\s*\(.*; \)&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L3444" class="blob-num js-line-number" data-line-number="3444"></td>
        <td id="LC3444" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3445" class="blob-num js-line-number" data-line-number="3445"></td>
        <td id="LC3445" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Mismatching spaces inside () in %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3446" class="blob-num js-line-number" data-line-number="3446"></td>
        <td id="LC3446" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)) <span class=pl-c1>not</span> <span class=pl-c1>in</span> [<span class=pl-c1>0</span>, <span class=pl-c1>1</span>]:</td>
      </tr>
      <tr>
        <td id="L3447" class="blob-num js-line-number" data-line-number="3447"></td>
        <td id="LC3447" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/parens&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3448" class="blob-num js-line-number" data-line-number="3448"></td>
        <td id="LC3448" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Should have zero or one spaces inside ( and ) in %s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L3449" class="blob-num js-line-number" data-line-number="3449"></td>
        <td id="LC3449" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3450" class="blob-num js-line-number" data-line-number="3450"></td>
        <td id="LC3450" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3451" class="blob-num js-line-number" data-line-number="3451"></td>
        <td id="LC3451" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3452" class="blob-num js-line-number" data-line-number="3452"></td>
        <td id="LC3452" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckCommaSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3453" class="blob-num js-line-number" data-line-number="3453"></td>
        <td id="LC3453" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for horizontal spacing near commas and semicolons.</span></td>
      </tr>
      <tr>
        <td id="L3454" class="blob-num js-line-number" data-line-number="3454"></td>
        <td id="LC3454" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3455" class="blob-num js-line-number" data-line-number="3455"></td>
        <td id="LC3455" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3456" class="blob-num js-line-number" data-line-number="3456"></td>
        <td id="LC3456" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3457" class="blob-num js-line-number" data-line-number="3457"></td>
        <td id="LC3457" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3458" class="blob-num js-line-number" data-line-number="3458"></td>
        <td id="LC3458" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3459" class="blob-num js-line-number" data-line-number="3459"></td>
        <td id="LC3459" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3460" class="blob-num js-line-number" data-line-number="3460"></td>
        <td id="LC3460" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3461" class="blob-num js-line-number" data-line-number="3461"></td>
        <td id="LC3461" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>raw</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines_without_raw_strings</span></td>
      </tr>
      <tr>
        <td id="L3462" class="blob-num js-line-number" data-line-number="3462"></td>
        <td id="LC3462" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3463" class="blob-num js-line-number" data-line-number="3463"></td>
        <td id="LC3463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3464" class="blob-num js-line-number" data-line-number="3464"></td>
        <td id="LC3464" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># You should always have a space after a comma (either as fn arg or operator)</span></td>
      </tr>
      <tr>
        <td id="L3465" class="blob-num js-line-number" data-line-number="3465"></td>
        <td id="LC3465" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3466" class="blob-num js-line-number" data-line-number="3466"></td>
        <td id="LC3466" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This does not apply when the non-space character following the</span></td>
      </tr>
      <tr>
        <td id="L3467" class="blob-num js-line-number" data-line-number="3467"></td>
        <td id="LC3467" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># comma is another comma, since the only time when that happens is</span></td>
      </tr>
      <tr>
        <td id="L3468" class="blob-num js-line-number" data-line-number="3468"></td>
        <td id="LC3468" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># for empty macro arguments.</span></td>
      </tr>
      <tr>
        <td id="L3469" class="blob-num js-line-number" data-line-number="3469"></td>
        <td id="LC3469" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3470" class="blob-num js-line-number" data-line-number="3470"></td>
        <td id="LC3470" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We run this check in two passes: first pass on elided lines to</span></td>
      </tr>
      <tr>
        <td id="L3471" class="blob-num js-line-number" data-line-number="3471"></td>
        <td id="LC3471" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># verify that lines contain missing whitespaces, second pass on raw</span></td>
      </tr>
      <tr>
        <td id="L3472" class="blob-num js-line-number" data-line-number="3472"></td>
        <td id="LC3472" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># lines to confirm that those missing whitespaces are not due to</span></td>
      </tr>
      <tr>
        <td id="L3473" class="blob-num js-line-number" data-line-number="3473"></td>
        <td id="LC3473" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># elided comments.</span></td>
      </tr>
      <tr>
        <td id="L3474" class="blob-num js-line-number" data-line-number="3474"></td>
        <td id="LC3474" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;,[^,\s]&#39;</span>, <span class=pl-v>ReplaceAll</span>(<span class=pl-s>r&#39;\boperator\s*,\s*\(&#39;</span>, <span class=pl-s>&#39;F(&#39;</span>, <span class=pl-s1>line</span>)) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3475" class="blob-num js-line-number" data-line-number="3475"></td>
        <td id="LC3475" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>Search</span>(<span class=pl-s>r&#39;,[^,\s]&#39;</span>, <span class=pl-s1>raw</span>[<span class=pl-s1>linenum</span>])):</td>
      </tr>
      <tr>
        <td id="L3476" class="blob-num js-line-number" data-line-number="3476"></td>
        <td id="LC3476" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/comma&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3477" class="blob-num js-line-number" data-line-number="3477"></td>
        <td id="LC3477" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing space after ,&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3478" class="blob-num js-line-number" data-line-number="3478"></td>
        <td id="LC3478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3479" class="blob-num js-line-number" data-line-number="3479"></td>
        <td id="LC3479" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># You should always have a space after a semicolon</span></td>
      </tr>
      <tr>
        <td id="L3480" class="blob-num js-line-number" data-line-number="3480"></td>
        <td id="LC3480" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># except for few corner cases</span></td>
      </tr>
      <tr>
        <td id="L3481" class="blob-num js-line-number" data-line-number="3481"></td>
        <td id="LC3481" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): clarify if &#39;if (1) { return 1;}&#39; is requires one more</span></td>
      </tr>
      <tr>
        <td id="L3482" class="blob-num js-line-number" data-line-number="3482"></td>
        <td id="LC3482" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># space after ;</span></td>
      </tr>
      <tr>
        <td id="L3483" class="blob-num js-line-number" data-line-number="3483"></td>
        <td id="LC3483" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;;[^\s};\\)/]&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3484" class="blob-num js-line-number" data-line-number="3484"></td>
        <td id="LC3484" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/semicolon&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3485" class="blob-num js-line-number" data-line-number="3485"></td>
        <td id="LC3485" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing space after ;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3486" class="blob-num js-line-number" data-line-number="3486"></td>
        <td id="LC3486" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3487" class="blob-num js-line-number" data-line-number="3487"></td>
        <td id="LC3487" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3488" class="blob-num js-line-number" data-line-number="3488"></td>
        <td id="LC3488" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_IsType</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>expr</span>):</td>
      </tr>
      <tr>
        <td id="L3489" class="blob-num js-line-number" data-line-number="3489"></td>
        <td id="LC3489" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if expression looks like a type name, returns true if so.</span></td>
      </tr>
      <tr>
        <td id="L3490" class="blob-num js-line-number" data-line-number="3490"></td>
        <td id="LC3490" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3491" class="blob-num js-line-number" data-line-number="3491"></td>
        <td id="LC3491" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3492" class="blob-num js-line-number" data-line-number="3492"></td>
        <td id="LC3492" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3493" class="blob-num js-line-number" data-line-number="3493"></td>
        <td id="LC3493" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L3494" class="blob-num js-line-number" data-line-number="3494"></td>
        <td id="LC3494" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L3495" class="blob-num js-line-number" data-line-number="3495"></td>
        <td id="LC3495" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    expr: The expression to check.</span></td>
      </tr>
      <tr>
        <td id="L3496" class="blob-num js-line-number" data-line-number="3496"></td>
        <td id="LC3496" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L3497" class="blob-num js-line-number" data-line-number="3497"></td>
        <td id="LC3497" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True, if token looks like a type.</span></td>
      </tr>
      <tr>
        <td id="L3498" class="blob-num js-line-number" data-line-number="3498"></td>
        <td id="LC3498" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3499" class="blob-num js-line-number" data-line-number="3499"></td>
        <td id="LC3499" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Keep only the last token in the expression</span></td>
      </tr>
      <tr>
        <td id="L3500" class="blob-num js-line-number" data-line-number="3500"></td>
        <td id="LC3500" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>last_word</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^.*(\b\S+)$&#39;</span>, <span class=pl-s1>expr</span>)</td>
      </tr>
      <tr>
        <td id="L3501" class="blob-num js-line-number" data-line-number="3501"></td>
        <td id="LC3501" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>last_word</span>:</td>
      </tr>
      <tr>
        <td id="L3502" class="blob-num js-line-number" data-line-number="3502"></td>
        <td id="LC3502" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>token</span> <span class=pl-c1>=</span> <span class=pl-s1>last_word</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3503" class="blob-num js-line-number" data-line-number="3503"></td>
        <td id="LC3503" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3504" class="blob-num js-line-number" data-line-number="3504"></td>
        <td id="LC3504" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>token</span> <span class=pl-c1>=</span> <span class=pl-s1>expr</span></td>
      </tr>
      <tr>
        <td id="L3505" class="blob-num js-line-number" data-line-number="3505"></td>
        <td id="LC3505" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3506" class="blob-num js-line-number" data-line-number="3506"></td>
        <td id="LC3506" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Match native types and stdint types</span></td>
      </tr>
      <tr>
        <td id="L3507" class="blob-num js-line-number" data-line-number="3507"></td>
        <td id="LC3507" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>_TYPES</span>.<span class=pl-en>match</span>(<span class=pl-s1>token</span>):</td>
      </tr>
      <tr>
        <td id="L3508" class="blob-num js-line-number" data-line-number="3508"></td>
        <td id="LC3508" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3509" class="blob-num js-line-number" data-line-number="3509"></td>
        <td id="LC3509" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3510" class="blob-num js-line-number" data-line-number="3510"></td>
        <td id="LC3510" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Try a bit harder to match templated types.  Walk up the nesting</span></td>
      </tr>
      <tr>
        <td id="L3511" class="blob-num js-line-number" data-line-number="3511"></td>
        <td id="LC3511" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># stack until we find something that resembles a typename</span></td>
      </tr>
      <tr>
        <td id="L3512" class="blob-num js-line-number" data-line-number="3512"></td>
        <td id="LC3512" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># declaration for what we are looking for.</span></td>
      </tr>
      <tr>
        <td id="L3513" class="blob-num js-line-number" data-line-number="3513"></td>
        <td id="LC3513" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>typename_pattern</span> <span class=pl-c1>=</span> (<span class=pl-s>r&#39;\b(?:typename|class|struct)\s+&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>re</span>.<span class=pl-en>escape</span>(<span class=pl-s1>token</span>) <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L3514" class="blob-num js-line-number" data-line-number="3514"></td>
        <td id="LC3514" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>r&#39;\b&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3515" class="blob-num js-line-number" data-line-number="3515"></td>
        <td id="LC3515" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>block_index</span> <span class=pl-c1>=</span> <span class=pl-en>len</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3516" class="blob-num js-line-number" data-line-number="3516"></td>
        <td id="LC3516" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>block_index</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3517" class="blob-num js-line-number" data-line-number="3517"></td>
        <td id="LC3517" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-s1>block_index</span>], <span class=pl-s1>_NamespaceInfo</span>):</td>
      </tr>
      <tr>
        <td id="L3518" class="blob-num js-line-number" data-line-number="3518"></td>
        <td id="LC3518" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3519" class="blob-num js-line-number" data-line-number="3519"></td>
        <td id="LC3519" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3520" class="blob-num js-line-number" data-line-number="3520"></td>
        <td id="LC3520" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Found where the opening brace is.  We want to scan from this</span></td>
      </tr>
      <tr>
        <td id="L3521" class="blob-num js-line-number" data-line-number="3521"></td>
        <td id="LC3521" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># line up to the beginning of the function, minus a few lines.</span></td>
      </tr>
      <tr>
        <td id="L3522" class="blob-num js-line-number" data-line-number="3522"></td>
        <td id="LC3522" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   template &lt;typename Type1,  // stop scanning here</span></td>
      </tr>
      <tr>
        <td id="L3523" class="blob-num js-line-number" data-line-number="3523"></td>
        <td id="LC3523" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#             ...&gt;</span></td>
      </tr>
      <tr>
        <td id="L3524" class="blob-num js-line-number" data-line-number="3524"></td>
        <td id="LC3524" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   class C</span></td>
      </tr>
      <tr>
        <td id="L3525" class="blob-num js-line-number" data-line-number="3525"></td>
        <td id="LC3525" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#     : public ... {  // start scanning here</span></td>
      </tr>
      <tr>
        <td id="L3526" class="blob-num js-line-number" data-line-number="3526"></td>
        <td id="LC3526" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>last_line</span> <span class=pl-c1>=</span> <span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-s1>block_index</span>].<span class=pl-s1>starting_linenum</span></td>
      </tr>
      <tr>
        <td id="L3527" class="blob-num js-line-number" data-line-number="3527"></td>
        <td id="LC3527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3528" class="blob-num js-line-number" data-line-number="3528"></td>
        <td id="LC3528" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>next_block_start</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L3529" class="blob-num js-line-number" data-line-number="3529"></td>
        <td id="LC3529" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>block_index</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3530" class="blob-num js-line-number" data-line-number="3530"></td>
        <td id="LC3530" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>next_block_start</span> <span class=pl-c1>=</span> <span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-s1>block_index</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>].<span class=pl-s1>starting_linenum</span></td>
      </tr>
      <tr>
        <td id="L3531" class="blob-num js-line-number" data-line-number="3531"></td>
        <td id="LC3531" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>first_line</span> <span class=pl-c1>=</span> <span class=pl-s1>last_line</span></td>
      </tr>
      <tr>
        <td id="L3532" class="blob-num js-line-number" data-line-number="3532"></td>
        <td id="LC3532" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>while</span> <span class=pl-s1>first_line</span> <span class=pl-c1>&gt;=</span> <span class=pl-s1>next_block_start</span>:</td>
      </tr>
      <tr>
        <td id="L3533" class="blob-num js-line-number" data-line-number="3533"></td>
        <td id="LC3533" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>first_line</span>].<span class=pl-en>find</span>(<span class=pl-s>&#39;template&#39;</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3534" class="blob-num js-line-number" data-line-number="3534"></td>
        <td id="LC3534" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L3535" class="blob-num js-line-number" data-line-number="3535"></td>
        <td id="LC3535" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>first_line</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3536" class="blob-num js-line-number" data-line-number="3536"></td>
        <td id="LC3536" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>first_line</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>next_block_start</span>:</td>
      </tr>
      <tr>
        <td id="L3537" class="blob-num js-line-number" data-line-number="3537"></td>
        <td id="LC3537" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Didn&#39;t find any &quot;template&quot; keyword before reaching the next block,</span></td>
      </tr>
      <tr>
        <td id="L3538" class="blob-num js-line-number" data-line-number="3538"></td>
        <td id="LC3538" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># there are probably no template things to check for this block</span></td>
      </tr>
      <tr>
        <td id="L3539" class="blob-num js-line-number" data-line-number="3539"></td>
        <td id="LC3539" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>block_index</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3540" class="blob-num js-line-number" data-line-number="3540"></td>
        <td id="LC3540" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L3541" class="blob-num js-line-number" data-line-number="3541"></td>
        <td id="LC3541" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3542" class="blob-num js-line-number" data-line-number="3542"></td>
        <td id="LC3542" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Look for typename in the specified range</span></td>
      </tr>
      <tr>
        <td id="L3543" class="blob-num js-line-number" data-line-number="3543"></td>
        <td id="LC3543" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>first_line</span>, <span class=pl-s1>last_line</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>, <span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L3544" class="blob-num js-line-number" data-line-number="3544"></td>
        <td id="LC3544" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s1>typename_pattern</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]):</td>
      </tr>
      <tr>
        <td id="L3545" class="blob-num js-line-number" data-line-number="3545"></td>
        <td id="LC3545" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3546" class="blob-num js-line-number" data-line-number="3546"></td>
        <td id="LC3546" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>block_index</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3547" class="blob-num js-line-number" data-line-number="3547"></td>
        <td id="LC3547" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3548" class="blob-num js-line-number" data-line-number="3548"></td>
        <td id="LC3548" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3549" class="blob-num js-line-number" data-line-number="3549"></td>
        <td id="LC3549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3550" class="blob-num js-line-number" data-line-number="3550"></td>
        <td id="LC3550" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3551" class="blob-num js-line-number" data-line-number="3551"></td>
        <td id="LC3551" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckBracesSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3552" class="blob-num js-line-number" data-line-number="3552"></td>
        <td id="LC3552" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for horizontal spacing near commas.</span></td>
      </tr>
      <tr>
        <td id="L3553" class="blob-num js-line-number" data-line-number="3553"></td>
        <td id="LC3553" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3554" class="blob-num js-line-number" data-line-number="3554"></td>
        <td id="LC3554" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3555" class="blob-num js-line-number" data-line-number="3555"></td>
        <td id="LC3555" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3556" class="blob-num js-line-number" data-line-number="3556"></td>
        <td id="LC3556" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3557" class="blob-num js-line-number" data-line-number="3557"></td>
        <td id="LC3557" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3558" class="blob-num js-line-number" data-line-number="3558"></td>
        <td id="LC3558" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L3559" class="blob-num js-line-number" data-line-number="3559"></td>
        <td id="LC3559" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L3560" class="blob-num js-line-number" data-line-number="3560"></td>
        <td id="LC3560" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3561" class="blob-num js-line-number" data-line-number="3561"></td>
        <td id="LC3561" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3562" class="blob-num js-line-number" data-line-number="3562"></td>
        <td id="LC3562" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3563" class="blob-num js-line-number" data-line-number="3563"></td>
        <td id="LC3563" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3564" class="blob-num js-line-number" data-line-number="3564"></td>
        <td id="LC3564" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Except after an opening paren, or after another opening brace (in case of</span></td>
      </tr>
      <tr>
        <td id="L3565" class="blob-num js-line-number" data-line-number="3565"></td>
        <td id="LC3565" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># an initializer list, for instance), you should have spaces before your</span></td>
      </tr>
      <tr>
        <td id="L3566" class="blob-num js-line-number" data-line-number="3566"></td>
        <td id="LC3566" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># braces when they are delimiting blocks, classes, namespaces etc.</span></td>
      </tr>
      <tr>
        <td id="L3567" class="blob-num js-line-number" data-line-number="3567"></td>
        <td id="LC3567" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># And since you should never have braces at the beginning of a line,</span></td>
      </tr>
      <tr>
        <td id="L3568" class="blob-num js-line-number" data-line-number="3568"></td>
        <td id="LC3568" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># this is an easy test.  Except that braces used for initialization don&#39;t</span></td>
      </tr>
      <tr>
        <td id="L3569" class="blob-num js-line-number" data-line-number="3569"></td>
        <td id="LC3569" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># follow the same rule; we often don&#39;t want spaces before those.</span></td>
      </tr>
      <tr>
        <td id="L3570" class="blob-num js-line-number" data-line-number="3570"></td>
        <td id="LC3570" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*[^ ({&gt;]){&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3571" class="blob-num js-line-number" data-line-number="3571"></td>
        <td id="LC3571" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3572" class="blob-num js-line-number" data-line-number="3572"></td>
        <td id="LC3572" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3573" class="blob-num js-line-number" data-line-number="3573"></td>
        <td id="LC3573" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Try a bit harder to check for brace initialization.  This</span></td>
      </tr>
      <tr>
        <td id="L3574" class="blob-num js-line-number" data-line-number="3574"></td>
        <td id="LC3574" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># happens in one of the following forms:</span></td>
      </tr>
      <tr>
        <td id="L3575" class="blob-num js-line-number" data-line-number="3575"></td>
        <td id="LC3575" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Constructor() : initializer_list_{} { ... }</span></td>
      </tr>
      <tr>
        <td id="L3576" class="blob-num js-line-number" data-line-number="3576"></td>
        <td id="LC3576" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Constructor{}.MemberFunction()</span></td>
      </tr>
      <tr>
        <td id="L3577" class="blob-num js-line-number" data-line-number="3577"></td>
        <td id="LC3577" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Type variable{};</span></td>
      </tr>
      <tr>
        <td id="L3578" class="blob-num js-line-number" data-line-number="3578"></td>
        <td id="LC3578" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   FunctionCall(type{}, ...);</span></td>
      </tr>
      <tr>
        <td id="L3579" class="blob-num js-line-number" data-line-number="3579"></td>
        <td id="LC3579" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   LastArgument(..., type{});</span></td>
      </tr>
      <tr>
        <td id="L3580" class="blob-num js-line-number" data-line-number="3580"></td>
        <td id="LC3580" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   LOG(INFO) &lt;&lt; type{} &lt;&lt; &quot; ...&quot;;</span></td>
      </tr>
      <tr>
        <td id="L3581" class="blob-num js-line-number" data-line-number="3581"></td>
        <td id="LC3581" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   map_of_type[{...}] = ...;</span></td>
      </tr>
      <tr>
        <td id="L3582" class="blob-num js-line-number" data-line-number="3582"></td>
        <td id="LC3582" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   ternary = expr ? new type{} : nullptr;</span></td>
      </tr>
      <tr>
        <td id="L3583" class="blob-num js-line-number" data-line-number="3583"></td>
        <td id="LC3583" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   OuterTemplate&lt;InnerTemplateConstructor&lt;Type&gt;{}&gt;</span></td>
      </tr>
      <tr>
        <td id="L3584" class="blob-num js-line-number" data-line-number="3584"></td>
        <td id="LC3584" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3585" class="blob-num js-line-number" data-line-number="3585"></td>
        <td id="LC3585" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We check for the character following the closing brace, and</span></td>
      </tr>
      <tr>
        <td id="L3586" class="blob-num js-line-number" data-line-number="3586"></td>
        <td id="LC3586" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># silence the warning if it&#39;s one of those listed above, i.e.</span></td>
      </tr>
      <tr>
        <td id="L3587" class="blob-num js-line-number" data-line-number="3587"></td>
        <td id="LC3587" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># &quot;{.;,)&lt;&gt;]:&quot;.</span></td>
      </tr>
      <tr>
        <td id="L3588" class="blob-num js-line-number" data-line-number="3588"></td>
        <td id="LC3588" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3589" class="blob-num js-line-number" data-line-number="3589"></td>
        <td id="LC3589" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># To account for nested initializer list, we allow any number of</span></td>
      </tr>
      <tr>
        <td id="L3590" class="blob-num js-line-number" data-line-number="3590"></td>
        <td id="LC3590" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># closing braces up to &quot;{;,)&lt;&quot;.  We can&#39;t simply silence the</span></td>
      </tr>
      <tr>
        <td id="L3591" class="blob-num js-line-number" data-line-number="3591"></td>
        <td id="LC3591" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># warning on first sight of closing brace, because that would</span></td>
      </tr>
      <tr>
        <td id="L3592" class="blob-num js-line-number" data-line-number="3592"></td>
        <td id="LC3592" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># cause false negatives for things that are not initializer lists.</span></td>
      </tr>
      <tr>
        <td id="L3593" class="blob-num js-line-number" data-line-number="3593"></td>
        <td id="LC3593" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Silence this:         But not this:</span></td>
      </tr>
      <tr>
        <td id="L3594" class="blob-num js-line-number" data-line-number="3594"></td>
        <td id="LC3594" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#     Outer{                if (...) {</span></td>
      </tr>
      <tr>
        <td id="L3595" class="blob-num js-line-number" data-line-number="3595"></td>
        <td id="LC3595" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#       Inner{...}            if (...){  // Missing space before {</span></td>
      </tr>
      <tr>
        <td id="L3596" class="blob-num js-line-number" data-line-number="3596"></td>
        <td id="LC3596" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#     };                    }</span></td>
      </tr>
      <tr>
        <td id="L3597" class="blob-num js-line-number" data-line-number="3597"></td>
        <td id="LC3597" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3598" class="blob-num js-line-number" data-line-number="3598"></td>
        <td id="LC3598" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># There is a false negative with this approach if people inserted</span></td>
      </tr>
      <tr>
        <td id="L3599" class="blob-num js-line-number" data-line-number="3599"></td>
        <td id="LC3599" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># spurious semicolons, e.g. &quot;if (cond){};&quot;, but we will catch the</span></td>
      </tr>
      <tr>
        <td id="L3600" class="blob-num js-line-number" data-line-number="3600"></td>
        <td id="LC3600" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># spurious semicolon with a separate check.</span></td>
      </tr>
      <tr>
        <td id="L3601" class="blob-num js-line-number" data-line-number="3601"></td>
        <td id="LC3601" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>leading_text</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3602" class="blob-num js-line-number" data-line-number="3602"></td>
        <td id="LC3602" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>endline</span>, <span class=pl-s1>endlinenum</span>, <span class=pl-s1>endpos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L3603" class="blob-num js-line-number" data-line-number="3603"></td>
        <td id="LC3603" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L3604" class="blob-num js-line-number" data-line-number="3604"></td>
        <td id="LC3604" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>trailing_text</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L3605" class="blob-num js-line-number" data-line-number="3605"></td>
        <td id="LC3605" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>endpos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3606" class="blob-num js-line-number" data-line-number="3606"></td>
        <td id="LC3606" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>trailing_text</span> <span class=pl-c1>=</span> <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:]</td>
      </tr>
      <tr>
        <td id="L3607" class="blob-num js-line-number" data-line-number="3607"></td>
        <td id="LC3607" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>offset</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>endlinenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>,</td>
      </tr>
      <tr>
        <td id="L3608" class="blob-num js-line-number" data-line-number="3608"></td>
        <td id="LC3608" class="blob-code blob-code-inner js-file-line">                         <span class=pl-en>min</span>(<span class=pl-s1>endlinenum</span> <span class=pl-c1>+</span> <span class=pl-c1>3</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>() <span class=pl-c1>-</span> <span class=pl-c1>1</span>)):</td>
      </tr>
      <tr>
        <td id="L3609" class="blob-num js-line-number" data-line-number="3609"></td>
        <td id="LC3609" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>trailing_text</span> <span class=pl-c1>+=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>offset</span>]</td>
      </tr>
      <tr>
        <td id="L3610" class="blob-num js-line-number" data-line-number="3610"></td>
        <td id="LC3610" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We also suppress warnings for `uint64_t{expression}` etc., as the style</span></td>
      </tr>
      <tr>
        <td id="L3611" class="blob-num js-line-number" data-line-number="3611"></td>
        <td id="LC3611" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># guide recommends brace initialization for integral types to avoid</span></td>
      </tr>
      <tr>
        <td id="L3612" class="blob-num js-line-number" data-line-number="3612"></td>
        <td id="LC3612" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># overflow/truncation.</span></td>
      </tr>
      <tr>
        <td id="L3613" class="blob-num js-line-number" data-line-number="3613"></td>
        <td id="LC3613" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^[\s}]*[{.;,)&lt;&gt;\]:]&#39;</span>, <span class=pl-s1>trailing_text</span>)</td>
      </tr>
      <tr>
        <td id="L3614" class="blob-num js-line-number" data-line-number="3614"></td>
        <td id="LC3614" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-en>_IsType</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>leading_text</span>)):</td>
      </tr>
      <tr>
        <td id="L3615" class="blob-num js-line-number" data-line-number="3615"></td>
        <td id="LC3615" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/braces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3616" class="blob-num js-line-number" data-line-number="3616"></td>
        <td id="LC3616" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Missing space before {&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3617" class="blob-num js-line-number" data-line-number="3617"></td>
        <td id="LC3617" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3618" class="blob-num js-line-number" data-line-number="3618"></td>
        <td id="LC3618" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Make sure &#39;} else {&#39; has spaces.</span></td>
      </tr>
      <tr>
        <td id="L3619" class="blob-num js-line-number" data-line-number="3619"></td>
        <td id="LC3619" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;}else&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3620" class="blob-num js-line-number" data-line-number="3620"></td>
        <td id="LC3620" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/braces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3621" class="blob-num js-line-number" data-line-number="3621"></td>
        <td id="LC3621" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Missing space before else&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3622" class="blob-num js-line-number" data-line-number="3622"></td>
        <td id="LC3622" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3623" class="blob-num js-line-number" data-line-number="3623"></td>
        <td id="LC3623" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># You shouldn&#39;t have a space before a semicolon at the end of the line.</span></td>
      </tr>
      <tr>
        <td id="L3624" class="blob-num js-line-number" data-line-number="3624"></td>
        <td id="LC3624" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># There&#39;s a special case for &quot;for&quot; since the style guide allows space before</span></td>
      </tr>
      <tr>
        <td id="L3625" class="blob-num js-line-number" data-line-number="3625"></td>
        <td id="LC3625" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># the semicolon there.</span></td>
      </tr>
      <tr>
        <td id="L3626" class="blob-num js-line-number" data-line-number="3626"></td>
        <td id="LC3626" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;:\s*;\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3627" class="blob-num js-line-number" data-line-number="3627"></td>
        <td id="LC3627" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/semicolon&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3628" class="blob-num js-line-number" data-line-number="3628"></td>
        <td id="LC3628" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Semicolon defining empty statement. Use {} instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3629" class="blob-num js-line-number" data-line-number="3629"></td>
        <td id="LC3629" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^\s*;\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3630" class="blob-num js-line-number" data-line-number="3630"></td>
        <td id="LC3630" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/semicolon&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3631" class="blob-num js-line-number" data-line-number="3631"></td>
        <td id="LC3631" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Line contains only semicolon. If this should be an empty statement, &#39;</span></td>
      </tr>
      <tr>
        <td id="L3632" class="blob-num js-line-number" data-line-number="3632"></td>
        <td id="LC3632" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;use {} instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3633" class="blob-num js-line-number" data-line-number="3633"></td>
        <td id="LC3633" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;\s+;\s*$&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3634" class="blob-num js-line-number" data-line-number="3634"></td>
        <td id="LC3634" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bfor\b&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L3635" class="blob-num js-line-number" data-line-number="3635"></td>
        <td id="LC3635" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/semicolon&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3636" class="blob-num js-line-number" data-line-number="3636"></td>
        <td id="LC3636" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Extra space before last semicolon. If this should be an empty &#39;</span></td>
      </tr>
      <tr>
        <td id="L3637" class="blob-num js-line-number" data-line-number="3637"></td>
        <td id="LC3637" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;statement, use {} instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3638" class="blob-num js-line-number" data-line-number="3638"></td>
        <td id="LC3638" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3639" class="blob-num js-line-number" data-line-number="3639"></td>
        <td id="LC3639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3640" class="blob-num js-line-number" data-line-number="3640"></td>
        <td id="LC3640" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsDecltype</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>column</span>):</td>
      </tr>
      <tr>
        <td id="L3641" class="blob-num js-line-number" data-line-number="3641"></td>
        <td id="LC3641" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if the token ending on (linenum, column) is decltype().</span></td>
      </tr>
      <tr>
        <td id="L3642" class="blob-num js-line-number" data-line-number="3642"></td>
        <td id="LC3642" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3643" class="blob-num js-line-number" data-line-number="3643"></td>
        <td id="LC3643" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3644" class="blob-num js-line-number" data-line-number="3644"></td>
        <td id="LC3644" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3645" class="blob-num js-line-number" data-line-number="3645"></td>
        <td id="LC3645" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: the number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3646" class="blob-num js-line-number" data-line-number="3646"></td>
        <td id="LC3646" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    column: end column of the token to check.</span></td>
      </tr>
      <tr>
        <td id="L3647" class="blob-num js-line-number" data-line-number="3647"></td>
        <td id="LC3647" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L3648" class="blob-num js-line-number" data-line-number="3648"></td>
        <td id="LC3648" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if this token is decltype() expression, False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L3649" class="blob-num js-line-number" data-line-number="3649"></td>
        <td id="LC3649" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3650" class="blob-num js-line-number" data-line-number="3650"></td>
        <td id="LC3650" class="blob-code blob-code-inner js-file-line">  (<span class=pl-s1>text</span>, <span class=pl-s1>_</span>, <span class=pl-s1>start_col</span>) <span class=pl-c1>=</span> <span class=pl-v>ReverseCloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>column</span>)</td>
      </tr>
      <tr>
        <td id="L3651" class="blob-num js-line-number" data-line-number="3651"></td>
        <td id="LC3651" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>start_col</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3652" class="blob-num js-line-number" data-line-number="3652"></td>
        <td id="LC3652" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3653" class="blob-num js-line-number" data-line-number="3653"></td>
        <td id="LC3653" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bdecltype\s*$&#39;</span>, <span class=pl-s1>text</span>[<span class=pl-c1>0</span>:<span class=pl-s1>start_col</span>]):</td>
      </tr>
      <tr>
        <td id="L3654" class="blob-num js-line-number" data-line-number="3654"></td>
        <td id="LC3654" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L3655" class="blob-num js-line-number" data-line-number="3655"></td>
        <td id="LC3655" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L3656" class="blob-num js-line-number" data-line-number="3656"></td>
        <td id="LC3656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3657" class="blob-num js-line-number" data-line-number="3657"></td>
        <td id="LC3657" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3658" class="blob-num js-line-number" data-line-number="3658"></td>
        <td id="LC3658" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckSectionSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>class_info</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3659" class="blob-num js-line-number" data-line-number="3659"></td>
        <td id="LC3659" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for additional blank line issues related to sections.</span></td>
      </tr>
      <tr>
        <td id="L3660" class="blob-num js-line-number" data-line-number="3660"></td>
        <td id="LC3660" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3661" class="blob-num js-line-number" data-line-number="3661"></td>
        <td id="LC3661" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Currently the only thing checked here is blank line before protected/private.</span></td>
      </tr>
      <tr>
        <td id="L3662" class="blob-num js-line-number" data-line-number="3662"></td>
        <td id="LC3662" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3663" class="blob-num js-line-number" data-line-number="3663"></td>
        <td id="LC3663" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3664" class="blob-num js-line-number" data-line-number="3664"></td>
        <td id="LC3664" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3665" class="blob-num js-line-number" data-line-number="3665"></td>
        <td id="LC3665" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3666" class="blob-num js-line-number" data-line-number="3666"></td>
        <td id="LC3666" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    class_info: A _ClassInfo objects.</span></td>
      </tr>
      <tr>
        <td id="L3667" class="blob-num js-line-number" data-line-number="3667"></td>
        <td id="LC3667" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3668" class="blob-num js-line-number" data-line-number="3668"></td>
        <td id="LC3668" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3669" class="blob-num js-line-number" data-line-number="3669"></td>
        <td id="LC3669" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3670" class="blob-num js-line-number" data-line-number="3670"></td>
        <td id="LC3670" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Skip checks if the class is small, where small means 25 lines or less.</span></td>
      </tr>
      <tr>
        <td id="L3671" class="blob-num js-line-number" data-line-number="3671"></td>
        <td id="LC3671" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 25 lines seems like a good cutoff since that&#39;s the usual height of</span></td>
      </tr>
      <tr>
        <td id="L3672" class="blob-num js-line-number" data-line-number="3672"></td>
        <td id="LC3672" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># terminals, and any class that can&#39;t fit in one screen can&#39;t really</span></td>
      </tr>
      <tr>
        <td id="L3673" class="blob-num js-line-number" data-line-number="3673"></td>
        <td id="LC3673" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># be considered &quot;small&quot;.</span></td>
      </tr>
      <tr>
        <td id="L3674" class="blob-num js-line-number" data-line-number="3674"></td>
        <td id="LC3674" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3675" class="blob-num js-line-number" data-line-number="3675"></td>
        <td id="LC3675" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Also skip checks if we are on the first line.  This accounts for</span></td>
      </tr>
      <tr>
        <td id="L3676" class="blob-num js-line-number" data-line-number="3676"></td>
        <td id="LC3676" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># classes that look like</span></td>
      </tr>
      <tr>
        <td id="L3677" class="blob-num js-line-number" data-line-number="3677"></td>
        <td id="LC3677" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   class Foo { public: ... };</span></td>
      </tr>
      <tr>
        <td id="L3678" class="blob-num js-line-number" data-line-number="3678"></td>
        <td id="LC3678" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3679" class="blob-num js-line-number" data-line-number="3679"></td>
        <td id="LC3679" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If we didn&#39;t find the end of the class, last_line would be zero,</span></td>
      </tr>
      <tr>
        <td id="L3680" class="blob-num js-line-number" data-line-number="3680"></td>
        <td id="LC3680" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># and the check will be skipped by the first condition.</span></td>
      </tr>
      <tr>
        <td id="L3681" class="blob-num js-line-number" data-line-number="3681"></td>
        <td id="LC3681" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>class_info</span>.<span class=pl-s1>last_line</span> <span class=pl-c1>-</span> <span class=pl-s1>class_info</span>.<span class=pl-s1>starting_linenum</span> <span class=pl-c1>&lt;=</span> <span class=pl-c1>24</span> <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3682" class="blob-num js-line-number" data-line-number="3682"></td>
        <td id="LC3682" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>linenum</span> <span class=pl-c1>&lt;=</span> <span class=pl-s1>class_info</span>.<span class=pl-s1>starting_linenum</span>):</td>
      </tr>
      <tr>
        <td id="L3683" class="blob-num js-line-number" data-line-number="3683"></td>
        <td id="LC3683" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L3684" class="blob-num js-line-number" data-line-number="3684"></td>
        <td id="LC3684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3685" class="blob-num js-line-number" data-line-number="3685"></td>
        <td id="LC3685" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(public|protected|private):&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L3686" class="blob-num js-line-number" data-line-number="3686"></td>
        <td id="LC3686" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L3687" class="blob-num js-line-number" data-line-number="3687"></td>
        <td id="LC3687" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Issue warning if the line before public/protected/private was</span></td>
      </tr>
      <tr>
        <td id="L3688" class="blob-num js-line-number" data-line-number="3688"></td>
        <td id="LC3688" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># not a blank line, but don&#39;t do this if the previous line contains</span></td>
      </tr>
      <tr>
        <td id="L3689" class="blob-num js-line-number" data-line-number="3689"></td>
        <td id="LC3689" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># &quot;class&quot; or &quot;struct&quot;.  This can happen two ways:</span></td>
      </tr>
      <tr>
        <td id="L3690" class="blob-num js-line-number" data-line-number="3690"></td>
        <td id="LC3690" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - We are at the beginning of the class.</span></td>
      </tr>
      <tr>
        <td id="L3691" class="blob-num js-line-number" data-line-number="3691"></td>
        <td id="LC3691" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - We are forward-declaring an inner class that is semantically</span></td>
      </tr>
      <tr>
        <td id="L3692" class="blob-num js-line-number" data-line-number="3692"></td>
        <td id="LC3692" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#    private, but needed to be public for implementation reasons.</span></td>
      </tr>
      <tr>
        <td id="L3693" class="blob-num js-line-number" data-line-number="3693"></td>
        <td id="LC3693" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Also ignores cases where the previous line ends with a backslash as can be</span></td>
      </tr>
      <tr>
        <td id="L3694" class="blob-num js-line-number" data-line-number="3694"></td>
        <td id="LC3694" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># common when defining classes in C macros.</span></td>
      </tr>
      <tr>
        <td id="L3695" class="blob-num js-line-number" data-line-number="3695"></td>
        <td id="LC3695" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prev_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3696" class="blob-num js-line-number" data-line-number="3696"></td>
        <td id="LC3696" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>IsBlankLine</span>(<span class=pl-s1>prev_line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3697" class="blob-num js-line-number" data-line-number="3697"></td>
        <td id="LC3697" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(class|struct)\b&#39;</span>, <span class=pl-s1>prev_line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3698" class="blob-num js-line-number" data-line-number="3698"></td>
        <td id="LC3698" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\\$&#39;</span>, <span class=pl-s1>prev_line</span>)):</td>
      </tr>
      <tr>
        <td id="L3699" class="blob-num js-line-number" data-line-number="3699"></td>
        <td id="LC3699" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Try a bit harder to find the beginning of the class.  This is to</span></td>
      </tr>
      <tr>
        <td id="L3700" class="blob-num js-line-number" data-line-number="3700"></td>
        <td id="LC3700" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># account for multi-line base-specifier lists, e.g.:</span></td>
      </tr>
      <tr>
        <td id="L3701" class="blob-num js-line-number" data-line-number="3701"></td>
        <td id="LC3701" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   class Derived</span></td>
      </tr>
      <tr>
        <td id="L3702" class="blob-num js-line-number" data-line-number="3702"></td>
        <td id="LC3702" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#       : public Base {</span></td>
      </tr>
      <tr>
        <td id="L3703" class="blob-num js-line-number" data-line-number="3703"></td>
        <td id="LC3703" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>end_class_head</span> <span class=pl-c1>=</span> <span class=pl-s1>class_info</span>.<span class=pl-s1>starting_linenum</span></td>
      </tr>
      <tr>
        <td id="L3704" class="blob-num js-line-number" data-line-number="3704"></td>
        <td id="LC3704" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-s1>class_info</span>.<span class=pl-s1>starting_linenum</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L3705" class="blob-num js-line-number" data-line-number="3705"></td>
        <td id="LC3705" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\{\s*$&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span>[<span class=pl-s1>i</span>]):</td>
      </tr>
      <tr>
        <td id="L3706" class="blob-num js-line-number" data-line-number="3706"></td>
        <td id="LC3706" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>end_class_head</span> <span class=pl-c1>=</span> <span class=pl-s1>i</span></td>
      </tr>
      <tr>
        <td id="L3707" class="blob-num js-line-number" data-line-number="3707"></td>
        <td id="LC3707" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L3708" class="blob-num js-line-number" data-line-number="3708"></td>
        <td id="LC3708" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>end_class_head</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3709" class="blob-num js-line-number" data-line-number="3709"></td>
        <td id="LC3709" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/blank_line&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L3710" class="blob-num js-line-number" data-line-number="3710"></td>
        <td id="LC3710" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;&quot;%s:&quot; should be preceded by a blank line&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L3711" class="blob-num js-line-number" data-line-number="3711"></td>
        <td id="LC3711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3712" class="blob-num js-line-number" data-line-number="3712"></td>
        <td id="LC3712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3713" class="blob-num js-line-number" data-line-number="3713"></td>
        <td id="LC3713" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L3714" class="blob-num js-line-number" data-line-number="3714"></td>
        <td id="LC3714" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Return the most recent non-blank line and its line number.</span></td>
      </tr>
      <tr>
        <td id="L3715" class="blob-num js-line-number" data-line-number="3715"></td>
        <td id="LC3715" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3716" class="blob-num js-line-number" data-line-number="3716"></td>
        <td id="LC3716" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3717" class="blob-num js-line-number" data-line-number="3717"></td>
        <td id="LC3717" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file contents.</span></td>
      </tr>
      <tr>
        <td id="L3718" class="blob-num js-line-number" data-line-number="3718"></td>
        <td id="LC3718" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3719" class="blob-num js-line-number" data-line-number="3719"></td>
        <td id="LC3719" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3720" class="blob-num js-line-number" data-line-number="3720"></td>
        <td id="LC3720" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L3721" class="blob-num js-line-number" data-line-number="3721"></td>
        <td id="LC3721" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    A tuple with two elements.  The first element is the contents of the last</span></td>
      </tr>
      <tr>
        <td id="L3722" class="blob-num js-line-number" data-line-number="3722"></td>
        <td id="LC3722" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    non-blank line before the current line, or the empty string if this is the</span></td>
      </tr>
      <tr>
        <td id="L3723" class="blob-num js-line-number" data-line-number="3723"></td>
        <td id="LC3723" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    first non-blank line.  The second is the line number of that line, or -1</span></td>
      </tr>
      <tr>
        <td id="L3724" class="blob-num js-line-number" data-line-number="3724"></td>
        <td id="LC3724" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    if this is the first non-blank line.</span></td>
      </tr>
      <tr>
        <td id="L3725" class="blob-num js-line-number" data-line-number="3725"></td>
        <td id="LC3725" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3726" class="blob-num js-line-number" data-line-number="3726"></td>
        <td id="LC3726" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3727" class="blob-num js-line-number" data-line-number="3727"></td>
        <td id="LC3727" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>prevlinenum</span> <span class=pl-c1>=</span> <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3728" class="blob-num js-line-number" data-line-number="3728"></td>
        <td id="LC3728" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>prevlinenum</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3729" class="blob-num js-line-number" data-line-number="3729"></td>
        <td id="LC3729" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prevline</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>prevlinenum</span>]</td>
      </tr>
      <tr>
        <td id="L3730" class="blob-num js-line-number" data-line-number="3730"></td>
        <td id="LC3730" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>IsBlankLine</span>(<span class=pl-s1>prevline</span>):     <span class=pl-c># if not a blank line...</span></td>
      </tr>
      <tr>
        <td id="L3731" class="blob-num js-line-number" data-line-number="3731"></td>
        <td id="LC3731" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> (<span class=pl-s1>prevline</span>, <span class=pl-s1>prevlinenum</span>)</td>
      </tr>
      <tr>
        <td id="L3732" class="blob-num js-line-number" data-line-number="3732"></td>
        <td id="LC3732" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prevlinenum</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3733" class="blob-num js-line-number" data-line-number="3733"></td>
        <td id="LC3733" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-s>&#39;&#39;</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3734" class="blob-num js-line-number" data-line-number="3734"></td>
        <td id="LC3734" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3735" class="blob-num js-line-number" data-line-number="3735"></td>
        <td id="LC3735" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3736" class="blob-num js-line-number" data-line-number="3736"></td>
        <td id="LC3736" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckBraces</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3737" class="blob-num js-line-number" data-line-number="3737"></td>
        <td id="LC3737" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Looks for misplaced braces (e.g. at the end of line).</span></td>
      </tr>
      <tr>
        <td id="L3738" class="blob-num js-line-number" data-line-number="3738"></td>
        <td id="LC3738" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3739" class="blob-num js-line-number" data-line-number="3739"></td>
        <td id="LC3739" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3740" class="blob-num js-line-number" data-line-number="3740"></td>
        <td id="LC3740" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3741" class="blob-num js-line-number" data-line-number="3741"></td>
        <td id="LC3741" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3742" class="blob-num js-line-number" data-line-number="3742"></td>
        <td id="LC3742" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3743" class="blob-num js-line-number" data-line-number="3743"></td>
        <td id="LC3743" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3744" class="blob-num js-line-number" data-line-number="3744"></td>
        <td id="LC3744" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3745" class="blob-num js-line-number" data-line-number="3745"></td>
        <td id="LC3745" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3746" class="blob-num js-line-number" data-line-number="3746"></td>
        <td id="LC3746" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]        <span class=pl-c># get rid of comments and strings</span></td>
      </tr>
      <tr>
        <td id="L3747" class="blob-num js-line-number" data-line-number="3747"></td>
        <td id="LC3747" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3748" class="blob-num js-line-number" data-line-number="3748"></td>
        <td id="LC3748" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*{\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3749" class="blob-num js-line-number" data-line-number="3749"></td>
        <td id="LC3749" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We allow an open brace to start a line in the case where someone is using</span></td>
      </tr>
      <tr>
        <td id="L3750" class="blob-num js-line-number" data-line-number="3750"></td>
        <td id="LC3750" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># braces in a block to explicitly create a new scope, which is commonly used</span></td>
      </tr>
      <tr>
        <td id="L3751" class="blob-num js-line-number" data-line-number="3751"></td>
        <td id="LC3751" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># to control the lifetime of stack-allocated variables.  Braces are also</span></td>
      </tr>
      <tr>
        <td id="L3752" class="blob-num js-line-number" data-line-number="3752"></td>
        <td id="LC3752" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># used for brace initializers inside function calls.  We don&#39;t detect this</span></td>
      </tr>
      <tr>
        <td id="L3753" class="blob-num js-line-number" data-line-number="3753"></td>
        <td id="LC3753" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># perfectly: we just don&#39;t complain if the last non-whitespace character on</span></td>
      </tr>
      <tr>
        <td id="L3754" class="blob-num js-line-number" data-line-number="3754"></td>
        <td id="LC3754" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the previous non-blank line is &#39;,&#39;, &#39;;&#39;, &#39;:&#39;, &#39;(&#39;, &#39;{&#39;, or &#39;}&#39;, or if the</span></td>
      </tr>
      <tr>
        <td id="L3755" class="blob-num js-line-number" data-line-number="3755"></td>
        <td id="LC3755" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># previous line starts a preprocessor block. We also allow a brace on the</span></td>
      </tr>
      <tr>
        <td id="L3756" class="blob-num js-line-number" data-line-number="3756"></td>
        <td id="LC3756" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># following line if it is part of an array initialization and would not fit</span></td>
      </tr>
      <tr>
        <td id="L3757" class="blob-num js-line-number" data-line-number="3757"></td>
        <td id="LC3757" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># within the 80 character limit of the preceding line.</span></td>
      </tr>
      <tr>
        <td id="L3758" class="blob-num js-line-number" data-line-number="3758"></td>
        <td id="LC3758" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prevline</span> <span class=pl-c1>=</span> <span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)[<span class=pl-c1>0</span>]</td>
      </tr>
      <tr>
        <td id="L3759" class="blob-num js-line-number" data-line-number="3759"></td>
        <td id="LC3759" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[,;:}{(]\s*$&#39;</span>, <span class=pl-s1>prevline</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3760" class="blob-num js-line-number" data-line-number="3760"></td>
        <td id="LC3760" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#&#39;</span>, <span class=pl-s1>prevline</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3761" class="blob-num js-line-number" data-line-number="3761"></td>
        <td id="LC3761" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> (<span class=pl-v>GetLineWidth</span>(<span class=pl-s1>prevline</span>) <span class=pl-c1>&gt;</span> <span class=pl-s1>_line_length</span> <span class=pl-c1>-</span> <span class=pl-c1>2</span> <span class=pl-c1>and</span> <span class=pl-s>&#39;[]&#39;</span> <span class=pl-c1>in</span> <span class=pl-s1>prevline</span>)):</td>
      </tr>
      <tr>
        <td id="L3762" class="blob-num js-line-number" data-line-number="3762"></td>
        <td id="LC3762" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3763" class="blob-num js-line-number" data-line-number="3763"></td>
        <td id="LC3763" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;{ should almost always be at the end of the previous line&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3764" class="blob-num js-line-number" data-line-number="3764"></td>
        <td id="LC3764" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3765" class="blob-num js-line-number" data-line-number="3765"></td>
        <td id="LC3765" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># An else clause should be on the same line as the preceding closing brace.</span></td>
      </tr>
      <tr>
        <td id="L3766" class="blob-num js-line-number" data-line-number="3766"></td>
        <td id="LC3766" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*else\b\s*(?:if\b|\{|$)&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3767" class="blob-num js-line-number" data-line-number="3767"></td>
        <td id="LC3767" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>prevline</span> <span class=pl-c1>=</span> <span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)[<span class=pl-c1>0</span>]</td>
      </tr>
      <tr>
        <td id="L3768" class="blob-num js-line-number" data-line-number="3768"></td>
        <td id="LC3768" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*}\s*$&#39;</span>, <span class=pl-s1>prevline</span>):</td>
      </tr>
      <tr>
        <td id="L3769" class="blob-num js-line-number" data-line-number="3769"></td>
        <td id="LC3769" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/newline&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3770" class="blob-num js-line-number" data-line-number="3770"></td>
        <td id="LC3770" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;An else should appear on the same line as the preceding }&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3771" class="blob-num js-line-number" data-line-number="3771"></td>
        <td id="LC3771" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3772" class="blob-num js-line-number" data-line-number="3772"></td>
        <td id="LC3772" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If braces come on one side of an else, they should be on both.</span></td>
      </tr>
      <tr>
        <td id="L3773" class="blob-num js-line-number" data-line-number="3773"></td>
        <td id="LC3773" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># However, we have to worry about &quot;else if&quot; that spans multiple lines!</span></td>
      </tr>
      <tr>
        <td id="L3774" class="blob-num js-line-number" data-line-number="3774"></td>
        <td id="LC3774" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;else if\s*\(&#39;</span>, <span class=pl-s1>line</span>):       <span class=pl-c># could be multi-line if</span></td>
      </tr>
      <tr>
        <td id="L3775" class="blob-num js-line-number" data-line-number="3775"></td>
        <td id="LC3775" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>brace_on_left</span> <span class=pl-c1>=</span> <span class=pl-en>bool</span>(<span class=pl-v>Search</span>(<span class=pl-s>r&#39;}\s*else if\s*\(&#39;</span>, <span class=pl-s1>line</span>))</td>
      </tr>
      <tr>
        <td id="L3776" class="blob-num js-line-number" data-line-number="3776"></td>
        <td id="LC3776" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># find the ( after the if</span></td>
      </tr>
      <tr>
        <td id="L3777" class="blob-num js-line-number" data-line-number="3777"></td>
        <td id="LC3777" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;else if&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3778" class="blob-num js-line-number" data-line-number="3778"></td>
        <td id="LC3778" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;(&#39;</span>, <span class=pl-s1>pos</span>)</td>
      </tr>
      <tr>
        <td id="L3779" class="blob-num js-line-number" data-line-number="3779"></td>
        <td id="LC3779" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>pos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L3780" class="blob-num js-line-number" data-line-number="3780"></td>
        <td id="LC3780" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>endline</span>, <span class=pl-s1>_</span>, <span class=pl-s1>endpos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span>)</td>
      </tr>
      <tr>
        <td id="L3781" class="blob-num js-line-number" data-line-number="3781"></td>
        <td id="LC3781" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>brace_on_right</span> <span class=pl-c1>=</span> <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:].<span class=pl-en>find</span>(<span class=pl-s>&#39;{&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3782" class="blob-num js-line-number" data-line-number="3782"></td>
        <td id="LC3782" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>brace_on_left</span> <span class=pl-c1>!=</span> <span class=pl-s1>brace_on_right</span>:    <span class=pl-c># must be brace after if</span></td>
      </tr>
      <tr>
        <td id="L3783" class="blob-num js-line-number" data-line-number="3783"></td>
        <td id="LC3783" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3784" class="blob-num js-line-number" data-line-number="3784"></td>
        <td id="LC3784" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;If an else has a brace on one side, it should have it on both&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3785" class="blob-num js-line-number" data-line-number="3785"></td>
        <td id="LC3785" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;}\s*else[^{]*$&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>or</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;[^}]*else\s*{&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3786" class="blob-num js-line-number" data-line-number="3786"></td>
        <td id="LC3786" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L3787" class="blob-num js-line-number" data-line-number="3787"></td>
        <td id="LC3787" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;If an else has a brace on one side, it should have it on both&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3788" class="blob-num js-line-number" data-line-number="3788"></td>
        <td id="LC3788" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3789" class="blob-num js-line-number" data-line-number="3789"></td>
        <td id="LC3789" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Likewise, an else should never have the else clause on the same line</span></td>
      </tr>
      <tr>
        <td id="L3790" class="blob-num js-line-number" data-line-number="3790"></td>
        <td id="LC3790" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\belse [^\s{]&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\belse if\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3791" class="blob-num js-line-number" data-line-number="3791"></td>
        <td id="LC3791" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/newline&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3792" class="blob-num js-line-number" data-line-number="3792"></td>
        <td id="LC3792" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Else clause should never be on same line as else (use 2 lines)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3793" class="blob-num js-line-number" data-line-number="3793"></td>
        <td id="LC3793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3794" class="blob-num js-line-number" data-line-number="3794"></td>
        <td id="LC3794" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># In the same way, a do/while should never be on one line</span></td>
      </tr>
      <tr>
        <td id="L3795" class="blob-num js-line-number" data-line-number="3795"></td>
        <td id="LC3795" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*do [^\s{]&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3796" class="blob-num js-line-number" data-line-number="3796"></td>
        <td id="LC3796" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/newline&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3797" class="blob-num js-line-number" data-line-number="3797"></td>
        <td id="LC3797" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;do/while clauses should not be on a single line&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3798" class="blob-num js-line-number" data-line-number="3798"></td>
        <td id="LC3798" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3799" class="blob-num js-line-number" data-line-number="3799"></td>
        <td id="LC3799" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check single-line if/else bodies. The style guide says &#39;curly braces are not</span></td>
      </tr>
      <tr>
        <td id="L3800" class="blob-num js-line-number" data-line-number="3800"></td>
        <td id="LC3800" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># required for single-line statements&#39;. We additionally allow multi-line,</span></td>
      </tr>
      <tr>
        <td id="L3801" class="blob-num js-line-number" data-line-number="3801"></td>
        <td id="LC3801" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># single statements, but we reject anything with more than one semicolon in</span></td>
      </tr>
      <tr>
        <td id="L3802" class="blob-num js-line-number" data-line-number="3802"></td>
        <td id="LC3802" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># it. This means that the first semicolon after the if should be at the end of</span></td>
      </tr>
      <tr>
        <td id="L3803" class="blob-num js-line-number" data-line-number="3803"></td>
        <td id="LC3803" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># its line, and the line after that should have an indent level equal to or</span></td>
      </tr>
      <tr>
        <td id="L3804" class="blob-num js-line-number" data-line-number="3804"></td>
        <td id="LC3804" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># lower than the if. We also check for ambiguous if/else nesting without</span></td>
      </tr>
      <tr>
        <td id="L3805" class="blob-num js-line-number" data-line-number="3805"></td>
        <td id="LC3805" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># braces.</span></td>
      </tr>
      <tr>
        <td id="L3806" class="blob-num js-line-number" data-line-number="3806"></td>
        <td id="LC3806" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>if_else_match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(if\s*\(|else\b)&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3807" class="blob-num js-line-number" data-line-number="3807"></td>
        <td id="LC3807" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>if_else_match</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L3808" class="blob-num js-line-number" data-line-number="3808"></td>
        <td id="LC3808" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>if_indent</span> <span class=pl-c1>=</span> <span class=pl-v>GetIndentLevel</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3809" class="blob-num js-line-number" data-line-number="3809"></td>
        <td id="LC3809" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>endline</span>, <span class=pl-s1>endlinenum</span>, <span class=pl-s1>endpos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>if_else_match</span>.<span class=pl-en>end</span>()</td>
      </tr>
      <tr>
        <td id="L3810" class="blob-num js-line-number" data-line-number="3810"></td>
        <td id="LC3810" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>if_match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bif\s*\(&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3811" class="blob-num js-line-number" data-line-number="3811"></td>
        <td id="LC3811" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>if_match</span>:</td>
      </tr>
      <tr>
        <td id="L3812" class="blob-num js-line-number" data-line-number="3812"></td>
        <td id="LC3812" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># This could be a multiline if condition, so find the end first.</span></td>
      </tr>
      <tr>
        <td id="L3813" class="blob-num js-line-number" data-line-number="3813"></td>
        <td id="LC3813" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>pos</span> <span class=pl-c1>=</span> <span class=pl-s1>if_match</span>.<span class=pl-en>end</span>() <span class=pl-c1>-</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3814" class="blob-num js-line-number" data-line-number="3814"></td>
        <td id="LC3814" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>endline</span>, <span class=pl-s1>endlinenum</span>, <span class=pl-s1>endpos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>pos</span>)</td>
      </tr>
      <tr>
        <td id="L3815" class="blob-num js-line-number" data-line-number="3815"></td>
        <td id="LC3815" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check for an opening brace, either directly after the if or on the next</span></td>
      </tr>
      <tr>
        <td id="L3816" class="blob-num js-line-number" data-line-number="3816"></td>
        <td id="LC3816" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># line. If found, this isn&#39;t a single-statement conditional.</span></td>
      </tr>
      <tr>
        <td id="L3817" class="blob-num js-line-number" data-line-number="3817"></td>
        <td id="LC3817" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*{&#39;</span>, <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:])</td>
      </tr>
      <tr>
        <td id="L3818" class="blob-num js-line-number" data-line-number="3818"></td>
        <td id="LC3818" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>and</span> <span class=pl-c1>not</span> (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*$&#39;</span>, <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:])</td>
      </tr>
      <tr>
        <td id="L3819" class="blob-num js-line-number" data-line-number="3819"></td>
        <td id="LC3819" class="blob-code blob-code-inner js-file-line">                 <span class=pl-c1>and</span> <span class=pl-s1>endlinenum</span> <span class=pl-c1>&lt;</span> (<span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L3820" class="blob-num js-line-number" data-line-number="3820"></td>
        <td id="LC3820" class="blob-code blob-code-inner js-file-line">                 <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*{&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>endlinenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]))):</td>
      </tr>
      <tr>
        <td id="L3821" class="blob-num js-line-number" data-line-number="3821"></td>
        <td id="LC3821" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> (<span class=pl-s1>endlinenum</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>)</td>
      </tr>
      <tr>
        <td id="L3822" class="blob-num js-line-number" data-line-number="3822"></td>
        <td id="LC3822" class="blob-code blob-code-inner js-file-line">             <span class=pl-c1>and</span> <span class=pl-s>&#39;;&#39;</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>endlinenum</span>][<span class=pl-s1>endpos</span>:]):</td>
      </tr>
      <tr>
        <td id="L3823" class="blob-num js-line-number" data-line-number="3823"></td>
        <td id="LC3823" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>endlinenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L3824" class="blob-num js-line-number" data-line-number="3824"></td>
        <td id="LC3824" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>endpos</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L3825" class="blob-num js-line-number" data-line-number="3825"></td>
        <td id="LC3825" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>endlinenum</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>):</td>
      </tr>
      <tr>
        <td id="L3826" class="blob-num js-line-number" data-line-number="3826"></td>
        <td id="LC3826" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>endline</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>endlinenum</span>]</td>
      </tr>
      <tr>
        <td id="L3827" class="blob-num js-line-number" data-line-number="3827"></td>
        <td id="LC3827" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># We allow a mix of whitespace and closing braces (e.g. for one-liner</span></td>
      </tr>
      <tr>
        <td id="L3828" class="blob-num js-line-number" data-line-number="3828"></td>
        <td id="LC3828" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># methods) and a single \ after the semicolon (for macros)</span></td>
      </tr>
      <tr>
        <td id="L3829" class="blob-num js-line-number" data-line-number="3829"></td>
        <td id="LC3829" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>endpos</span> <span class=pl-c1>=</span> <span class=pl-s1>endline</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3830" class="blob-num js-line-number" data-line-number="3830"></td>
        <td id="LC3830" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;;[\s}]*(\\?)$&#39;</span>, <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:]):</td>
      </tr>
      <tr>
        <td id="L3831" class="blob-num js-line-number" data-line-number="3831"></td>
        <td id="LC3831" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Semicolon isn&#39;t the last character, there&#39;s something trailing.</span></td>
      </tr>
      <tr>
        <td id="L3832" class="blob-num js-line-number" data-line-number="3832"></td>
        <td id="LC3832" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Output a warning if the semicolon is not contained inside</span></td>
      </tr>
      <tr>
        <td id="L3833" class="blob-num js-line-number" data-line-number="3833"></td>
        <td id="LC3833" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># a lambda expression.</span></td>
      </tr>
      <tr>
        <td id="L3834" class="blob-num js-line-number" data-line-number="3834"></td>
        <td id="LC3834" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^[^{};]*\[[^\[\]]*\][^{}]*\{[^{}]*\}\s*\)*[;,]\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L3835" class="blob-num js-line-number" data-line-number="3835"></td>
        <td id="LC3835" class="blob-code blob-code-inner js-file-line">                       <span class=pl-s1>endline</span>):</td>
      </tr>
      <tr>
        <td id="L3836" class="blob-num js-line-number" data-line-number="3836"></td>
        <td id="LC3836" class="blob-code blob-code-inner js-file-line">            <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3837" class="blob-num js-line-number" data-line-number="3837"></td>
        <td id="LC3837" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>&#39;If/else bodies with multiple statements require braces&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3838" class="blob-num js-line-number" data-line-number="3838"></td>
        <td id="LC3838" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>elif</span> <span class=pl-s1>endlinenum</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3839" class="blob-num js-line-number" data-line-number="3839"></td>
        <td id="LC3839" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Make sure the next line is dedented</span></td>
      </tr>
      <tr>
        <td id="L3840" class="blob-num js-line-number" data-line-number="3840"></td>
        <td id="LC3840" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>next_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>endlinenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L3841" class="blob-num js-line-number" data-line-number="3841"></td>
        <td id="LC3841" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>next_indent</span> <span class=pl-c1>=</span> <span class=pl-v>GetIndentLevel</span>(<span class=pl-s1>next_line</span>)</td>
      </tr>
      <tr>
        <td id="L3842" class="blob-num js-line-number" data-line-number="3842"></td>
        <td id="LC3842" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># With ambiguous nested if statements, this will error out on the</span></td>
      </tr>
      <tr>
        <td id="L3843" class="blob-num js-line-number" data-line-number="3843"></td>
        <td id="LC3843" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># if that *doesn&#39;t* match the else, regardless of whether it&#39;s the</span></td>
      </tr>
      <tr>
        <td id="L3844" class="blob-num js-line-number" data-line-number="3844"></td>
        <td id="LC3844" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># inner one or outer one.</span></td>
      </tr>
      <tr>
        <td id="L3845" class="blob-num js-line-number" data-line-number="3845"></td>
        <td id="LC3845" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> (<span class=pl-s1>if_match</span> <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*else\b&#39;</span>, <span class=pl-s1>next_line</span>)</td>
      </tr>
      <tr>
        <td id="L3846" class="blob-num js-line-number" data-line-number="3846"></td>
        <td id="LC3846" class="blob-code blob-code-inner js-file-line">              <span class=pl-c1>and</span> <span class=pl-s1>next_indent</span> <span class=pl-c1>!=</span> <span class=pl-s1>if_indent</span>):</td>
      </tr>
      <tr>
        <td id="L3847" class="blob-num js-line-number" data-line-number="3847"></td>
        <td id="LC3847" class="blob-code blob-code-inner js-file-line">            <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3848" class="blob-num js-line-number" data-line-number="3848"></td>
        <td id="LC3848" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>&#39;Else clause should be indented at the same level as if. &#39;</span></td>
      </tr>
      <tr>
        <td id="L3849" class="blob-num js-line-number" data-line-number="3849"></td>
        <td id="LC3849" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>&#39;Ambiguous nested if/else chains require braces.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3850" class="blob-num js-line-number" data-line-number="3850"></td>
        <td id="LC3850" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>next_indent</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>if_indent</span>:</td>
      </tr>
      <tr>
        <td id="L3851" class="blob-num js-line-number" data-line-number="3851"></td>
        <td id="LC3851" class="blob-code blob-code-inner js-file-line">            <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3852" class="blob-num js-line-number" data-line-number="3852"></td>
        <td id="LC3852" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>&#39;If/else bodies with multiple statements require braces&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3853" class="blob-num js-line-number" data-line-number="3853"></td>
        <td id="LC3853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3854" class="blob-num js-line-number" data-line-number="3854"></td>
        <td id="LC3854" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3855" class="blob-num js-line-number" data-line-number="3855"></td>
        <td id="LC3855" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckTrailingSemicolon</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L3856" class="blob-num js-line-number" data-line-number="3856"></td>
        <td id="LC3856" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Looks for redundant trailing semicolon.</span></td>
      </tr>
      <tr>
        <td id="L3857" class="blob-num js-line-number" data-line-number="3857"></td>
        <td id="LC3857" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L3858" class="blob-num js-line-number" data-line-number="3858"></td>
        <td id="LC3858" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L3859" class="blob-num js-line-number" data-line-number="3859"></td>
        <td id="LC3859" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L3860" class="blob-num js-line-number" data-line-number="3860"></td>
        <td id="LC3860" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L3861" class="blob-num js-line-number" data-line-number="3861"></td>
        <td id="LC3861" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L3862" class="blob-num js-line-number" data-line-number="3862"></td>
        <td id="LC3862" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L3863" class="blob-num js-line-number" data-line-number="3863"></td>
        <td id="LC3863" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L3864" class="blob-num js-line-number" data-line-number="3864"></td>
        <td id="LC3864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3865" class="blob-num js-line-number" data-line-number="3865"></td>
        <td id="LC3865" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L3866" class="blob-num js-line-number" data-line-number="3866"></td>
        <td id="LC3866" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3867" class="blob-num js-line-number" data-line-number="3867"></td>
        <td id="LC3867" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Block bodies should not be followed by a semicolon.  Due to C++11</span></td>
      </tr>
      <tr>
        <td id="L3868" class="blob-num js-line-number" data-line-number="3868"></td>
        <td id="LC3868" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># brace initialization, there are more places where semicolons are</span></td>
      </tr>
      <tr>
        <td id="L3869" class="blob-num js-line-number" data-line-number="3869"></td>
        <td id="LC3869" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># required than not, so we explicitly list the allowed rules rather</span></td>
      </tr>
      <tr>
        <td id="L3870" class="blob-num js-line-number" data-line-number="3870"></td>
        <td id="LC3870" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># than listing the disallowed ones.  These are the places where &quot;};&quot;</span></td>
      </tr>
      <tr>
        <td id="L3871" class="blob-num js-line-number" data-line-number="3871"></td>
        <td id="LC3871" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># should be replaced by just &quot;}&quot;:</span></td>
      </tr>
      <tr>
        <td id="L3872" class="blob-num js-line-number" data-line-number="3872"></td>
        <td id="LC3872" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 1. Some flavor of block following closing parenthesis:</span></td>
      </tr>
      <tr>
        <td id="L3873" class="blob-num js-line-number" data-line-number="3873"></td>
        <td id="LC3873" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    for (;;) {};</span></td>
      </tr>
      <tr>
        <td id="L3874" class="blob-num js-line-number" data-line-number="3874"></td>
        <td id="LC3874" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    while (...) {};</span></td>
      </tr>
      <tr>
        <td id="L3875" class="blob-num js-line-number" data-line-number="3875"></td>
        <td id="LC3875" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    switch (...) {};</span></td>
      </tr>
      <tr>
        <td id="L3876" class="blob-num js-line-number" data-line-number="3876"></td>
        <td id="LC3876" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    Function(...) {};</span></td>
      </tr>
      <tr>
        <td id="L3877" class="blob-num js-line-number" data-line-number="3877"></td>
        <td id="LC3877" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    if (...) {};</span></td>
      </tr>
      <tr>
        <td id="L3878" class="blob-num js-line-number" data-line-number="3878"></td>
        <td id="LC3878" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    if (...) else if (...) {};</span></td>
      </tr>
      <tr>
        <td id="L3879" class="blob-num js-line-number" data-line-number="3879"></td>
        <td id="LC3879" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3880" class="blob-num js-line-number" data-line-number="3880"></td>
        <td id="LC3880" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 2. else block:</span></td>
      </tr>
      <tr>
        <td id="L3881" class="blob-num js-line-number" data-line-number="3881"></td>
        <td id="LC3881" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    if (...) else {};</span></td>
      </tr>
      <tr>
        <td id="L3882" class="blob-num js-line-number" data-line-number="3882"></td>
        <td id="LC3882" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3883" class="blob-num js-line-number" data-line-number="3883"></td>
        <td id="LC3883" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 3. const member function:</span></td>
      </tr>
      <tr>
        <td id="L3884" class="blob-num js-line-number" data-line-number="3884"></td>
        <td id="LC3884" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    Function(...) const {};</span></td>
      </tr>
      <tr>
        <td id="L3885" class="blob-num js-line-number" data-line-number="3885"></td>
        <td id="LC3885" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3886" class="blob-num js-line-number" data-line-number="3886"></td>
        <td id="LC3886" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 4. Block following some statement:</span></td>
      </tr>
      <tr>
        <td id="L3887" class="blob-num js-line-number" data-line-number="3887"></td>
        <td id="LC3887" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    x = 42;</span></td>
      </tr>
      <tr>
        <td id="L3888" class="blob-num js-line-number" data-line-number="3888"></td>
        <td id="LC3888" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    {};</span></td>
      </tr>
      <tr>
        <td id="L3889" class="blob-num js-line-number" data-line-number="3889"></td>
        <td id="LC3889" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3890" class="blob-num js-line-number" data-line-number="3890"></td>
        <td id="LC3890" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 5. Block at the beginning of a function:</span></td>
      </tr>
      <tr>
        <td id="L3891" class="blob-num js-line-number" data-line-number="3891"></td>
        <td id="LC3891" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    Function(...) {</span></td>
      </tr>
      <tr>
        <td id="L3892" class="blob-num js-line-number" data-line-number="3892"></td>
        <td id="LC3892" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#      {};</span></td>
      </tr>
      <tr>
        <td id="L3893" class="blob-num js-line-number" data-line-number="3893"></td>
        <td id="LC3893" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    }</span></td>
      </tr>
      <tr>
        <td id="L3894" class="blob-num js-line-number" data-line-number="3894"></td>
        <td id="LC3894" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3895" class="blob-num js-line-number" data-line-number="3895"></td>
        <td id="LC3895" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    Note that naively checking for the preceding &quot;{&quot; will also match</span></td>
      </tr>
      <tr>
        <td id="L3896" class="blob-num js-line-number" data-line-number="3896"></td>
        <td id="LC3896" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    braces inside multi-dimensional arrays, but this is fine since</span></td>
      </tr>
      <tr>
        <td id="L3897" class="blob-num js-line-number" data-line-number="3897"></td>
        <td id="LC3897" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    that expression will not contain semicolons.</span></td>
      </tr>
      <tr>
        <td id="L3898" class="blob-num js-line-number" data-line-number="3898"></td>
        <td id="LC3898" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3899" class="blob-num js-line-number" data-line-number="3899"></td>
        <td id="LC3899" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 6. Block following another block:</span></td>
      </tr>
      <tr>
        <td id="L3900" class="blob-num js-line-number" data-line-number="3900"></td>
        <td id="LC3900" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    while (true) {}</span></td>
      </tr>
      <tr>
        <td id="L3901" class="blob-num js-line-number" data-line-number="3901"></td>
        <td id="LC3901" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    {};</span></td>
      </tr>
      <tr>
        <td id="L3902" class="blob-num js-line-number" data-line-number="3902"></td>
        <td id="LC3902" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3903" class="blob-num js-line-number" data-line-number="3903"></td>
        <td id="LC3903" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># 7. End of namespaces:</span></td>
      </tr>
      <tr>
        <td id="L3904" class="blob-num js-line-number" data-line-number="3904"></td>
        <td id="LC3904" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    namespace {};</span></td>
      </tr>
      <tr>
        <td id="L3905" class="blob-num js-line-number" data-line-number="3905"></td>
        <td id="LC3905" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3906" class="blob-num js-line-number" data-line-number="3906"></td>
        <td id="LC3906" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    These semicolons seems far more common than other kinds of</span></td>
      </tr>
      <tr>
        <td id="L3907" class="blob-num js-line-number" data-line-number="3907"></td>
        <td id="LC3907" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    redundant semicolons, possibly due to people converting classes</span></td>
      </tr>
      <tr>
        <td id="L3908" class="blob-num js-line-number" data-line-number="3908"></td>
        <td id="LC3908" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    to namespaces.  For now we do not warn for this case.</span></td>
      </tr>
      <tr>
        <td id="L3909" class="blob-num js-line-number" data-line-number="3909"></td>
        <td id="LC3909" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3910" class="blob-num js-line-number" data-line-number="3910"></td>
        <td id="LC3910" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Try matching case 1 first.</span></td>
      </tr>
      <tr>
        <td id="L3911" class="blob-num js-line-number" data-line-number="3911"></td>
        <td id="LC3911" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*\)\s*)\{&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3912" class="blob-num js-line-number" data-line-number="3912"></td>
        <td id="LC3912" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3913" class="blob-num js-line-number" data-line-number="3913"></td>
        <td id="LC3913" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Matched closing parenthesis (case 1).  Check the token before the</span></td>
      </tr>
      <tr>
        <td id="L3914" class="blob-num js-line-number" data-line-number="3914"></td>
        <td id="LC3914" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># matching opening parenthesis, and don&#39;t warn if it looks like a</span></td>
      </tr>
      <tr>
        <td id="L3915" class="blob-num js-line-number" data-line-number="3915"></td>
        <td id="LC3915" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># macro.  This avoids these false positives:</span></td>
      </tr>
      <tr>
        <td id="L3916" class="blob-num js-line-number" data-line-number="3916"></td>
        <td id="LC3916" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - macro that defines a base class</span></td>
      </tr>
      <tr>
        <td id="L3917" class="blob-num js-line-number" data-line-number="3917"></td>
        <td id="LC3917" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - multi-line macro that defines a base class</span></td>
      </tr>
      <tr>
        <td id="L3918" class="blob-num js-line-number" data-line-number="3918"></td>
        <td id="LC3918" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - macro that defines the whole class-head</span></td>
      </tr>
      <tr>
        <td id="L3919" class="blob-num js-line-number" data-line-number="3919"></td>
        <td id="LC3919" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3920" class="blob-num js-line-number" data-line-number="3920"></td>
        <td id="LC3920" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># But we still issue warnings for macros that we know are safe to</span></td>
      </tr>
      <tr>
        <td id="L3921" class="blob-num js-line-number" data-line-number="3921"></td>
        <td id="LC3921" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># warn, specifically:</span></td>
      </tr>
      <tr>
        <td id="L3922" class="blob-num js-line-number" data-line-number="3922"></td>
        <td id="LC3922" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - TEST, TEST_F, TEST_P, MATCHER, MATCHER_P</span></td>
      </tr>
      <tr>
        <td id="L3923" class="blob-num js-line-number" data-line-number="3923"></td>
        <td id="LC3923" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - TYPED_TEST</span></td>
      </tr>
      <tr>
        <td id="L3924" class="blob-num js-line-number" data-line-number="3924"></td>
        <td id="LC3924" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - INTERFACE_DEF</span></td>
      </tr>
      <tr>
        <td id="L3925" class="blob-num js-line-number" data-line-number="3925"></td>
        <td id="LC3925" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - EXCLUSIVE_LOCKS_REQUIRED, SHARED_LOCKS_REQUIRED, LOCKS_EXCLUDED:</span></td>
      </tr>
      <tr>
        <td id="L3926" class="blob-num js-line-number" data-line-number="3926"></td>
        <td id="LC3926" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3927" class="blob-num js-line-number" data-line-number="3927"></td>
        <td id="LC3927" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We implement a list of safe macros instead of a list of</span></td>
      </tr>
      <tr>
        <td id="L3928" class="blob-num js-line-number" data-line-number="3928"></td>
        <td id="LC3928" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># unsafe macros, even though the latter appears less frequently in</span></td>
      </tr>
      <tr>
        <td id="L3929" class="blob-num js-line-number" data-line-number="3929"></td>
        <td id="LC3929" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># google code and would have been easier to implement.  This is because</span></td>
      </tr>
      <tr>
        <td id="L3930" class="blob-num js-line-number" data-line-number="3930"></td>
        <td id="LC3930" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># the downside for getting the allowed checks wrong means some extra</span></td>
      </tr>
      <tr>
        <td id="L3931" class="blob-num js-line-number" data-line-number="3931"></td>
        <td id="LC3931" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># semicolons, while the downside for getting disallowed checks wrong</span></td>
      </tr>
      <tr>
        <td id="L3932" class="blob-num js-line-number" data-line-number="3932"></td>
        <td id="LC3932" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># would result in compile errors.</span></td>
      </tr>
      <tr>
        <td id="L3933" class="blob-num js-line-number" data-line-number="3933"></td>
        <td id="LC3933" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3934" class="blob-num js-line-number" data-line-number="3934"></td>
        <td id="LC3934" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># In addition to macros, we also don&#39;t want to warn on</span></td>
      </tr>
      <tr>
        <td id="L3935" class="blob-num js-line-number" data-line-number="3935"></td>
        <td id="LC3935" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - Compound literals</span></td>
      </tr>
      <tr>
        <td id="L3936" class="blob-num js-line-number" data-line-number="3936"></td>
        <td id="LC3936" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - Lambdas</span></td>
      </tr>
      <tr>
        <td id="L3937" class="blob-num js-line-number" data-line-number="3937"></td>
        <td id="LC3937" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - alignas specifier with anonymous structs</span></td>
      </tr>
      <tr>
        <td id="L3938" class="blob-num js-line-number" data-line-number="3938"></td>
        <td id="LC3938" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#  - decltype</span></td>
      </tr>
      <tr>
        <td id="L3939" class="blob-num js-line-number" data-line-number="3939"></td>
        <td id="LC3939" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>closing_brace_pos</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>).<span class=pl-en>rfind</span>(<span class=pl-s>&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L3940" class="blob-num js-line-number" data-line-number="3940"></td>
        <td id="LC3940" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>opening_parenthesis</span> <span class=pl-c1>=</span> <span class=pl-v>ReverseCloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L3941" class="blob-num js-line-number" data-line-number="3941"></td>
        <td id="LC3941" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>closing_brace_pos</span>)</td>
      </tr>
      <tr>
        <td id="L3942" class="blob-num js-line-number" data-line-number="3942"></td>
        <td id="LC3942" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>opening_parenthesis</span>[<span class=pl-c1>2</span>] <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L3943" class="blob-num js-line-number" data-line-number="3943"></td>
        <td id="LC3943" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line_prefix</span> <span class=pl-c1>=</span> <span class=pl-s1>opening_parenthesis</span>[<span class=pl-c1>0</span>][<span class=pl-c1>0</span>:<span class=pl-s1>opening_parenthesis</span>[<span class=pl-c1>2</span>]]</td>
      </tr>
      <tr>
        <td id="L3944" class="blob-num js-line-number" data-line-number="3944"></td>
        <td id="LC3944" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>macro</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b([A-Z_][A-Z0-9_]*)\s*$&#39;</span>, <span class=pl-s1>line_prefix</span>)</td>
      </tr>
      <tr>
        <td id="L3945" class="blob-num js-line-number" data-line-number="3945"></td>
        <td id="LC3945" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>func</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*\])\s*$&#39;</span>, <span class=pl-s1>line_prefix</span>)</td>
      </tr>
      <tr>
        <td id="L3946" class="blob-num js-line-number" data-line-number="3946"></td>
        <td id="LC3946" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> ((<span class=pl-s1>macro</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3947" class="blob-num js-line-number" data-line-number="3947"></td>
        <td id="LC3947" class="blob-code blob-code-inner js-file-line">           <span class=pl-s1>macro</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>not</span> <span class=pl-c1>in</span> (</td>
      </tr>
      <tr>
        <td id="L3948" class="blob-num js-line-number" data-line-number="3948"></td>
        <td id="LC3948" class="blob-code blob-code-inner js-file-line">               <span class=pl-s>&#39;TEST&#39;</span>, <span class=pl-s>&#39;TEST_F&#39;</span>, <span class=pl-s>&#39;MATCHER&#39;</span>, <span class=pl-s>&#39;MATCHER_P&#39;</span>, <span class=pl-s>&#39;TYPED_TEST&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L3949" class="blob-num js-line-number" data-line-number="3949"></td>
        <td id="LC3949" class="blob-code blob-code-inner js-file-line">               <span class=pl-s>&#39;EXCLUSIVE_LOCKS_REQUIRED&#39;</span>, <span class=pl-s>&#39;SHARED_LOCKS_REQUIRED&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L3950" class="blob-num js-line-number" data-line-number="3950"></td>
        <td id="LC3950" class="blob-code blob-code-inner js-file-line">               <span class=pl-s>&#39;LOCKS_EXCLUDED&#39;</span>, <span class=pl-s>&#39;INTERFACE_DEF&#39;</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3951" class="blob-num js-line-number" data-line-number="3951"></td>
        <td id="LC3951" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>func</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\s*\[\s*\]&#39;</span>, <span class=pl-s1>func</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3952" class="blob-num js-line-number" data-line-number="3952"></td>
        <td id="LC3952" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(?:struct|union)\s+alignas\s*$&#39;</span>, <span class=pl-s1>line_prefix</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3953" class="blob-num js-line-number" data-line-number="3953"></td>
        <td id="LC3953" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bdecltype$&#39;</span>, <span class=pl-s1>line_prefix</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L3954" class="blob-num js-line-number" data-line-number="3954"></td>
        <td id="LC3954" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\s+=\s*$&#39;</span>, <span class=pl-s1>line_prefix</span>)):</td>
      </tr>
      <tr>
        <td id="L3955" class="blob-num js-line-number" data-line-number="3955"></td>
        <td id="LC3955" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L3956" class="blob-num js-line-number" data-line-number="3956"></td>
        <td id="LC3956" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>match</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3957" class="blob-num js-line-number" data-line-number="3957"></td>
        <td id="LC3957" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>opening_parenthesis</span>[<span class=pl-c1>1</span>] <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L3958" class="blob-num js-line-number" data-line-number="3958"></td>
        <td id="LC3958" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\]\s*$&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>opening_parenthesis</span>[<span class=pl-c1>1</span>] <span class=pl-c1>-</span> <span class=pl-c1>1</span>])):</td>
      </tr>
      <tr>
        <td id="L3959" class="blob-num js-line-number" data-line-number="3959"></td>
        <td id="LC3959" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Multi-line lambda-expression</span></td>
      </tr>
      <tr>
        <td id="L3960" class="blob-num js-line-number" data-line-number="3960"></td>
        <td id="LC3960" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L3961" class="blob-num js-line-number" data-line-number="3961"></td>
        <td id="LC3961" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3962" class="blob-num js-line-number" data-line-number="3962"></td>
        <td id="LC3962" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L3963" class="blob-num js-line-number" data-line-number="3963"></td>
        <td id="LC3963" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Try matching cases 2-3.</span></td>
      </tr>
      <tr>
        <td id="L3964" class="blob-num js-line-number" data-line-number="3964"></td>
        <td id="LC3964" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*(?:else|\)\s*const)\s*)\{&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3965" class="blob-num js-line-number" data-line-number="3965"></td>
        <td id="LC3965" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3966" class="blob-num js-line-number" data-line-number="3966"></td>
        <td id="LC3966" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Try matching cases 4-6.  These are always matched on separate lines.</span></td>
      </tr>
      <tr>
        <td id="L3967" class="blob-num js-line-number" data-line-number="3967"></td>
        <td id="LC3967" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3968" class="blob-num js-line-number" data-line-number="3968"></td>
        <td id="LC3968" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Note that we can&#39;t simply concatenate the previous line to the</span></td>
      </tr>
      <tr>
        <td id="L3969" class="blob-num js-line-number" data-line-number="3969"></td>
        <td id="LC3969" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># current line and do a single match, otherwise we may output</span></td>
      </tr>
      <tr>
        <td id="L3970" class="blob-num js-line-number" data-line-number="3970"></td>
        <td id="LC3970" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># duplicate warnings for the blank line case:</span></td>
      </tr>
      <tr>
        <td id="L3971" class="blob-num js-line-number" data-line-number="3971"></td>
        <td id="LC3971" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   if (cond) {</span></td>
      </tr>
      <tr>
        <td id="L3972" class="blob-num js-line-number" data-line-number="3972"></td>
        <td id="LC3972" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#     // blank line</span></td>
      </tr>
      <tr>
        <td id="L3973" class="blob-num js-line-number" data-line-number="3973"></td>
        <td id="LC3973" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   }</span></td>
      </tr>
      <tr>
        <td id="L3974" class="blob-num js-line-number" data-line-number="3974"></td>
        <td id="LC3974" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>prevline</span> <span class=pl-c1>=</span> <span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)[<span class=pl-c1>0</span>]</td>
      </tr>
      <tr>
        <td id="L3975" class="blob-num js-line-number" data-line-number="3975"></td>
        <td id="LC3975" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>prevline</span> <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[;{}]\s*$&#39;</span>, <span class=pl-s1>prevline</span>):</td>
      </tr>
      <tr>
        <td id="L3976" class="blob-num js-line-number" data-line-number="3976"></td>
        <td id="LC3976" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(\s*)\{&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L3977" class="blob-num js-line-number" data-line-number="3977"></td>
        <td id="LC3977" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3978" class="blob-num js-line-number" data-line-number="3978"></td>
        <td id="LC3978" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check matching closing brace</span></td>
      </tr>
      <tr>
        <td id="L3979" class="blob-num js-line-number" data-line-number="3979"></td>
        <td id="LC3979" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L3980" class="blob-num js-line-number" data-line-number="3980"></td>
        <td id="LC3980" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>endline</span>, <span class=pl-s1>endlinenum</span>, <span class=pl-s1>endpos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L3981" class="blob-num js-line-number" data-line-number="3981"></td>
        <td id="LC3981" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L3982" class="blob-num js-line-number" data-line-number="3982"></td>
        <td id="LC3982" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>endpos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*;&#39;</span>, <span class=pl-s1>endline</span>[<span class=pl-s1>endpos</span>:]):</td>
      </tr>
      <tr>
        <td id="L3983" class="blob-num js-line-number" data-line-number="3983"></td>
        <td id="LC3983" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Current {} pair is eligible for semicolon check, and we have found</span></td>
      </tr>
      <tr>
        <td id="L3984" class="blob-num js-line-number" data-line-number="3984"></td>
        <td id="LC3984" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># the redundant semicolon, output warning here.</span></td>
      </tr>
      <tr>
        <td id="L3985" class="blob-num js-line-number" data-line-number="3985"></td>
        <td id="LC3985" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L3986" class="blob-num js-line-number" data-line-number="3986"></td>
        <td id="LC3986" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Note: because we are scanning forward for opening braces, and</span></td>
      </tr>
      <tr>
        <td id="L3987" class="blob-num js-line-number" data-line-number="3987"></td>
        <td id="LC3987" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># outputting warnings for the matching closing brace, if there are</span></td>
      </tr>
      <tr>
        <td id="L3988" class="blob-num js-line-number" data-line-number="3988"></td>
        <td id="LC3988" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># nested blocks with trailing semicolons, we will get the error</span></td>
      </tr>
      <tr>
        <td id="L3989" class="blob-num js-line-number" data-line-number="3989"></td>
        <td id="LC3989" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># messages in reversed order.</span></td>
      </tr>
      <tr>
        <td id="L3990" class="blob-num js-line-number" data-line-number="3990"></td>
        <td id="LC3990" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3991" class="blob-num js-line-number" data-line-number="3991"></td>
        <td id="LC3991" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># We need to check the line forward for NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3992" class="blob-num js-line-number" data-line-number="3992"></td>
        <td id="LC3992" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>raw_lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span></td>
      </tr>
      <tr>
        <td id="L3993" class="blob-num js-line-number" data-line-number="3993"></td>
        <td id="LC3993" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines</span>[<span class=pl-s1>endlinenum</span><span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>endlinenum</span><span class=pl-c1>-</span><span class=pl-c1>1</span>,</td>
      </tr>
      <tr>
        <td id="L3994" class="blob-num js-line-number" data-line-number="3994"></td>
        <td id="LC3994" class="blob-code blob-code-inner js-file-line">                              <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L3995" class="blob-num js-line-number" data-line-number="3995"></td>
        <td id="LC3995" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines</span>[<span class=pl-s1>endlinenum</span>], <span class=pl-s1>endlinenum</span>,</td>
      </tr>
      <tr>
        <td id="L3996" class="blob-num js-line-number" data-line-number="3996"></td>
        <td id="LC3996" class="blob-code blob-code-inner js-file-line">                              <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L3997" class="blob-num js-line-number" data-line-number="3997"></td>
        <td id="LC3997" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3998" class="blob-num js-line-number" data-line-number="3998"></td>
        <td id="LC3998" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>endlinenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L3999" class="blob-num js-line-number" data-line-number="3999"></td>
        <td id="LC3999" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&quot;You don&#39;t need a ; after a }&quot;</span>)</td>
      </tr>
      <tr>
        <td id="L4000" class="blob-num js-line-number" data-line-number="4000"></td>
        <td id="LC4000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4001" class="blob-num js-line-number" data-line-number="4001"></td>
        <td id="LC4001" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4002" class="blob-num js-line-number" data-line-number="4002"></td>
        <td id="LC4002" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckEmptyBlockBody</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4003" class="blob-num js-line-number" data-line-number="4003"></td>
        <td id="LC4003" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Look for empty loop/conditional body with only a single semicolon.</span></td>
      </tr>
      <tr>
        <td id="L4004" class="blob-num js-line-number" data-line-number="4004"></td>
        <td id="LC4004" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4005" class="blob-num js-line-number" data-line-number="4005"></td>
        <td id="LC4005" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4006" class="blob-num js-line-number" data-line-number="4006"></td>
        <td id="LC4006" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4007" class="blob-num js-line-number" data-line-number="4007"></td>
        <td id="LC4007" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4008" class="blob-num js-line-number" data-line-number="4008"></td>
        <td id="LC4008" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4009" class="blob-num js-line-number" data-line-number="4009"></td>
        <td id="LC4009" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4010" class="blob-num js-line-number" data-line-number="4010"></td>
        <td id="LC4010" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4011" class="blob-num js-line-number" data-line-number="4011"></td>
        <td id="LC4011" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4012" class="blob-num js-line-number" data-line-number="4012"></td>
        <td id="LC4012" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Search for loop keywords at the beginning of the line.  Because only</span></td>
      </tr>
      <tr>
        <td id="L4013" class="blob-num js-line-number" data-line-number="4013"></td>
        <td id="LC4013" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># whitespaces are allowed before the keywords, this will also ignore most</span></td>
      </tr>
      <tr>
        <td id="L4014" class="blob-num js-line-number" data-line-number="4014"></td>
        <td id="LC4014" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># do-while-loops, since those lines should start with closing brace.</span></td>
      </tr>
      <tr>
        <td id="L4015" class="blob-num js-line-number" data-line-number="4015"></td>
        <td id="LC4015" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4016" class="blob-num js-line-number" data-line-number="4016"></td>
        <td id="LC4016" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We also check &quot;if&quot; blocks here, since an empty conditional block</span></td>
      </tr>
      <tr>
        <td id="L4017" class="blob-num js-line-number" data-line-number="4017"></td>
        <td id="LC4017" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># is likely an error.</span></td>
      </tr>
      <tr>
        <td id="L4018" class="blob-num js-line-number" data-line-number="4018"></td>
        <td id="LC4018" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4019" class="blob-num js-line-number" data-line-number="4019"></td>
        <td id="LC4019" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(for|while|if)\s*\(&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4020" class="blob-num js-line-number" data-line-number="4020"></td>
        <td id="LC4020" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L4021" class="blob-num js-line-number" data-line-number="4021"></td>
        <td id="LC4021" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Find the end of the conditional expression.</span></td>
      </tr>
      <tr>
        <td id="L4022" class="blob-num js-line-number" data-line-number="4022"></td>
        <td id="LC4022" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>end_line</span>, <span class=pl-s1>end_linenum</span>, <span class=pl-s1>end_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L4023" class="blob-num js-line-number" data-line-number="4023"></td>
        <td id="LC4023" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;(&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L4024" class="blob-num js-line-number" data-line-number="4024"></td>
        <td id="LC4024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4025" class="blob-num js-line-number" data-line-number="4025"></td>
        <td id="LC4025" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Output warning if what follows the condition expression is a semicolon.</span></td>
      </tr>
      <tr>
        <td id="L4026" class="blob-num js-line-number" data-line-number="4026"></td>
        <td id="LC4026" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># No warning for all other cases, including whitespace or newline, since we</span></td>
      </tr>
      <tr>
        <td id="L4027" class="blob-num js-line-number" data-line-number="4027"></td>
        <td id="LC4027" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># have a separate check for semicolons preceded by whitespace.</span></td>
      </tr>
      <tr>
        <td id="L4028" class="blob-num js-line-number" data-line-number="4028"></td>
        <td id="LC4028" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;;&#39;</span>, <span class=pl-s1>end_line</span>[<span class=pl-s1>end_pos</span>:]):</td>
      </tr>
      <tr>
        <td id="L4029" class="blob-num js-line-number" data-line-number="4029"></td>
        <td id="LC4029" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;if&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4030" class="blob-num js-line-number" data-line-number="4030"></td>
        <td id="LC4030" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>end_linenum</span>, <span class=pl-s>&#39;whitespace/empty_conditional_body&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L4031" class="blob-num js-line-number" data-line-number="4031"></td>
        <td id="LC4031" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Empty conditional bodies should use {}&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4032" class="blob-num js-line-number" data-line-number="4032"></td>
        <td id="LC4032" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4033" class="blob-num js-line-number" data-line-number="4033"></td>
        <td id="LC4033" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>end_linenum</span>, <span class=pl-s>&#39;whitespace/empty_loop_body&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L4034" class="blob-num js-line-number" data-line-number="4034"></td>
        <td id="LC4034" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Empty loop bodies should use {} or continue&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4035" class="blob-num js-line-number" data-line-number="4035"></td>
        <td id="LC4035" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4036" class="blob-num js-line-number" data-line-number="4036"></td>
        <td id="LC4036" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check for if statements that have completely empty bodies (no comments)</span></td>
      </tr>
      <tr>
        <td id="L4037" class="blob-num js-line-number" data-line-number="4037"></td>
        <td id="LC4037" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># and no else clauses.</span></td>
      </tr>
      <tr>
        <td id="L4038" class="blob-num js-line-number" data-line-number="4038"></td>
        <td id="LC4038" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;if&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4039" class="blob-num js-line-number" data-line-number="4039"></td>
        <td id="LC4039" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Find the position of the opening { for the if statement.</span></td>
      </tr>
      <tr>
        <td id="L4040" class="blob-num js-line-number" data-line-number="4040"></td>
        <td id="LC4040" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Return without logging an error if it has no brackets.</span></td>
      </tr>
      <tr>
        <td id="L4041" class="blob-num js-line-number" data-line-number="4041"></td>
        <td id="LC4041" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>opening_linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>end_linenum</span></td>
      </tr>
      <tr>
        <td id="L4042" class="blob-num js-line-number" data-line-number="4042"></td>
        <td id="LC4042" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>opening_line_fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>end_line</span>[<span class=pl-s1>end_pos</span>:]</td>
      </tr>
      <tr>
        <td id="L4043" class="blob-num js-line-number" data-line-number="4043"></td>
        <td id="LC4043" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Loop until EOF or find anything that&#39;s not whitespace or opening {.</span></td>
      </tr>
      <tr>
        <td id="L4044" class="blob-num js-line-number" data-line-number="4044"></td>
        <td id="LC4044" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^\s*\{&#39;</span>, <span class=pl-s1>opening_line_fragment</span>):</td>
      </tr>
      <tr>
        <td id="L4045" class="blob-num js-line-number" data-line-number="4045"></td>
        <td id="LC4045" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^(?!\s*$)&#39;</span>, <span class=pl-s1>opening_line_fragment</span>):</td>
      </tr>
      <tr>
        <td id="L4046" class="blob-num js-line-number" data-line-number="4046"></td>
        <td id="LC4046" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Conditional has no brackets.</span></td>
      </tr>
      <tr>
        <td id="L4047" class="blob-num js-line-number" data-line-number="4047"></td>
        <td id="LC4047" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4048" class="blob-num js-line-number" data-line-number="4048"></td>
        <td id="LC4048" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>opening_linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4049" class="blob-num js-line-number" data-line-number="4049"></td>
        <td id="LC4049" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>opening_linenum</span> <span class=pl-c1>==</span> <span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>):</td>
      </tr>
      <tr>
        <td id="L4050" class="blob-num js-line-number" data-line-number="4050"></td>
        <td id="LC4050" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Couldn&#39;t find conditional&#39;s opening { or any code before EOF.</span></td>
      </tr>
      <tr>
        <td id="L4051" class="blob-num js-line-number" data-line-number="4051"></td>
        <td id="LC4051" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4052" class="blob-num js-line-number" data-line-number="4052"></td>
        <td id="LC4052" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>opening_line_fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>opening_linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4053" class="blob-num js-line-number" data-line-number="4053"></td>
        <td id="LC4053" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Set opening_line (opening_line_fragment may not be entire opening line).</span></td>
      </tr>
      <tr>
        <td id="L4054" class="blob-num js-line-number" data-line-number="4054"></td>
        <td id="LC4054" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>opening_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>opening_linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4055" class="blob-num js-line-number" data-line-number="4055"></td>
        <td id="LC4055" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4056" class="blob-num js-line-number" data-line-number="4056"></td>
        <td id="LC4056" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Find the position of the closing }.</span></td>
      </tr>
      <tr>
        <td id="L4057" class="blob-num js-line-number" data-line-number="4057"></td>
        <td id="LC4057" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>opening_pos</span> <span class=pl-c1>=</span> <span class=pl-s1>opening_line_fragment</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;{&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4058" class="blob-num js-line-number" data-line-number="4058"></td>
        <td id="LC4058" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>opening_linenum</span> <span class=pl-c1>==</span> <span class=pl-s1>end_linenum</span>:</td>
      </tr>
      <tr>
        <td id="L4059" class="blob-num js-line-number" data-line-number="4059"></td>
        <td id="LC4059" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># We need to make opening_pos relative to the start of the entire line.</span></td>
      </tr>
      <tr>
        <td id="L4060" class="blob-num js-line-number" data-line-number="4060"></td>
        <td id="LC4060" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>opening_pos</span> <span class=pl-c1>+=</span> <span class=pl-s1>end_pos</span></td>
      </tr>
      <tr>
        <td id="L4061" class="blob-num js-line-number" data-line-number="4061"></td>
        <td id="LC4061" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>closing_line</span>, <span class=pl-s1>closing_linenum</span>, <span class=pl-s1>closing_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L4062" class="blob-num js-line-number" data-line-number="4062"></td>
        <td id="LC4062" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>opening_linenum</span>, <span class=pl-s1>opening_pos</span>)</td>
      </tr>
      <tr>
        <td id="L4063" class="blob-num js-line-number" data-line-number="4063"></td>
        <td id="LC4063" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>closing_pos</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4064" class="blob-num js-line-number" data-line-number="4064"></td>
        <td id="LC4064" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4065" class="blob-num js-line-number" data-line-number="4065"></td>
        <td id="LC4065" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4066" class="blob-num js-line-number" data-line-number="4066"></td>
        <td id="LC4066" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Now construct the body of the conditional. This consists of the portion</span></td>
      </tr>
      <tr>
        <td id="L4067" class="blob-num js-line-number" data-line-number="4067"></td>
        <td id="LC4067" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># of the opening line after the {, all lines until the closing line,</span></td>
      </tr>
      <tr>
        <td id="L4068" class="blob-num js-line-number" data-line-number="4068"></td>
        <td id="LC4068" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># and the portion of the closing line before the }.</span></td>
      </tr>
      <tr>
        <td id="L4069" class="blob-num js-line-number" data-line-number="4069"></td>
        <td id="LC4069" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>opening_linenum</span>] <span class=pl-c1>!=</span></td>
      </tr>
      <tr>
        <td id="L4070" class="blob-num js-line-number" data-line-number="4070"></td>
        <td id="LC4070" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>CleanseComments</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>opening_linenum</span>])):</td>
      </tr>
      <tr>
        <td id="L4071" class="blob-num js-line-number" data-line-number="4071"></td>
        <td id="LC4071" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Opening line ends with a comment, so conditional isn&#39;t empty.</span></td>
      </tr>
      <tr>
        <td id="L4072" class="blob-num js-line-number" data-line-number="4072"></td>
        <td id="LC4072" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4073" class="blob-num js-line-number" data-line-number="4073"></td>
        <td id="LC4073" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>closing_linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>opening_linenum</span>:</td>
      </tr>
      <tr>
        <td id="L4074" class="blob-num js-line-number" data-line-number="4074"></td>
        <td id="LC4074" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Opening line after the {. Ignore comments here since we checked above.</span></td>
      </tr>
      <tr>
        <td id="L4075" class="blob-num js-line-number" data-line-number="4075"></td>
        <td id="LC4075" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body</span> <span class=pl-c1>=</span> <span class=pl-en>list</span>(<span class=pl-s1>opening_line</span>[<span class=pl-s1>opening_pos</span><span class=pl-c1>+</span><span class=pl-c1>1</span>:])</td>
      </tr>
      <tr>
        <td id="L4076" class="blob-num js-line-number" data-line-number="4076"></td>
        <td id="LC4076" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># All lines until closing line, excluding closing line, with comments.</span></td>
      </tr>
      <tr>
        <td id="L4077" class="blob-num js-line-number" data-line-number="4077"></td>
        <td id="LC4077" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body</span>.<span class=pl-en>extend</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>opening_linenum</span><span class=pl-c1>+</span><span class=pl-c1>1</span>:<span class=pl-s1>closing_linenum</span>])</td>
      </tr>
      <tr>
        <td id="L4078" class="blob-num js-line-number" data-line-number="4078"></td>
        <td id="LC4078" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Closing line before the }. Won&#39;t (and can&#39;t) have comments.</span></td>
      </tr>
      <tr>
        <td id="L4079" class="blob-num js-line-number" data-line-number="4079"></td>
        <td id="LC4079" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body</span>.<span class=pl-en>append</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>closing_linenum</span>][:<span class=pl-s1>closing_pos</span><span class=pl-c1>-</span><span class=pl-c1>1</span>])</td>
      </tr>
      <tr>
        <td id="L4080" class="blob-num js-line-number" data-line-number="4080"></td>
        <td id="LC4080" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;<span class=pl-cce>\n</span>&#39;</span>.<span class=pl-en>join</span>(<span class=pl-s1>body</span>)</td>
      </tr>
      <tr>
        <td id="L4081" class="blob-num js-line-number" data-line-number="4081"></td>
        <td id="LC4081" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4082" class="blob-num js-line-number" data-line-number="4082"></td>
        <td id="LC4082" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># If statement has brackets and fits on a single line.</span></td>
      </tr>
      <tr>
        <td id="L4083" class="blob-num js-line-number" data-line-number="4083"></td>
        <td id="LC4083" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>body</span> <span class=pl-c1>=</span> <span class=pl-s1>opening_line</span>[<span class=pl-s1>opening_pos</span><span class=pl-c1>+</span><span class=pl-c1>1</span>:<span class=pl-s1>closing_pos</span><span class=pl-c1>-</span><span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L4084" class="blob-num js-line-number" data-line-number="4084"></td>
        <td id="LC4084" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4085" class="blob-num js-line-number" data-line-number="4085"></td>
        <td id="LC4085" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Check if the body is empty</span></td>
      </tr>
      <tr>
        <td id="L4086" class="blob-num js-line-number" data-line-number="4086"></td>
        <td id="LC4086" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>_EMPTY_CONDITIONAL_BODY_PATTERN</span>.<span class=pl-en>search</span>(<span class=pl-s1>body</span>):</td>
      </tr>
      <tr>
        <td id="L4087" class="blob-num js-line-number" data-line-number="4087"></td>
        <td id="LC4087" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4088" class="blob-num js-line-number" data-line-number="4088"></td>
        <td id="LC4088" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># The body is empty. Now make sure there&#39;s not an else clause.</span></td>
      </tr>
      <tr>
        <td id="L4089" class="blob-num js-line-number" data-line-number="4089"></td>
        <td id="LC4089" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>current_linenum</span> <span class=pl-c1>=</span> <span class=pl-s1>closing_linenum</span></td>
      </tr>
      <tr>
        <td id="L4090" class="blob-num js-line-number" data-line-number="4090"></td>
        <td id="LC4090" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>current_line_fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>closing_line</span>[<span class=pl-s1>closing_pos</span>:]</td>
      </tr>
      <tr>
        <td id="L4091" class="blob-num js-line-number" data-line-number="4091"></td>
        <td id="LC4091" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Loop until EOF or find anything that&#39;s not whitespace or else clause.</span></td>
      </tr>
      <tr>
        <td id="L4092" class="blob-num js-line-number" data-line-number="4092"></td>
        <td id="LC4092" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>while</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^\s*$|^(?=\s*else)&#39;</span>, <span class=pl-s1>current_line_fragment</span>):</td>
      </tr>
      <tr>
        <td id="L4093" class="blob-num js-line-number" data-line-number="4093"></td>
        <td id="LC4093" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;^(?=\s*else)&#39;</span>, <span class=pl-s1>current_line_fragment</span>):</td>
      </tr>
      <tr>
        <td id="L4094" class="blob-num js-line-number" data-line-number="4094"></td>
        <td id="LC4094" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Found an else clause, so don&#39;t log an error.</span></td>
      </tr>
      <tr>
        <td id="L4095" class="blob-num js-line-number" data-line-number="4095"></td>
        <td id="LC4095" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4096" class="blob-num js-line-number" data-line-number="4096"></td>
        <td id="LC4096" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>current_linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4097" class="blob-num js-line-number" data-line-number="4097"></td>
        <td id="LC4097" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>current_linenum</span> <span class=pl-c1>==</span> <span class=pl-en>len</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>):</td>
      </tr>
      <tr>
        <td id="L4098" class="blob-num js-line-number" data-line-number="4098"></td>
        <td id="LC4098" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L4099" class="blob-num js-line-number" data-line-number="4099"></td>
        <td id="LC4099" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>current_line_fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>current_linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4100" class="blob-num js-line-number" data-line-number="4100"></td>
        <td id="LC4100" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4101" class="blob-num js-line-number" data-line-number="4101"></td>
        <td id="LC4101" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># The body is empty and there&#39;s no else clause until EOF or other code.</span></td>
      </tr>
      <tr>
        <td id="L4102" class="blob-num js-line-number" data-line-number="4102"></td>
        <td id="LC4102" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>end_linenum</span>, <span class=pl-s>&#39;whitespace/empty_if_body&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4103" class="blob-num js-line-number" data-line-number="4103"></td>
        <td id="LC4103" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s>&#39;If statement had no body and no else clause&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L4104" class="blob-num js-line-number" data-line-number="4104"></td>
        <td id="LC4104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4105" class="blob-num js-line-number" data-line-number="4105"></td>
        <td id="LC4105" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4106" class="blob-num js-line-number" data-line-number="4106"></td>
        <td id="LC4106" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FindCheckMacro</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4107" class="blob-num js-line-number" data-line-number="4107"></td>
        <td id="LC4107" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Find a replaceable CHECK-like macro.</span></td>
      </tr>
      <tr>
        <td id="L4108" class="blob-num js-line-number" data-line-number="4108"></td>
        <td id="LC4108" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4109" class="blob-num js-line-number" data-line-number="4109"></td>
        <td id="LC4109" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4110" class="blob-num js-line-number" data-line-number="4110"></td>
        <td id="LC4110" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: line to search on.</span></td>
      </tr>
      <tr>
        <td id="L4111" class="blob-num js-line-number" data-line-number="4111"></td>
        <td id="LC4111" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4112" class="blob-num js-line-number" data-line-number="4112"></td>
        <td id="LC4112" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    (macro name, start position), or (None, -1) if no replaceable</span></td>
      </tr>
      <tr>
        <td id="L4113" class="blob-num js-line-number" data-line-number="4113"></td>
        <td id="LC4113" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    macro is found.</span></td>
      </tr>
      <tr>
        <td id="L4114" class="blob-num js-line-number" data-line-number="4114"></td>
        <td id="LC4114" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4115" class="blob-num js-line-number" data-line-number="4115"></td>
        <td id="LC4115" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>macro</span> <span class=pl-c1>in</span> <span class=pl-s1>_CHECK_MACROS</span>:</td>
      </tr>
      <tr>
        <td id="L4116" class="blob-num js-line-number" data-line-number="4116"></td>
        <td id="LC4116" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>i</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s1>macro</span>)</td>
      </tr>
      <tr>
        <td id="L4117" class="blob-num js-line-number" data-line-number="4117"></td>
        <td id="LC4117" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>i</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4118" class="blob-num js-line-number" data-line-number="4118"></td>
        <td id="LC4118" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Find opening parenthesis.  Do a regular expression match here</span></td>
      </tr>
      <tr>
        <td id="L4119" class="blob-num js-line-number" data-line-number="4119"></td>
        <td id="LC4119" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># to make sure that we are matching the expected CHECK macro, as</span></td>
      </tr>
      <tr>
        <td id="L4120" class="blob-num js-line-number" data-line-number="4120"></td>
        <td id="LC4120" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># opposed to some other macro that happens to contain the CHECK</span></td>
      </tr>
      <tr>
        <td id="L4121" class="blob-num js-line-number" data-line-number="4121"></td>
        <td id="LC4121" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># substring.</span></td>
      </tr>
      <tr>
        <td id="L4122" class="blob-num js-line-number" data-line-number="4122"></td>
        <td id="LC4122" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*\b&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>macro</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\s*)\(&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4123" class="blob-num js-line-number" data-line-number="4123"></td>
        <td id="LC4123" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L4124" class="blob-num js-line-number" data-line-number="4124"></td>
        <td id="LC4124" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4125" class="blob-num js-line-number" data-line-number="4125"></td>
        <td id="LC4125" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> (<span class=pl-s1>macro</span>, <span class=pl-en>len</span>(<span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L4126" class="blob-num js-line-number" data-line-number="4126"></td>
        <td id="LC4126" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-c1>None</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L4127" class="blob-num js-line-number" data-line-number="4127"></td>
        <td id="LC4127" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4128" class="blob-num js-line-number" data-line-number="4128"></td>
        <td id="LC4128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4129" class="blob-num js-line-number" data-line-number="4129"></td>
        <td id="LC4129" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckCheck</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4130" class="blob-num js-line-number" data-line-number="4130"></td>
        <td id="LC4130" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks the use of CHECK and EXPECT macros.</span></td>
      </tr>
      <tr>
        <td id="L4131" class="blob-num js-line-number" data-line-number="4131"></td>
        <td id="LC4131" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4132" class="blob-num js-line-number" data-line-number="4132"></td>
        <td id="LC4132" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4133" class="blob-num js-line-number" data-line-number="4133"></td>
        <td id="LC4133" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4134" class="blob-num js-line-number" data-line-number="4134"></td>
        <td id="LC4134" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4135" class="blob-num js-line-number" data-line-number="4135"></td>
        <td id="LC4135" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4136" class="blob-num js-line-number" data-line-number="4136"></td>
        <td id="LC4136" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4137" class="blob-num js-line-number" data-line-number="4137"></td>
        <td id="LC4137" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4138" class="blob-num js-line-number" data-line-number="4138"></td>
        <td id="LC4138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4139" class="blob-num js-line-number" data-line-number="4139"></td>
        <td id="LC4139" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Decide the set of replacement macros that should be suggested</span></td>
      </tr>
      <tr>
        <td id="L4140" class="blob-num js-line-number" data-line-number="4140"></td>
        <td id="LC4140" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span></td>
      </tr>
      <tr>
        <td id="L4141" class="blob-num js-line-number" data-line-number="4141"></td>
        <td id="LC4141" class="blob-code blob-code-inner js-file-line">  (<span class=pl-s1>check_macro</span>, <span class=pl-s1>start_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>FindCheckMacro</span>(<span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>])</td>
      </tr>
      <tr>
        <td id="L4142" class="blob-num js-line-number" data-line-number="4142"></td>
        <td id="LC4142" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>check_macro</span>:</td>
      </tr>
      <tr>
        <td id="L4143" class="blob-num js-line-number" data-line-number="4143"></td>
        <td id="LC4143" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4144" class="blob-num js-line-number" data-line-number="4144"></td>
        <td id="LC4144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4145" class="blob-num js-line-number" data-line-number="4145"></td>
        <td id="LC4145" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Find end of the boolean expression by matching parentheses</span></td>
      </tr>
      <tr>
        <td id="L4146" class="blob-num js-line-number" data-line-number="4146"></td>
        <td id="LC4146" class="blob-code blob-code-inner js-file-line">  (<span class=pl-s1>last_line</span>, <span class=pl-s1>end_line</span>, <span class=pl-s1>end_pos</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L4147" class="blob-num js-line-number" data-line-number="4147"></td>
        <td id="LC4147" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>start_pos</span>)</td>
      </tr>
      <tr>
        <td id="L4148" class="blob-num js-line-number" data-line-number="4148"></td>
        <td id="LC4148" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>end_pos</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4149" class="blob-num js-line-number" data-line-number="4149"></td>
        <td id="LC4149" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4150" class="blob-num js-line-number" data-line-number="4150"></td>
        <td id="LC4150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4151" class="blob-num js-line-number" data-line-number="4151"></td>
        <td id="LC4151" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If the check macro is followed by something other than a</span></td>
      </tr>
      <tr>
        <td id="L4152" class="blob-num js-line-number" data-line-number="4152"></td>
        <td id="LC4152" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># semicolon, assume users will log their own custom error messages</span></td>
      </tr>
      <tr>
        <td id="L4153" class="blob-num js-line-number" data-line-number="4153"></td>
        <td id="LC4153" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># and don&#39;t suggest any replacements.</span></td>
      </tr>
      <tr>
        <td id="L4154" class="blob-num js-line-number" data-line-number="4154"></td>
        <td id="LC4154" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*;&#39;</span>, <span class=pl-s1>last_line</span>[<span class=pl-s1>end_pos</span>:]):</td>
      </tr>
      <tr>
        <td id="L4155" class="blob-num js-line-number" data-line-number="4155"></td>
        <td id="LC4155" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4156" class="blob-num js-line-number" data-line-number="4156"></td>
        <td id="LC4156" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4157" class="blob-num js-line-number" data-line-number="4157"></td>
        <td id="LC4157" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>==</span> <span class=pl-s1>end_line</span>:</td>
      </tr>
      <tr>
        <td id="L4158" class="blob-num js-line-number" data-line-number="4158"></td>
        <td id="LC4158" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>][<span class=pl-s1>start_pos</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>:<span class=pl-s1>end_pos</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L4159" class="blob-num js-line-number" data-line-number="4159"></td>
        <td id="LC4159" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4160" class="blob-num js-line-number" data-line-number="4160"></td>
        <td id="LC4160" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>][<span class=pl-s1>start_pos</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L4161" class="blob-num js-line-number" data-line-number="4161"></td>
        <td id="LC4161" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>, <span class=pl-s1>end_line</span>):</td>
      </tr>
      <tr>
        <td id="L4162" class="blob-num js-line-number" data-line-number="4162"></td>
        <td id="LC4162" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>expression</span> <span class=pl-c1>+=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L4163" class="blob-num js-line-number" data-line-number="4163"></td>
        <td id="LC4163" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>expression</span> <span class=pl-c1>+=</span> <span class=pl-s1>last_line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>end_pos</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L4164" class="blob-num js-line-number" data-line-number="4164"></td>
        <td id="LC4164" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4165" class="blob-num js-line-number" data-line-number="4165"></td>
        <td id="LC4165" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Parse expression so that we can take parentheses into account.</span></td>
      </tr>
      <tr>
        <td id="L4166" class="blob-num js-line-number" data-line-number="4166"></td>
        <td id="LC4166" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This avoids false positives for inputs like &quot;CHECK((a &lt; 4) == b)&quot;,</span></td>
      </tr>
      <tr>
        <td id="L4167" class="blob-num js-line-number" data-line-number="4167"></td>
        <td id="LC4167" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># which is not replaceable by CHECK_LE.</span></td>
      </tr>
      <tr>
        <td id="L4168" class="blob-num js-line-number" data-line-number="4168"></td>
        <td id="LC4168" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lhs</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L4169" class="blob-num js-line-number" data-line-number="4169"></td>
        <td id="LC4169" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>rhs</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L4170" class="blob-num js-line-number" data-line-number="4170"></td>
        <td id="LC4170" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>operator</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L4171" class="blob-num js-line-number" data-line-number="4171"></td>
        <td id="LC4171" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>expression</span>:</td>
      </tr>
      <tr>
        <td id="L4172" class="blob-num js-line-number" data-line-number="4172"></td>
        <td id="LC4172" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*(&lt;&lt;|&lt;&lt;=|&gt;&gt;|&gt;&gt;=|-&gt;\*|-&gt;|&amp;&amp;|\|\||&#39;</span></td>
      </tr>
      <tr>
        <td id="L4173" class="blob-num js-line-number" data-line-number="4173"></td>
        <td id="LC4173" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s>r&#39;==|!=|&gt;=|&gt;|&lt;=|&lt;|\()(.*)$&#39;</span>, <span class=pl-s1>expression</span>)</td>
      </tr>
      <tr>
        <td id="L4174" class="blob-num js-line-number" data-line-number="4174"></td>
        <td id="LC4174" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L4175" class="blob-num js-line-number" data-line-number="4175"></td>
        <td id="LC4175" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>token</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L4176" class="blob-num js-line-number" data-line-number="4176"></td>
        <td id="LC4176" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>token</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;(&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4177" class="blob-num js-line-number" data-line-number="4177"></td>
        <td id="LC4177" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Parenthesized operand</span></td>
      </tr>
      <tr>
        <td id="L4178" class="blob-num js-line-number" data-line-number="4178"></td>
        <td id="LC4178" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L4179" class="blob-num js-line-number" data-line-number="4179"></td>
        <td id="LC4179" class="blob-code blob-code-inner js-file-line">        (<span class=pl-s1>end</span>, <span class=pl-s1>_</span>) <span class=pl-c1>=</span> <span class=pl-v>FindEndOfExpressionInLine</span>(<span class=pl-s1>expression</span>, <span class=pl-c1>0</span>, [<span class=pl-s>&#39;(&#39;</span>])</td>
      </tr>
      <tr>
        <td id="L4180" class="blob-num js-line-number" data-line-number="4180"></td>
        <td id="LC4180" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>end</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4181" class="blob-num js-line-number" data-line-number="4181"></td>
        <td id="LC4181" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>return</span>  <span class=pl-c># Unmatched parenthesis</span></td>
      </tr>
      <tr>
        <td id="L4182" class="blob-num js-line-number" data-line-number="4182"></td>
        <td id="LC4182" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>lhs</span> <span class=pl-c1>+=</span> <span class=pl-s>&#39;(&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>expression</span>[<span class=pl-c1>0</span>:<span class=pl-s1>end</span>]</td>
      </tr>
      <tr>
        <td id="L4183" class="blob-num js-line-number" data-line-number="4183"></td>
        <td id="LC4183" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>expression</span>[<span class=pl-s1>end</span>:]</td>
      </tr>
      <tr>
        <td id="L4184" class="blob-num js-line-number" data-line-number="4184"></td>
        <td id="LC4184" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-s1>token</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;&amp;&amp;&#39;</span>, <span class=pl-s>&#39;||&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4185" class="blob-num js-line-number" data-line-number="4185"></td>
        <td id="LC4185" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Logical and/or operators.  This means the expression</span></td>
      </tr>
      <tr>
        <td id="L4186" class="blob-num js-line-number" data-line-number="4186"></td>
        <td id="LC4186" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># contains more than one term, for example:</span></td>
      </tr>
      <tr>
        <td id="L4187" class="blob-num js-line-number" data-line-number="4187"></td>
        <td id="LC4187" class="blob-code blob-code-inner js-file-line">        <span class=pl-c>#   CHECK(42 &lt; a &amp;&amp; a &lt; b);</span></td>
      </tr>
      <tr>
        <td id="L4188" class="blob-num js-line-number" data-line-number="4188"></td>
        <td id="LC4188" class="blob-code blob-code-inner js-file-line">        <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4189" class="blob-num js-line-number" data-line-number="4189"></td>
        <td id="LC4189" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># These are not replaceable with CHECK_LE, so bail out early.</span></td>
      </tr>
      <tr>
        <td id="L4190" class="blob-num js-line-number" data-line-number="4190"></td>
        <td id="LC4190" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4191" class="blob-num js-line-number" data-line-number="4191"></td>
        <td id="LC4191" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-s1>token</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;&lt;&lt;&#39;</span>, <span class=pl-s>&#39;&lt;&lt;=&#39;</span>, <span class=pl-s>&#39;&gt;&gt;&#39;</span>, <span class=pl-s>&#39;&gt;&gt;=&#39;</span>, <span class=pl-s>&#39;-&gt;*&#39;</span>, <span class=pl-s>&#39;-&gt;&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4192" class="blob-num js-line-number" data-line-number="4192"></td>
        <td id="LC4192" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Non-relational operator</span></td>
      </tr>
      <tr>
        <td id="L4193" class="blob-num js-line-number" data-line-number="4193"></td>
        <td id="LC4193" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>lhs</span> <span class=pl-c1>+=</span> <span class=pl-s1>token</span></td>
      </tr>
      <tr>
        <td id="L4194" class="blob-num js-line-number" data-line-number="4194"></td>
        <td id="LC4194" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L4195" class="blob-num js-line-number" data-line-number="4195"></td>
        <td id="LC4195" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4196" class="blob-num js-line-number" data-line-number="4196"></td>
        <td id="LC4196" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Relational operator</span></td>
      </tr>
      <tr>
        <td id="L4197" class="blob-num js-line-number" data-line-number="4197"></td>
        <td id="LC4197" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>operator</span> <span class=pl-c1>=</span> <span class=pl-s1>token</span></td>
      </tr>
      <tr>
        <td id="L4198" class="blob-num js-line-number" data-line-number="4198"></td>
        <td id="LC4198" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>rhs</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L4199" class="blob-num js-line-number" data-line-number="4199"></td>
        <td id="LC4199" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L4200" class="blob-num js-line-number" data-line-number="4200"></td>
        <td id="LC4200" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4201" class="blob-num js-line-number" data-line-number="4201"></td>
        <td id="LC4201" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Unparenthesized operand.  Instead of appending to lhs one character</span></td>
      </tr>
      <tr>
        <td id="L4202" class="blob-num js-line-number" data-line-number="4202"></td>
        <td id="LC4202" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># at a time, we do another regular expression match to consume several</span></td>
      </tr>
      <tr>
        <td id="L4203" class="blob-num js-line-number" data-line-number="4203"></td>
        <td id="LC4203" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># characters at once if possible.  Trivial benchmark shows that this</span></td>
      </tr>
      <tr>
        <td id="L4204" class="blob-num js-line-number" data-line-number="4204"></td>
        <td id="LC4204" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># is more efficient when the operands are longer than a single</span></td>
      </tr>
      <tr>
        <td id="L4205" class="blob-num js-line-number" data-line-number="4205"></td>
        <td id="LC4205" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># character, which is generally the case.</span></td>
      </tr>
      <tr>
        <td id="L4206" class="blob-num js-line-number" data-line-number="4206"></td>
        <td id="LC4206" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^-=!&lt;&gt;()&amp;|]+)(.*)$&#39;</span>, <span class=pl-s1>expression</span>)</td>
      </tr>
      <tr>
        <td id="L4207" class="blob-num js-line-number" data-line-number="4207"></td>
        <td id="LC4207" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L4208" class="blob-num js-line-number" data-line-number="4208"></td>
        <td id="LC4208" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(\s*\S)(.*)$&#39;</span>, <span class=pl-s1>expression</span>)</td>
      </tr>
      <tr>
        <td id="L4209" class="blob-num js-line-number" data-line-number="4209"></td>
        <td id="LC4209" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L4210" class="blob-num js-line-number" data-line-number="4210"></td>
        <td id="LC4210" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L4211" class="blob-num js-line-number" data-line-number="4211"></td>
        <td id="LC4211" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>lhs</span> <span class=pl-c1>+=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L4212" class="blob-num js-line-number" data-line-number="4212"></td>
        <td id="LC4212" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>expression</span> <span class=pl-c1>=</span> <span class=pl-s1>matched</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L4213" class="blob-num js-line-number" data-line-number="4213"></td>
        <td id="LC4213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4214" class="blob-num js-line-number" data-line-number="4214"></td>
        <td id="LC4214" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Only apply checks if we got all parts of the boolean expression</span></td>
      </tr>
      <tr>
        <td id="L4215" class="blob-num js-line-number" data-line-number="4215"></td>
        <td id="LC4215" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> (<span class=pl-s1>lhs</span> <span class=pl-c1>and</span> <span class=pl-s1>operator</span> <span class=pl-c1>and</span> <span class=pl-s1>rhs</span>):</td>
      </tr>
      <tr>
        <td id="L4216" class="blob-num js-line-number" data-line-number="4216"></td>
        <td id="LC4216" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4217" class="blob-num js-line-number" data-line-number="4217"></td>
        <td id="LC4217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4218" class="blob-num js-line-number" data-line-number="4218"></td>
        <td id="LC4218" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check that rhs do not contain logical operators.  We already know</span></td>
      </tr>
      <tr>
        <td id="L4219" class="blob-num js-line-number" data-line-number="4219"></td>
        <td id="LC4219" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># that lhs is fine since the loop above parses out &amp;&amp; and ||.</span></td>
      </tr>
      <tr>
        <td id="L4220" class="blob-num js-line-number" data-line-number="4220"></td>
        <td id="LC4220" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>rhs</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;&amp;&amp;&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>or</span> <span class=pl-s1>rhs</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;||&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L4221" class="blob-num js-line-number" data-line-number="4221"></td>
        <td id="LC4221" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4222" class="blob-num js-line-number" data-line-number="4222"></td>
        <td id="LC4222" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4223" class="blob-num js-line-number" data-line-number="4223"></td>
        <td id="LC4223" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># At least one of the operands must be a constant literal.  This is</span></td>
      </tr>
      <tr>
        <td id="L4224" class="blob-num js-line-number" data-line-number="4224"></td>
        <td id="LC4224" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># to avoid suggesting replacements for unprintable things like</span></td>
      </tr>
      <tr>
        <td id="L4225" class="blob-num js-line-number" data-line-number="4225"></td>
        <td id="LC4225" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># CHECK(variable != iterator)</span></td>
      </tr>
      <tr>
        <td id="L4226" class="blob-num js-line-number" data-line-number="4226"></td>
        <td id="LC4226" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4227" class="blob-num js-line-number" data-line-number="4227"></td>
        <td id="LC4227" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The following pattern matches decimal, hex integers, strings, and</span></td>
      </tr>
      <tr>
        <td id="L4228" class="blob-num js-line-number" data-line-number="4228"></td>
        <td id="LC4228" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># characters (in that order).</span></td>
      </tr>
      <tr>
        <td id="L4229" class="blob-num js-line-number" data-line-number="4229"></td>
        <td id="LC4229" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lhs</span> <span class=pl-c1>=</span> <span class=pl-s1>lhs</span>.<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L4230" class="blob-num js-line-number" data-line-number="4230"></td>
        <td id="LC4230" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>rhs</span> <span class=pl-c1>=</span> <span class=pl-s1>rhs</span>.<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L4231" class="blob-num js-line-number" data-line-number="4231"></td>
        <td id="LC4231" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match_constant</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;^([-+]?(\d+|0[xX][0-9a-fA-F]+)[lLuU]{0,3}|&quot;.*&quot;|\&#39;.*\&#39;)$&#39;</span></td>
      </tr>
      <tr>
        <td id="L4232" class="blob-num js-line-number" data-line-number="4232"></td>
        <td id="LC4232" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s1>match_constant</span>, <span class=pl-s1>lhs</span>) <span class=pl-c1>or</span> <span class=pl-v>Match</span>(<span class=pl-s1>match_constant</span>, <span class=pl-s1>rhs</span>):</td>
      </tr>
      <tr>
        <td id="L4233" class="blob-num js-line-number" data-line-number="4233"></td>
        <td id="LC4233" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Note: since we know both lhs and rhs, we can provide a more</span></td>
      </tr>
      <tr>
        <td id="L4234" class="blob-num js-line-number" data-line-number="4234"></td>
        <td id="LC4234" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># descriptive error message like:</span></td>
      </tr>
      <tr>
        <td id="L4235" class="blob-num js-line-number" data-line-number="4235"></td>
        <td id="LC4235" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Consider using CHECK_EQ(x, 42) instead of CHECK(x == 42)</span></td>
      </tr>
      <tr>
        <td id="L4236" class="blob-num js-line-number" data-line-number="4236"></td>
        <td id="LC4236" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Instead of:</span></td>
      </tr>
      <tr>
        <td id="L4237" class="blob-num js-line-number" data-line-number="4237"></td>
        <td id="LC4237" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   Consider using CHECK_EQ instead of CHECK(a == b)</span></td>
      </tr>
      <tr>
        <td id="L4238" class="blob-num js-line-number" data-line-number="4238"></td>
        <td id="LC4238" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4239" class="blob-num js-line-number" data-line-number="4239"></td>
        <td id="LC4239" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We are still keeping the less descriptive message because if lhs</span></td>
      </tr>
      <tr>
        <td id="L4240" class="blob-num js-line-number" data-line-number="4240"></td>
        <td id="LC4240" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># or rhs gets long, the error message might become unreadable.</span></td>
      </tr>
      <tr>
        <td id="L4241" class="blob-num js-line-number" data-line-number="4241"></td>
        <td id="LC4241" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/check&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L4242" class="blob-num js-line-number" data-line-number="4242"></td>
        <td id="LC4242" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Consider using %s instead of %s(a %s b)&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L4243" class="blob-num js-line-number" data-line-number="4243"></td>
        <td id="LC4243" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>_CHECK_REPLACEMENT</span>[<span class=pl-s1>check_macro</span>][<span class=pl-s1>operator</span>],</td>
      </tr>
      <tr>
        <td id="L4244" class="blob-num js-line-number" data-line-number="4244"></td>
        <td id="LC4244" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>check_macro</span>, <span class=pl-s1>operator</span>))</td>
      </tr>
      <tr>
        <td id="L4245" class="blob-num js-line-number" data-line-number="4245"></td>
        <td id="LC4245" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4246" class="blob-num js-line-number" data-line-number="4246"></td>
        <td id="LC4246" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4247" class="blob-num js-line-number" data-line-number="4247"></td>
        <td id="LC4247" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckAltTokens</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4248" class="blob-num js-line-number" data-line-number="4248"></td>
        <td id="LC4248" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check alternative keywords being used in boolean expressions.</span></td>
      </tr>
      <tr>
        <td id="L4249" class="blob-num js-line-number" data-line-number="4249"></td>
        <td id="LC4249" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4250" class="blob-num js-line-number" data-line-number="4250"></td>
        <td id="LC4250" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4251" class="blob-num js-line-number" data-line-number="4251"></td>
        <td id="LC4251" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4252" class="blob-num js-line-number" data-line-number="4252"></td>
        <td id="LC4252" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4253" class="blob-num js-line-number" data-line-number="4253"></td>
        <td id="LC4253" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4254" class="blob-num js-line-number" data-line-number="4254"></td>
        <td id="LC4254" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4255" class="blob-num js-line-number" data-line-number="4255"></td>
        <td id="LC4255" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4256" class="blob-num js-line-number" data-line-number="4256"></td>
        <td id="LC4256" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4257" class="blob-num js-line-number" data-line-number="4257"></td>
        <td id="LC4257" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4258" class="blob-num js-line-number" data-line-number="4258"></td>
        <td id="LC4258" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Avoid preprocessor lines</span></td>
      </tr>
      <tr>
        <td id="L4259" class="blob-num js-line-number" data-line-number="4259"></td>
        <td id="LC4259" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4260" class="blob-num js-line-number" data-line-number="4260"></td>
        <td id="LC4260" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4261" class="blob-num js-line-number" data-line-number="4261"></td>
        <td id="LC4261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4262" class="blob-num js-line-number" data-line-number="4262"></td>
        <td id="LC4262" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Last ditch effort to avoid multi-line comments.  This will not help</span></td>
      </tr>
      <tr>
        <td id="L4263" class="blob-num js-line-number" data-line-number="4263"></td>
        <td id="LC4263" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if the comment started before the current line or ended after the</span></td>
      </tr>
      <tr>
        <td id="L4264" class="blob-num js-line-number" data-line-number="4264"></td>
        <td id="LC4264" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># current line, but it catches most of the false positives.  At least,</span></td>
      </tr>
      <tr>
        <td id="L4265" class="blob-num js-line-number" data-line-number="4265"></td>
        <td id="LC4265" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># it provides a way to workaround this warning for people who use</span></td>
      </tr>
      <tr>
        <td id="L4266" class="blob-num js-line-number" data-line-number="4266"></td>
        <td id="LC4266" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># multi-line comments in preprocessor macros.</span></td>
      </tr>
      <tr>
        <td id="L4267" class="blob-num js-line-number" data-line-number="4267"></td>
        <td id="LC4267" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4268" class="blob-num js-line-number" data-line-number="4268"></td>
        <td id="LC4268" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): remove this once cpplint has better support for</span></td>
      </tr>
      <tr>
        <td id="L4269" class="blob-num js-line-number" data-line-number="4269"></td>
        <td id="LC4269" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># multi-line comments.</span></td>
      </tr>
      <tr>
        <td id="L4270" class="blob-num js-line-number" data-line-number="4270"></td>
        <td id="LC4270" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;/*&#39;</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span> <span class=pl-c1>or</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;*/&#39;</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4271" class="blob-num js-line-number" data-line-number="4271"></td>
        <td id="LC4271" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4272" class="blob-num js-line-number" data-line-number="4272"></td>
        <td id="LC4272" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4273" class="blob-num js-line-number" data-line-number="4273"></td>
        <td id="LC4273" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>match</span> <span class=pl-c1>in</span> <span class=pl-s1>_ALT_TOKEN_REPLACEMENT_PATTERN</span>.<span class=pl-en>finditer</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4274" class="blob-num js-line-number" data-line-number="4274"></td>
        <td id="LC4274" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/alt_tokens&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L4275" class="blob-num js-line-number" data-line-number="4275"></td>
        <td id="LC4275" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Use operator %s instead of %s&#39;</span> <span class=pl-c1>%</span> (</td>
      </tr>
      <tr>
        <td id="L4276" class="blob-num js-line-number" data-line-number="4276"></td>
        <td id="LC4276" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>_ALT_TOKEN_REPLACEMENT</span>[<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)], <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L4277" class="blob-num js-line-number" data-line-number="4277"></td>
        <td id="LC4277" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4278" class="blob-num js-line-number" data-line-number="4278"></td>
        <td id="LC4278" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4279" class="blob-num js-line-number" data-line-number="4279"></td>
        <td id="LC4279" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>GetLineWidth</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4280" class="blob-num js-line-number" data-line-number="4280"></td>
        <td id="LC4280" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Determines the width of the line in column positions.</span></td>
      </tr>
      <tr>
        <td id="L4281" class="blob-num js-line-number" data-line-number="4281"></td>
        <td id="LC4281" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4282" class="blob-num js-line-number" data-line-number="4282"></td>
        <td id="LC4282" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4283" class="blob-num js-line-number" data-line-number="4283"></td>
        <td id="LC4283" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: A string, which may be a Unicode string.</span></td>
      </tr>
      <tr>
        <td id="L4284" class="blob-num js-line-number" data-line-number="4284"></td>
        <td id="LC4284" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4285" class="blob-num js-line-number" data-line-number="4285"></td>
        <td id="LC4285" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4286" class="blob-num js-line-number" data-line-number="4286"></td>
        <td id="LC4286" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The width of the line in column positions, accounting for Unicode</span></td>
      </tr>
      <tr>
        <td id="L4287" class="blob-num js-line-number" data-line-number="4287"></td>
        <td id="LC4287" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    combining characters and wide characters.</span></td>
      </tr>
      <tr>
        <td id="L4288" class="blob-num js-line-number" data-line-number="4288"></td>
        <td id="LC4288" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4289" class="blob-num js-line-number" data-line-number="4289"></td>
        <td id="LC4289" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-en>isinstance</span>(<span class=pl-s1>line</span>, <span class=pl-s1>unicode</span>):</td>
      </tr>
      <tr>
        <td id="L4290" class="blob-num js-line-number" data-line-number="4290"></td>
        <td id="LC4290" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>width</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L4291" class="blob-num js-line-number" data-line-number="4291"></td>
        <td id="LC4291" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>uc</span> <span class=pl-c1>in</span> <span class=pl-s1>unicodedata</span>.<span class=pl-en>normalize</span>(<span class=pl-s>&#39;NFC&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4292" class="blob-num js-line-number" data-line-number="4292"></td>
        <td id="LC4292" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>unicodedata</span>.<span class=pl-en>east_asian_width</span>(<span class=pl-s1>uc</span>) <span class=pl-c1>in</span> (<span class=pl-s>&#39;W&#39;</span>, <span class=pl-s>&#39;F&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4293" class="blob-num js-line-number" data-line-number="4293"></td>
        <td id="LC4293" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>width</span> <span class=pl-c1>+=</span> <span class=pl-c1>2</span></td>
      </tr>
      <tr>
        <td id="L4294" class="blob-num js-line-number" data-line-number="4294"></td>
        <td id="LC4294" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>elif</span> <span class=pl-c1>not</span> <span class=pl-s1>unicodedata</span>.<span class=pl-en>combining</span>(<span class=pl-s1>uc</span>):</td>
      </tr>
      <tr>
        <td id="L4295" class="blob-num js-line-number" data-line-number="4295"></td>
        <td id="LC4295" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Issue 337</span></td>
      </tr>
      <tr>
        <td id="L4296" class="blob-num js-line-number" data-line-number="4296"></td>
        <td id="LC4296" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># https://mail.python.org/pipermail/python-list/2012-August/628809.html</span></td>
      </tr>
      <tr>
        <td id="L4297" class="blob-num js-line-number" data-line-number="4297"></td>
        <td id="LC4297" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> (<span class=pl-s1>sys</span>.<span class=pl-s1>version_info</span>.<span class=pl-s1>major</span>, <span class=pl-s1>sys</span>.<span class=pl-s1>version_info</span>.<span class=pl-s1>minor</span>) <span class=pl-c1>&lt;=</span> (<span class=pl-c1>3</span>, <span class=pl-c1>2</span>):</td>
      </tr>
      <tr>
        <td id="L4298" class="blob-num js-line-number" data-line-number="4298"></td>
        <td id="LC4298" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># https://github.com/python/cpython/blob/2.7/Include/unicodeobject.h#L81</span></td>
      </tr>
      <tr>
        <td id="L4299" class="blob-num js-line-number" data-line-number="4299"></td>
        <td id="LC4299" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>is_wide_build</span> <span class=pl-c1>=</span> <span class=pl-s1>sysconfig</span>.<span class=pl-en>get_config_var</span>(<span class=pl-s>&quot;Py_UNICODE_SIZE&quot;</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>4</span></td>
      </tr>
      <tr>
        <td id="L4300" class="blob-num js-line-number" data-line-number="4300"></td>
        <td id="LC4300" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># https://github.com/python/cpython/blob/2.7/Objects/unicodeobject.c#L564</span></td>
      </tr>
      <tr>
        <td id="L4301" class="blob-num js-line-number" data-line-number="4301"></td>
        <td id="LC4301" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>is_low_surrogate</span> <span class=pl-c1>=</span> <span class=pl-c1>0xDC00</span> <span class=pl-c1>&lt;=</span> <span class=pl-en>ord</span>(<span class=pl-s1>uc</span>) <span class=pl-c1>&lt;=</span> <span class=pl-c1>0xDFFF</span></td>
      </tr>
      <tr>
        <td id="L4302" class="blob-num js-line-number" data-line-number="4302"></td>
        <td id="LC4302" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>is_wide_build</span> <span class=pl-c1>and</span> <span class=pl-s1>is_low_surrogate</span>:</td>
      </tr>
      <tr>
        <td id="L4303" class="blob-num js-line-number" data-line-number="4303"></td>
        <td id="LC4303" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>width</span> <span class=pl-c1>-=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4304" class="blob-num js-line-number" data-line-number="4304"></td>
        <td id="LC4304" class="blob-code blob-code-inner js-file-line">          </td>
      </tr>
      <tr>
        <td id="L4305" class="blob-num js-line-number" data-line-number="4305"></td>
        <td id="LC4305" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>width</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4306" class="blob-num js-line-number" data-line-number="4306"></td>
        <td id="LC4306" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>width</span></td>
      </tr>
      <tr>
        <td id="L4307" class="blob-num js-line-number" data-line-number="4307"></td>
        <td id="LC4307" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4308" class="blob-num js-line-number" data-line-number="4308"></td>
        <td id="LC4308" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-en>len</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4309" class="blob-num js-line-number" data-line-number="4309"></td>
        <td id="LC4309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4310" class="blob-num js-line-number" data-line-number="4310"></td>
        <td id="LC4310" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4311" class="blob-num js-line-number" data-line-number="4311"></td>
        <td id="LC4311" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckStyle</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>nesting_state</span>,</td>
      </tr>
      <tr>
        <td id="L4312" class="blob-num js-line-number" data-line-number="4312"></td>
        <td id="LC4312" class="blob-code blob-code-inner js-file-line">               <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4313" class="blob-num js-line-number" data-line-number="4313"></td>
        <td id="LC4313" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks rules from the &#39;C++ style rules&#39; section of cppguide.html.</span></td>
      </tr>
      <tr>
        <td id="L4314" class="blob-num js-line-number" data-line-number="4314"></td>
        <td id="LC4314" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4315" class="blob-num js-line-number" data-line-number="4315"></td>
        <td id="LC4315" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Most of these rules are hard to test (naming, comment style), but we</span></td>
      </tr>
      <tr>
        <td id="L4316" class="blob-num js-line-number" data-line-number="4316"></td>
        <td id="LC4316" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  do what we can.  In particular we check for 2-space indents, line lengths,</span></td>
      </tr>
      <tr>
        <td id="L4317" class="blob-num js-line-number" data-line-number="4317"></td>
        <td id="LC4317" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  tab usage, spaces inside code, etc.</span></td>
      </tr>
      <tr>
        <td id="L4318" class="blob-num js-line-number" data-line-number="4318"></td>
        <td id="LC4318" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4319" class="blob-num js-line-number" data-line-number="4319"></td>
        <td id="LC4319" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4320" class="blob-num js-line-number" data-line-number="4320"></td>
        <td id="LC4320" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4321" class="blob-num js-line-number" data-line-number="4321"></td>
        <td id="LC4321" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4322" class="blob-num js-line-number" data-line-number="4322"></td>
        <td id="LC4322" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4323" class="blob-num js-line-number" data-line-number="4323"></td>
        <td id="LC4323" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    file_extension: The extension (without the dot) of the filename.</span></td>
      </tr>
      <tr>
        <td id="L4324" class="blob-num js-line-number" data-line-number="4324"></td>
        <td id="LC4324" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L4325" class="blob-num js-line-number" data-line-number="4325"></td>
        <td id="LC4325" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L4326" class="blob-num js-line-number" data-line-number="4326"></td>
        <td id="LC4326" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4327" class="blob-num js-line-number" data-line-number="4327"></td>
        <td id="LC4327" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4328" class="blob-num js-line-number" data-line-number="4328"></td>
        <td id="LC4328" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4329" class="blob-num js-line-number" data-line-number="4329"></td>
        <td id="LC4329" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t use &quot;elided&quot; lines here, otherwise we can&#39;t check commented lines.</span></td>
      </tr>
      <tr>
        <td id="L4330" class="blob-num js-line-number" data-line-number="4330"></td>
        <td id="LC4330" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t want to use &quot;raw&quot; either, because we don&#39;t want to check inside C++11</span></td>
      </tr>
      <tr>
        <td id="L4331" class="blob-num js-line-number" data-line-number="4331"></td>
        <td id="LC4331" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># raw strings,</span></td>
      </tr>
      <tr>
        <td id="L4332" class="blob-num js-line-number" data-line-number="4332"></td>
        <td id="LC4332" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>raw_lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines_without_raw_strings</span></td>
      </tr>
      <tr>
        <td id="L4333" class="blob-num js-line-number" data-line-number="4333"></td>
        <td id="LC4333" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw_lines</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4334" class="blob-num js-line-number" data-line-number="4334"></td>
        <td id="LC4334" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>prev</span> <span class=pl-c1>=</span> <span class=pl-s1>raw_lines</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span> <span class=pl-k>else</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L4335" class="blob-num js-line-number" data-line-number="4335"></td>
        <td id="LC4335" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4336" class="blob-num js-line-number" data-line-number="4336"></td>
        <td id="LC4336" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;<span class=pl-cce>\t</span>&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L4337" class="blob-num js-line-number" data-line-number="4337"></td>
        <td id="LC4337" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/tab&#39;</span>, <span class=pl-c1>1</span>,</td>
      </tr>
      <tr>
        <td id="L4338" class="blob-num js-line-number" data-line-number="4338"></td>
        <td id="LC4338" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Tab found; better to use spaces&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4339" class="blob-num js-line-number" data-line-number="4339"></td>
        <td id="LC4339" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4340" class="blob-num js-line-number" data-line-number="4340"></td>
        <td id="LC4340" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># One or three blank spaces at the beginning of the line is weird; it&#39;s</span></td>
      </tr>
      <tr>
        <td id="L4341" class="blob-num js-line-number" data-line-number="4341"></td>
        <td id="LC4341" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># hard to reconcile that with 2-space indents.</span></td>
      </tr>
      <tr>
        <td id="L4342" class="blob-num js-line-number" data-line-number="4342"></td>
        <td id="LC4342" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># NOTE: here are the conditions rob pike used for his tests.  Mine aren&#39;t</span></td>
      </tr>
      <tr>
        <td id="L4343" class="blob-num js-line-number" data-line-number="4343"></td>
        <td id="LC4343" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># as sophisticated, but it may be worth becoming so:  RLENGTH==initial_spaces</span></td>
      </tr>
      <tr>
        <td id="L4344" class="blob-num js-line-number" data-line-number="4344"></td>
        <td id="LC4344" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(RLENGTH &gt; 20) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4345" class="blob-num js-line-number" data-line-number="4345"></td>
        <td id="LC4345" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match($0, &quot; +(error|private|public|protected):&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4346" class="blob-num js-line-number" data-line-number="4346"></td>
        <td id="LC4346" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match(prev, &quot;&amp;&amp; *$&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4347" class="blob-num js-line-number" data-line-number="4347"></td>
        <td id="LC4347" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match(prev, &quot;\\|\\| *$&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4348" class="blob-num js-line-number" data-line-number="4348"></td>
        <td id="LC4348" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match(prev, &quot;[\&quot;,=&gt;&lt;] *$&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4349" class="blob-num js-line-number" data-line-number="4349"></td>
        <td id="LC4349" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match($0, &quot; &lt;&lt;&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4350" class="blob-num js-line-number" data-line-number="4350"></td>
        <td id="LC4350" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(match(prev, &quot; +for \\(&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4351" class="blob-num js-line-number" data-line-number="4351"></td>
        <td id="LC4351" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if(prevodd &amp;&amp; match(prevprev, &quot; +for \\(&quot;)) complain = 0;</span></td>
      </tr>
      <tr>
        <td id="L4352" class="blob-num js-line-number" data-line-number="4352"></td>
        <td id="LC4352" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>scope_or_label_pattern</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;\s*\w+\s*:\s*\\?$&#39;</span></td>
      </tr>
      <tr>
        <td id="L4353" class="blob-num js-line-number" data-line-number="4353"></td>
        <td id="LC4353" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>classinfo</span> <span class=pl-c1>=</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InnermostClass</span>()</td>
      </tr>
      <tr>
        <td id="L4354" class="blob-num js-line-number" data-line-number="4354"></td>
        <td id="LC4354" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>initial_spaces</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L4355" class="blob-num js-line-number" data-line-number="4355"></td>
        <td id="LC4355" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>cleansed_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4356" class="blob-num js-line-number" data-line-number="4356"></td>
        <td id="LC4356" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>initial_spaces</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>line</span>) <span class=pl-c1>and</span> <span class=pl-s1>line</span>[<span class=pl-s1>initial_spaces</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39; &#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4357" class="blob-num js-line-number" data-line-number="4357"></td>
        <td id="LC4357" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>initial_spaces</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4358" class="blob-num js-line-number" data-line-number="4358"></td>
        <td id="LC4358" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># There are certain situations we allow one space, notably for</span></td>
      </tr>
      <tr>
        <td id="L4359" class="blob-num js-line-number" data-line-number="4359"></td>
        <td id="LC4359" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># section labels, and also lines containing multi-line raw strings.</span></td>
      </tr>
      <tr>
        <td id="L4360" class="blob-num js-line-number" data-line-number="4360"></td>
        <td id="LC4360" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We also don&#39;t check for lines that look like continuation lines</span></td>
      </tr>
      <tr>
        <td id="L4361" class="blob-num js-line-number" data-line-number="4361"></td>
        <td id="LC4361" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># (of lines ending in double quotes, commas, equals, or angle brackets)</span></td>
      </tr>
      <tr>
        <td id="L4362" class="blob-num js-line-number" data-line-number="4362"></td>
        <td id="LC4362" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># because the rules for how to indent those are non-trivial.</span></td>
      </tr>
      <tr>
        <td id="L4363" class="blob-num js-line-number" data-line-number="4363"></td>
        <td id="LC4363" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[&quot;,=&gt;&lt;] *$&#39;</span>, <span class=pl-s1>prev</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4364" class="blob-num js-line-number" data-line-number="4364"></td>
        <td id="LC4364" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>initial_spaces</span> <span class=pl-c1>==</span> <span class=pl-c1>1</span> <span class=pl-c1>or</span> <span class=pl-s1>initial_spaces</span> <span class=pl-c1>==</span> <span class=pl-c1>3</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4365" class="blob-num js-line-number" data-line-number="4365"></td>
        <td id="LC4365" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s1>scope_or_label_pattern</span>, <span class=pl-s1>cleansed_line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4366" class="blob-num js-line-number" data-line-number="4366"></td>
        <td id="LC4366" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> (<span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span>[<span class=pl-s1>linenum</span>] <span class=pl-c1>!=</span> <span class=pl-s1>line</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4367" class="blob-num js-line-number" data-line-number="4367"></td>
        <td id="LC4367" class="blob-code blob-code-inner js-file-line">           <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*&quot;&quot;&#39;</span>, <span class=pl-s1>line</span>))):</td>
      </tr>
      <tr>
        <td id="L4368" class="blob-num js-line-number" data-line-number="4368"></td>
        <td id="LC4368" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/indent&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L4369" class="blob-num js-line-number" data-line-number="4369"></td>
        <td id="LC4369" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Weird number of spaces at line-start.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L4370" class="blob-num js-line-number" data-line-number="4370"></td>
        <td id="LC4370" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Are you using a 2-space indent?&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4371" class="blob-num js-line-number" data-line-number="4371"></td>
        <td id="LC4371" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4372" class="blob-num js-line-number" data-line-number="4372"></td>
        <td id="LC4372" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>line</span> <span class=pl-c1>and</span> <span class=pl-s1>line</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-en>isspace</span>():</td>
      </tr>
      <tr>
        <td id="L4373" class="blob-num js-line-number" data-line-number="4373"></td>
        <td id="LC4373" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/end_of_line&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4374" class="blob-num js-line-number" data-line-number="4374"></td>
        <td id="LC4374" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Line ends in whitespace.  Consider deleting these extra spaces.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4375" class="blob-num js-line-number" data-line-number="4375"></td>
        <td id="LC4375" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4376" class="blob-num js-line-number" data-line-number="4376"></td>
        <td id="LC4376" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check if the line is a header guard.</span></td>
      </tr>
      <tr>
        <td id="L4377" class="blob-num js-line-number" data-line-number="4377"></td>
        <td id="LC4377" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>is_header_guard</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4378" class="blob-num js-line-number" data-line-number="4378"></td>
        <td id="LC4378" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsHeaderExtension</span>(<span class=pl-s1>file_extension</span>):</td>
      </tr>
      <tr>
        <td id="L4379" class="blob-num js-line-number" data-line-number="4379"></td>
        <td id="LC4379" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>cppvar</span> <span class=pl-c1>=</span> <span class=pl-v>GetHeaderGuardCPPVariable</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L4380" class="blob-num js-line-number" data-line-number="4380"></td>
        <td id="LC4380" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>line</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;#ifndef %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4381" class="blob-num js-line-number" data-line-number="4381"></td>
        <td id="LC4381" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;#define %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4382" class="blob-num js-line-number" data-line-number="4382"></td>
        <td id="LC4382" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;#endif  // %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cppvar</span>)):</td>
      </tr>
      <tr>
        <td id="L4383" class="blob-num js-line-number" data-line-number="4383"></td>
        <td id="LC4383" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>is_header_guard</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L4384" class="blob-num js-line-number" data-line-number="4384"></td>
        <td id="LC4384" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># #include lines and header guards can be long, since there&#39;s no clean way to</span></td>
      </tr>
      <tr>
        <td id="L4385" class="blob-num js-line-number" data-line-number="4385"></td>
        <td id="LC4385" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># split them.</span></td>
      </tr>
      <tr>
        <td id="L4386" class="blob-num js-line-number" data-line-number="4386"></td>
        <td id="LC4386" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4387" class="blob-num js-line-number" data-line-number="4387"></td>
        <td id="LC4387" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># URLs can be long too.  It&#39;s possible to split these, but it makes them</span></td>
      </tr>
      <tr>
        <td id="L4388" class="blob-num js-line-number" data-line-number="4388"></td>
        <td id="LC4388" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># harder to cut&amp;paste.</span></td>
      </tr>
      <tr>
        <td id="L4389" class="blob-num js-line-number" data-line-number="4389"></td>
        <td id="LC4389" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4390" class="blob-num js-line-number" data-line-number="4390"></td>
        <td id="LC4390" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The &quot;$Id:...$&quot; comment may also get very long without it being the</span></td>
      </tr>
      <tr>
        <td id="L4391" class="blob-num js-line-number" data-line-number="4391"></td>
        <td id="LC4391" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># developers fault.</span></td>
      </tr>
      <tr>
        <td id="L4392" class="blob-num js-line-number" data-line-number="4392"></td>
        <td id="LC4392" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-s1>line</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;#include&#39;</span>) <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-s1>is_header_guard</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4393" class="blob-num js-line-number" data-line-number="4393"></td>
        <td id="LC4393" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*//.*http(s?)://\S*$&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4394" class="blob-num js-line-number" data-line-number="4394"></td>
        <td id="LC4394" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*//\s*[^\s]*$&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4395" class="blob-num js-line-number" data-line-number="4395"></td>
        <td id="LC4395" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^// \$Id:.*#[0-9]+ \$$&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L4396" class="blob-num js-line-number" data-line-number="4396"></td>
        <td id="LC4396" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line_width</span> <span class=pl-c1>=</span> <span class=pl-v>GetLineWidth</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4397" class="blob-num js-line-number" data-line-number="4397"></td>
        <td id="LC4397" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>line_width</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>_line_length</span>:</td>
      </tr>
      <tr>
        <td id="L4398" class="blob-num js-line-number" data-line-number="4398"></td>
        <td id="LC4398" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/line_length&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L4399" class="blob-num js-line-number" data-line-number="4399"></td>
        <td id="LC4399" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Lines should be &lt;= %i characters long&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>_line_length</span>)</td>
      </tr>
      <tr>
        <td id="L4400" class="blob-num js-line-number" data-line-number="4400"></td>
        <td id="LC4400" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4401" class="blob-num js-line-number" data-line-number="4401"></td>
        <td id="LC4401" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>cleansed_line</span>.<span class=pl-en>count</span>(<span class=pl-s>&#39;;&#39;</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4402" class="blob-num js-line-number" data-line-number="4402"></td>
        <td id="LC4402" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># for loops are allowed two ;&#39;s (and may run over two lines).</span></td>
      </tr>
      <tr>
        <td id="L4403" class="blob-num js-line-number" data-line-number="4403"></td>
        <td id="LC4403" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>cleansed_line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;for&#39;</span>) <span class=pl-c1>==</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4404" class="blob-num js-line-number" data-line-number="4404"></td>
        <td id="LC4404" class="blob-code blob-code-inner js-file-line">      (<span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)[<span class=pl-c1>0</span>].<span class=pl-en>find</span>(<span class=pl-s>&#39;for&#39;</span>) <span class=pl-c1>==</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4405" class="blob-num js-line-number" data-line-number="4405"></td>
        <td id="LC4405" class="blob-code blob-code-inner js-file-line">       <span class=pl-v>GetPreviousNonBlankLine</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)[<span class=pl-c1>0</span>].<span class=pl-en>find</span>(<span class=pl-s>&#39;;&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4406" class="blob-num js-line-number" data-line-number="4406"></td>
        <td id="LC4406" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># It&#39;s ok to have many commands in a switch case that fits in 1 line</span></td>
      </tr>
      <tr>
        <td id="L4407" class="blob-num js-line-number" data-line-number="4407"></td>
        <td id="LC4407" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> ((<span class=pl-s1>cleansed_line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;case &#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4408" class="blob-num js-line-number" data-line-number="4408"></td>
        <td id="LC4408" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>cleansed_line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;default:&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4409" class="blob-num js-line-number" data-line-number="4409"></td>
        <td id="LC4409" class="blob-code blob-code-inner js-file-line">           <span class=pl-s1>cleansed_line</span>.<span class=pl-en>find</span>(<span class=pl-s>&#39;break;&#39;</span>) <span class=pl-c1>!=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>)):</td>
      </tr>
      <tr>
        <td id="L4410" class="blob-num js-line-number" data-line-number="4410"></td>
        <td id="LC4410" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/newline&#39;</span>, <span class=pl-c1>0</span>,</td>
      </tr>
      <tr>
        <td id="L4411" class="blob-num js-line-number" data-line-number="4411"></td>
        <td id="LC4411" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;More than one command on the same line&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4412" class="blob-num js-line-number" data-line-number="4412"></td>
        <td id="LC4412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4413" class="blob-num js-line-number" data-line-number="4413"></td>
        <td id="LC4413" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Some more style checks</span></td>
      </tr>
      <tr>
        <td id="L4414" class="blob-num js-line-number" data-line-number="4414"></td>
        <td id="LC4414" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckBraces</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4415" class="blob-num js-line-number" data-line-number="4415"></td>
        <td id="LC4415" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckTrailingSemicolon</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4416" class="blob-num js-line-number" data-line-number="4416"></td>
        <td id="LC4416" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckEmptyBlockBody</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4417" class="blob-num js-line-number" data-line-number="4417"></td>
        <td id="LC4417" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4418" class="blob-num js-line-number" data-line-number="4418"></td>
        <td id="LC4418" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckOperatorSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4419" class="blob-num js-line-number" data-line-number="4419"></td>
        <td id="LC4419" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckParenthesisSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4420" class="blob-num js-line-number" data-line-number="4420"></td>
        <td id="LC4420" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckCommaSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4421" class="blob-num js-line-number" data-line-number="4421"></td>
        <td id="LC4421" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckBracesSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4422" class="blob-num js-line-number" data-line-number="4422"></td>
        <td id="LC4422" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckSpacingForFunctionCall</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4423" class="blob-num js-line-number" data-line-number="4423"></td>
        <td id="LC4423" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckCheck</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4424" class="blob-num js-line-number" data-line-number="4424"></td>
        <td id="LC4424" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckAltTokens</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4425" class="blob-num js-line-number" data-line-number="4425"></td>
        <td id="LC4425" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>classinfo</span> <span class=pl-c1>=</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InnermostClass</span>()</td>
      </tr>
      <tr>
        <td id="L4426" class="blob-num js-line-number" data-line-number="4426"></td>
        <td id="LC4426" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>classinfo</span>:</td>
      </tr>
      <tr>
        <td id="L4427" class="blob-num js-line-number" data-line-number="4427"></td>
        <td id="LC4427" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckSectionSpacing</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>classinfo</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4428" class="blob-num js-line-number" data-line-number="4428"></td>
        <td id="LC4428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4429" class="blob-num js-line-number" data-line-number="4429"></td>
        <td id="LC4429" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4430" class="blob-num js-line-number" data-line-number="4430"></td>
        <td id="LC4430" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_INCLUDE</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;^\s*#\s*include\s*([&lt;&quot;])([^&gt;&quot;]*)[&gt;&quot;].*$&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4431" class="blob-num js-line-number" data-line-number="4431"></td>
        <td id="LC4431" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Matches the first component of a filename delimited by -s and _s. That is:</span></td>
      </tr>
      <tr>
        <td id="L4432" class="blob-num js-line-number" data-line-number="4432"></td>
        <td id="LC4432" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  _RE_FIRST_COMPONENT.match(&#39;foo&#39;).group(0) == &#39;foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4433" class="blob-num js-line-number" data-line-number="4433"></td>
        <td id="LC4433" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  _RE_FIRST_COMPONENT.match(&#39;foo.cc&#39;).group(0) == &#39;foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4434" class="blob-num js-line-number" data-line-number="4434"></td>
        <td id="LC4434" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  _RE_FIRST_COMPONENT.match(&#39;foo-bar_baz.cc&#39;).group(0) == &#39;foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4435" class="blob-num js-line-number" data-line-number="4435"></td>
        <td id="LC4435" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#  _RE_FIRST_COMPONENT.match(&#39;foo_bar-baz.cc&#39;).group(0) == &#39;foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4436" class="blob-num js-line-number" data-line-number="4436"></td>
        <td id="LC4436" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_FIRST_COMPONENT</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;^[^-_.]+&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4437" class="blob-num js-line-number" data-line-number="4437"></td>
        <td id="LC4437" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4438" class="blob-num js-line-number" data-line-number="4438"></td>
        <td id="LC4438" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4439" class="blob-num js-line-number" data-line-number="4439"></td>
        <td id="LC4439" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_DropCommonSuffixes</span>(<span class=pl-s1>filename</span>):</td>
      </tr>
      <tr>
        <td id="L4440" class="blob-num js-line-number" data-line-number="4440"></td>
        <td id="LC4440" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Drops common suffixes like _test.cc or -inl.h from filename.</span></td>
      </tr>
      <tr>
        <td id="L4441" class="blob-num js-line-number" data-line-number="4441"></td>
        <td id="LC4441" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4442" class="blob-num js-line-number" data-line-number="4442"></td>
        <td id="LC4442" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  For example:</span></td>
      </tr>
      <tr>
        <td id="L4443" class="blob-num js-line-number" data-line-number="4443"></td>
        <td id="LC4443" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo-inl.h&#39;)</span></td>
      </tr>
      <tr>
        <td id="L4444" class="blob-num js-line-number" data-line-number="4444"></td>
        <td id="LC4444" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &#39;foo/foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4445" class="blob-num js-line-number" data-line-number="4445"></td>
        <td id="LC4445" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/bar/foo.cc&#39;)</span></td>
      </tr>
      <tr>
        <td id="L4446" class="blob-num js-line-number" data-line-number="4446"></td>
        <td id="LC4446" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &#39;foo/bar/foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4447" class="blob-num js-line-number" data-line-number="4447"></td>
        <td id="LC4447" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo_internal.h&#39;)</span></td>
      </tr>
      <tr>
        <td id="L4448" class="blob-num js-line-number" data-line-number="4448"></td>
        <td id="LC4448" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &#39;foo/foo&#39;</span></td>
      </tr>
      <tr>
        <td id="L4449" class="blob-num js-line-number" data-line-number="4449"></td>
        <td id="LC4449" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _DropCommonSuffixes(&#39;foo/foo_unusualinternal.h&#39;)</span></td>
      </tr>
      <tr>
        <td id="L4450" class="blob-num js-line-number" data-line-number="4450"></td>
        <td id="LC4450" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &#39;foo/foo_unusualinternal&#39;</span></td>
      </tr>
      <tr>
        <td id="L4451" class="blob-num js-line-number" data-line-number="4451"></td>
        <td id="LC4451" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4452" class="blob-num js-line-number" data-line-number="4452"></td>
        <td id="LC4452" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4453" class="blob-num js-line-number" data-line-number="4453"></td>
        <td id="LC4453" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The input filename.</span></td>
      </tr>
      <tr>
        <td id="L4454" class="blob-num js-line-number" data-line-number="4454"></td>
        <td id="LC4454" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4455" class="blob-num js-line-number" data-line-number="4455"></td>
        <td id="LC4455" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4456" class="blob-num js-line-number" data-line-number="4456"></td>
        <td id="LC4456" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The filename with the common suffix removed.</span></td>
      </tr>
      <tr>
        <td id="L4457" class="blob-num js-line-number" data-line-number="4457"></td>
        <td id="LC4457" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4458" class="blob-num js-line-number" data-line-number="4458"></td>
        <td id="LC4458" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>suffix</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;test.cc&#39;</span>, <span class=pl-s>&#39;regtest.cc&#39;</span>, <span class=pl-s>&#39;unittest.cc&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L4459" class="blob-num js-line-number" data-line-number="4459"></td>
        <td id="LC4459" class="blob-code blob-code-inner js-file-line">                 <span class=pl-s>&#39;inl.h&#39;</span>, <span class=pl-s>&#39;impl.h&#39;</span>, <span class=pl-s>&#39;internal.h&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4460" class="blob-num js-line-number" data-line-number="4460"></td>
        <td id="LC4460" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>filename</span>.<span class=pl-en>endswith</span>(<span class=pl-s1>suffix</span>) <span class=pl-c1>and</span> <span class=pl-en>len</span>(<span class=pl-s1>filename</span>) <span class=pl-c1>&gt;</span> <span class=pl-en>len</span>(<span class=pl-s1>suffix</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4461" class="blob-num js-line-number" data-line-number="4461"></td>
        <td id="LC4461" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>filename</span>[<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s1>suffix</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>in</span> (<span class=pl-s>&#39;-&#39;</span>, <span class=pl-s>&#39;_&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L4462" class="blob-num js-line-number" data-line-number="4462"></td>
        <td id="LC4462" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>filename</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s1>suffix</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L4463" class="blob-num js-line-number" data-line-number="4463"></td>
        <td id="LC4463" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>splitext</span>(<span class=pl-s1>filename</span>)[<span class=pl-c1>0</span>]</td>
      </tr>
      <tr>
        <td id="L4464" class="blob-num js-line-number" data-line-number="4464"></td>
        <td id="LC4464" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4465" class="blob-num js-line-number" data-line-number="4465"></td>
        <td id="LC4465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4466" class="blob-num js-line-number" data-line-number="4466"></td>
        <td id="LC4466" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_ClassifyInclude</span>(<span class=pl-s1>fileinfo</span>, <span class=pl-s1>include</span>, <span class=pl-s1>is_system</span>):</td>
      </tr>
      <tr>
        <td id="L4467" class="blob-num js-line-number" data-line-number="4467"></td>
        <td id="LC4467" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Figures out what kind of header &#39;include&#39; is.</span></td>
      </tr>
      <tr>
        <td id="L4468" class="blob-num js-line-number" data-line-number="4468"></td>
        <td id="LC4468" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4469" class="blob-num js-line-number" data-line-number="4469"></td>
        <td id="LC4469" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4470" class="blob-num js-line-number" data-line-number="4470"></td>
        <td id="LC4470" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    fileinfo: The current file cpplint is running over. A FileInfo instance.</span></td>
      </tr>
      <tr>
        <td id="L4471" class="blob-num js-line-number" data-line-number="4471"></td>
        <td id="LC4471" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include: The path to a #included file.</span></td>
      </tr>
      <tr>
        <td id="L4472" class="blob-num js-line-number" data-line-number="4472"></td>
        <td id="LC4472" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    is_system: True if the #include used &lt;&gt; rather than &quot;&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4473" class="blob-num js-line-number" data-line-number="4473"></td>
        <td id="LC4473" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4474" class="blob-num js-line-number" data-line-number="4474"></td>
        <td id="LC4474" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4475" class="blob-num js-line-number" data-line-number="4475"></td>
        <td id="LC4475" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    One of the _XXX_HEADER constants.</span></td>
      </tr>
      <tr>
        <td id="L4476" class="blob-num js-line-number" data-line-number="4476"></td>
        <td id="LC4476" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4477" class="blob-num js-line-number" data-line-number="4477"></td>
        <td id="LC4477" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  For example:</span></td>
      </tr>
      <tr>
        <td id="L4478" class="blob-num js-line-number" data-line-number="4478"></td>
        <td id="LC4478" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;stdio.h&#39;, True)</span></td>
      </tr>
      <tr>
        <td id="L4479" class="blob-num js-line-number" data-line-number="4479"></td>
        <td id="LC4479" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    _C_SYS_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4480" class="blob-num js-line-number" data-line-number="4480"></td>
        <td id="LC4480" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;string&#39;, True)</span></td>
      </tr>
      <tr>
        <td id="L4481" class="blob-num js-line-number" data-line-number="4481"></td>
        <td id="LC4481" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    _CPP_SYS_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4482" class="blob-num js-line-number" data-line-number="4482"></td>
        <td id="LC4482" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;foo/foo.h&#39;, False)</span></td>
      </tr>
      <tr>
        <td id="L4483" class="blob-num js-line-number" data-line-number="4483"></td>
        <td id="LC4483" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    _LIKELY_MY_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4484" class="blob-num js-line-number" data-line-number="4484"></td>
        <td id="LC4484" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo_unknown_extension.cc&#39;),</span></td>
      </tr>
      <tr>
        <td id="L4485" class="blob-num js-line-number" data-line-number="4485"></td>
        <td id="LC4485" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    ...                  &#39;bar/foo_other_ext.h&#39;, False)</span></td>
      </tr>
      <tr>
        <td id="L4486" class="blob-num js-line-number" data-line-number="4486"></td>
        <td id="LC4486" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    _POSSIBLE_MY_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4487" class="blob-num js-line-number" data-line-number="4487"></td>
        <td id="LC4487" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;&gt;&gt; _ClassifyInclude(FileInfo(&#39;foo/foo.cc&#39;), &#39;foo/bar.h&#39;, False)</span></td>
      </tr>
      <tr>
        <td id="L4488" class="blob-num js-line-number" data-line-number="4488"></td>
        <td id="LC4488" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    _OTHER_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4489" class="blob-num js-line-number" data-line-number="4489"></td>
        <td id="LC4489" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4490" class="blob-num js-line-number" data-line-number="4490"></td>
        <td id="LC4490" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This is a list of all standard c++ header files, except</span></td>
      </tr>
      <tr>
        <td id="L4491" class="blob-num js-line-number" data-line-number="4491"></td>
        <td id="LC4491" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># those already checked for above.</span></td>
      </tr>
      <tr>
        <td id="L4492" class="blob-num js-line-number" data-line-number="4492"></td>
        <td id="LC4492" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>is_cpp_h</span> <span class=pl-c1>=</span> <span class=pl-s1>include</span> <span class=pl-c1>in</span> <span class=pl-s1>_CPP_HEADERS</span></td>
      </tr>
      <tr>
        <td id="L4493" class="blob-num js-line-number" data-line-number="4493"></td>
        <td id="LC4493" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4494" class="blob-num js-line-number" data-line-number="4494"></td>
        <td id="LC4494" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>is_system</span>:</td>
      </tr>
      <tr>
        <td id="L4495" class="blob-num js-line-number" data-line-number="4495"></td>
        <td id="LC4495" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>is_cpp_h</span>:</td>
      </tr>
      <tr>
        <td id="L4496" class="blob-num js-line-number" data-line-number="4496"></td>
        <td id="LC4496" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>_CPP_SYS_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4497" class="blob-num js-line-number" data-line-number="4497"></td>
        <td id="LC4497" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4498" class="blob-num js-line-number" data-line-number="4498"></td>
        <td id="LC4498" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-s1>_C_SYS_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4499" class="blob-num js-line-number" data-line-number="4499"></td>
        <td id="LC4499" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4500" class="blob-num js-line-number" data-line-number="4500"></td>
        <td id="LC4500" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If the target file and the include we&#39;re checking share a</span></td>
      </tr>
      <tr>
        <td id="L4501" class="blob-num js-line-number" data-line-number="4501"></td>
        <td id="LC4501" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># basename when we drop common extensions, and the include</span></td>
      </tr>
      <tr>
        <td id="L4502" class="blob-num js-line-number" data-line-number="4502"></td>
        <td id="LC4502" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># lives in . , then it&#39;s likely to be owned by the target file.</span></td>
      </tr>
      <tr>
        <td id="L4503" class="blob-num js-line-number" data-line-number="4503"></td>
        <td id="LC4503" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>target_dir</span>, <span class=pl-s1>target_base</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L4504" class="blob-num js-line-number" data-line-number="4504"></td>
        <td id="LC4504" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>split</span>(<span class=pl-en>_DropCommonSuffixes</span>(<span class=pl-s1>fileinfo</span>.<span class=pl-v>RepositoryName</span>())))</td>
      </tr>
      <tr>
        <td id="L4505" class="blob-num js-line-number" data-line-number="4505"></td>
        <td id="LC4505" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include_dir</span>, <span class=pl-s1>include_base</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>split</span>(<span class=pl-en>_DropCommonSuffixes</span>(<span class=pl-s1>include</span>))</td>
      </tr>
      <tr>
        <td id="L4506" class="blob-num js-line-number" data-line-number="4506"></td>
        <td id="LC4506" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>target_base</span> <span class=pl-c1>==</span> <span class=pl-s1>include_base</span> <span class=pl-c1>and</span> (</td>
      </tr>
      <tr>
        <td id="L4507" class="blob-num js-line-number" data-line-number="4507"></td>
        <td id="LC4507" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_dir</span> <span class=pl-c1>==</span> <span class=pl-s1>target_dir</span> <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4508" class="blob-num js-line-number" data-line-number="4508"></td>
        <td id="LC4508" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_dir</span> <span class=pl-c1>==</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>normpath</span>(<span class=pl-s1>target_dir</span> <span class=pl-c1>+</span> <span class=pl-s>&#39;/../public&#39;</span>)):</td>
      </tr>
      <tr>
        <td id="L4509" class="blob-num js-line-number" data-line-number="4509"></td>
        <td id="LC4509" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>_LIKELY_MY_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4510" class="blob-num js-line-number" data-line-number="4510"></td>
        <td id="LC4510" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4511" class="blob-num js-line-number" data-line-number="4511"></td>
        <td id="LC4511" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If the target and include share some initial basename</span></td>
      </tr>
      <tr>
        <td id="L4512" class="blob-num js-line-number" data-line-number="4512"></td>
        <td id="LC4512" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># component, it&#39;s possible the target is implementing the</span></td>
      </tr>
      <tr>
        <td id="L4513" class="blob-num js-line-number" data-line-number="4513"></td>
        <td id="LC4513" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># include, so it&#39;s allowed to be first, but we&#39;ll never</span></td>
      </tr>
      <tr>
        <td id="L4514" class="blob-num js-line-number" data-line-number="4514"></td>
        <td id="LC4514" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># complain if it&#39;s not there.</span></td>
      </tr>
      <tr>
        <td id="L4515" class="blob-num js-line-number" data-line-number="4515"></td>
        <td id="LC4515" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>target_first_component</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_FIRST_COMPONENT</span>.<span class=pl-en>match</span>(<span class=pl-s1>target_base</span>)</td>
      </tr>
      <tr>
        <td id="L4516" class="blob-num js-line-number" data-line-number="4516"></td>
        <td id="LC4516" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include_first_component</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_FIRST_COMPONENT</span>.<span class=pl-en>match</span>(<span class=pl-s1>include_base</span>)</td>
      </tr>
      <tr>
        <td id="L4517" class="blob-num js-line-number" data-line-number="4517"></td>
        <td id="LC4517" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>target_first_component</span> <span class=pl-c1>and</span> <span class=pl-s1>include_first_component</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4518" class="blob-num js-line-number" data-line-number="4518"></td>
        <td id="LC4518" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>target_first_component</span>.<span class=pl-en>group</span>(<span class=pl-c1>0</span>) <span class=pl-c1>==</span></td>
      </tr>
      <tr>
        <td id="L4519" class="blob-num js-line-number" data-line-number="4519"></td>
        <td id="LC4519" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_first_component</span>.<span class=pl-en>group</span>(<span class=pl-c1>0</span>)):</td>
      </tr>
      <tr>
        <td id="L4520" class="blob-num js-line-number" data-line-number="4520"></td>
        <td id="LC4520" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-s1>_POSSIBLE_MY_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4521" class="blob-num js-line-number" data-line-number="4521"></td>
        <td id="LC4521" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4522" class="blob-num js-line-number" data-line-number="4522"></td>
        <td id="LC4522" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>_OTHER_HEADER</span></td>
      </tr>
      <tr>
        <td id="L4523" class="blob-num js-line-number" data-line-number="4523"></td>
        <td id="LC4523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4524" class="blob-num js-line-number" data-line-number="4524"></td>
        <td id="LC4524" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4525" class="blob-num js-line-number" data-line-number="4525"></td>
        <td id="LC4525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4526" class="blob-num js-line-number" data-line-number="4526"></td>
        <td id="LC4526" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckIncludeLine</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4527" class="blob-num js-line-number" data-line-number="4527"></td>
        <td id="LC4527" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check rules that are applicable to #include lines.</span></td>
      </tr>
      <tr>
        <td id="L4528" class="blob-num js-line-number" data-line-number="4528"></td>
        <td id="LC4528" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4529" class="blob-num js-line-number" data-line-number="4529"></td>
        <td id="LC4529" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Strings on #include lines are NOT removed from elided line, to make</span></td>
      </tr>
      <tr>
        <td id="L4530" class="blob-num js-line-number" data-line-number="4530"></td>
        <td id="LC4530" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  certain tasks easier. However, to prevent false positives, checks</span></td>
      </tr>
      <tr>
        <td id="L4531" class="blob-num js-line-number" data-line-number="4531"></td>
        <td id="LC4531" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  applicable to #include lines in CheckLanguage must be put here.</span></td>
      </tr>
      <tr>
        <td id="L4532" class="blob-num js-line-number" data-line-number="4532"></td>
        <td id="LC4532" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4533" class="blob-num js-line-number" data-line-number="4533"></td>
        <td id="LC4533" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4534" class="blob-num js-line-number" data-line-number="4534"></td>
        <td id="LC4534" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4535" class="blob-num js-line-number" data-line-number="4535"></td>
        <td id="LC4535" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4536" class="blob-num js-line-number" data-line-number="4536"></td>
        <td id="LC4536" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4537" class="blob-num js-line-number" data-line-number="4537"></td>
        <td id="LC4537" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include_state: An _IncludeState instance in which the headers are inserted.</span></td>
      </tr>
      <tr>
        <td id="L4538" class="blob-num js-line-number" data-line-number="4538"></td>
        <td id="LC4538" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4539" class="blob-num js-line-number" data-line-number="4539"></td>
        <td id="LC4539" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4540" class="blob-num js-line-number" data-line-number="4540"></td>
        <td id="LC4540" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fileinfo</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L4541" class="blob-num js-line-number" data-line-number="4541"></td>
        <td id="LC4541" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4542" class="blob-num js-line-number" data-line-number="4542"></td>
        <td id="LC4542" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4543" class="blob-num js-line-number" data-line-number="4543"></td>
        <td id="LC4543" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># &quot;include&quot; should use the new style &quot;foo/bar.h&quot; instead of just &quot;bar.h&quot;</span></td>
      </tr>
      <tr>
        <td id="L4544" class="blob-num js-line-number" data-line-number="4544"></td>
        <td id="LC4544" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Only do this check if the included header follows google naming</span></td>
      </tr>
      <tr>
        <td id="L4545" class="blob-num js-line-number" data-line-number="4545"></td>
        <td id="LC4545" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># conventions.  If not, assume that it&#39;s a 3rd party API that</span></td>
      </tr>
      <tr>
        <td id="L4546" class="blob-num js-line-number" data-line-number="4546"></td>
        <td id="LC4546" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># requires special include conventions.</span></td>
      </tr>
      <tr>
        <td id="L4547" class="blob-num js-line-number" data-line-number="4547"></td>
        <td id="LC4547" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4548" class="blob-num js-line-number" data-line-number="4548"></td>
        <td id="LC4548" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We also make an exception for Lua headers, which follow google</span></td>
      </tr>
      <tr>
        <td id="L4549" class="blob-num js-line-number" data-line-number="4549"></td>
        <td id="LC4549" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># naming convention but not the include convention.</span></td>
      </tr>
      <tr>
        <td id="L4550" class="blob-num js-line-number" data-line-number="4550"></td>
        <td id="LC4550" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;#include\s*&quot;([^/]+\.h)&quot;&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4551" class="blob-num js-line-number" data-line-number="4551"></td>
        <td id="LC4551" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-s1>_THIRD_PARTY_HEADERS_PATTERN</span>.<span class=pl-en>match</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)):</td>
      </tr>
      <tr>
        <td id="L4552" class="blob-num js-line-number" data-line-number="4552"></td>
        <td id="LC4552" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/include&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4553" class="blob-num js-line-number" data-line-number="4553"></td>
        <td id="LC4553" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Include the directory when naming .h files&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4554" class="blob-num js-line-number" data-line-number="4554"></td>
        <td id="LC4554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4555" class="blob-num js-line-number" data-line-number="4555"></td>
        <td id="LC4555" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># we shouldn&#39;t include a file more than once. actually, there are a</span></td>
      </tr>
      <tr>
        <td id="L4556" class="blob-num js-line-number" data-line-number="4556"></td>
        <td id="LC4556" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># handful of instances where doing so is okay, but in general it&#39;s</span></td>
      </tr>
      <tr>
        <td id="L4557" class="blob-num js-line-number" data-line-number="4557"></td>
        <td id="LC4557" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># not.</span></td>
      </tr>
      <tr>
        <td id="L4558" class="blob-num js-line-number" data-line-number="4558"></td>
        <td id="LC4558" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_INCLUDE</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4559" class="blob-num js-line-number" data-line-number="4559"></td>
        <td id="LC4559" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4560" class="blob-num js-line-number" data-line-number="4560"></td>
        <td id="LC4560" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>include</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L4561" class="blob-num js-line-number" data-line-number="4561"></td>
        <td id="LC4561" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>is_system</span> <span class=pl-c1>=</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>==</span> <span class=pl-s>&#39;&lt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4562" class="blob-num js-line-number" data-line-number="4562"></td>
        <td id="LC4562" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>duplicate_line</span> <span class=pl-c1>=</span> <span class=pl-s1>include_state</span>.<span class=pl-v>FindHeader</span>(<span class=pl-s1>include</span>)</td>
      </tr>
      <tr>
        <td id="L4563" class="blob-num js-line-number" data-line-number="4563"></td>
        <td id="LC4563" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>duplicate_line</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L4564" class="blob-num js-line-number" data-line-number="4564"></td>
        <td id="LC4564" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/include&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4565" class="blob-num js-line-number" data-line-number="4565"></td>
        <td id="LC4565" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;&quot;%s&quot; already included at %s:%s&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L4566" class="blob-num js-line-number" data-line-number="4566"></td>
        <td id="LC4566" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s1>include</span>, <span class=pl-s1>filename</span>, <span class=pl-s1>duplicate_line</span>))</td>
      </tr>
      <tr>
        <td id="L4567" class="blob-num js-line-number" data-line-number="4567"></td>
        <td id="LC4567" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> (<span class=pl-s1>include</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;.cc&#39;</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4568" class="blob-num js-line-number" data-line-number="4568"></td>
        <td id="LC4568" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>fileinfo</span>.<span class=pl-v>RepositoryName</span>()) <span class=pl-c1>!=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>include</span>)):</td>
      </tr>
      <tr>
        <td id="L4569" class="blob-num js-line-number" data-line-number="4569"></td>
        <td id="LC4569" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/include&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4570" class="blob-num js-line-number" data-line-number="4570"></td>
        <td id="LC4570" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Do not include .cc files from other packages&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4571" class="blob-num js-line-number" data-line-number="4571"></td>
        <td id="LC4571" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-c1>not</span> <span class=pl-s1>_THIRD_PARTY_HEADERS_PATTERN</span>.<span class=pl-en>match</span>(<span class=pl-s1>include</span>):</td>
      </tr>
      <tr>
        <td id="L4572" class="blob-num js-line-number" data-line-number="4572"></td>
        <td id="LC4572" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_state</span>.<span class=pl-s1>include_list</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-en>append</span>((<span class=pl-s1>include</span>, <span class=pl-s1>linenum</span>))</td>
      </tr>
      <tr>
        <td id="L4573" class="blob-num js-line-number" data-line-number="4573"></td>
        <td id="LC4573" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4574" class="blob-num js-line-number" data-line-number="4574"></td>
        <td id="LC4574" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># We want to ensure that headers appear in the right order:</span></td>
      </tr>
      <tr>
        <td id="L4575" class="blob-num js-line-number" data-line-number="4575"></td>
        <td id="LC4575" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 1) for foo.cc, foo.h  (preferred location)</span></td>
      </tr>
      <tr>
        <td id="L4576" class="blob-num js-line-number" data-line-number="4576"></td>
        <td id="LC4576" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 2) c system files</span></td>
      </tr>
      <tr>
        <td id="L4577" class="blob-num js-line-number" data-line-number="4577"></td>
        <td id="LC4577" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 3) cpp system files</span></td>
      </tr>
      <tr>
        <td id="L4578" class="blob-num js-line-number" data-line-number="4578"></td>
        <td id="LC4578" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 4) for foo.cc, foo.h  (deprecated location)</span></td>
      </tr>
      <tr>
        <td id="L4579" class="blob-num js-line-number" data-line-number="4579"></td>
        <td id="LC4579" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># 5) other google headers</span></td>
      </tr>
      <tr>
        <td id="L4580" class="blob-num js-line-number" data-line-number="4580"></td>
        <td id="LC4580" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4581" class="blob-num js-line-number" data-line-number="4581"></td>
        <td id="LC4581" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># We classify each include statement as one of those 5 types</span></td>
      </tr>
      <tr>
        <td id="L4582" class="blob-num js-line-number" data-line-number="4582"></td>
        <td id="LC4582" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># using a number of techniques. The include_state object keeps</span></td>
      </tr>
      <tr>
        <td id="L4583" class="blob-num js-line-number" data-line-number="4583"></td>
        <td id="LC4583" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># track of the highest type seen, and complains if we see a</span></td>
      </tr>
      <tr>
        <td id="L4584" class="blob-num js-line-number" data-line-number="4584"></td>
        <td id="LC4584" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># lower type after that.</span></td>
      </tr>
      <tr>
        <td id="L4585" class="blob-num js-line-number" data-line-number="4585"></td>
        <td id="LC4585" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>error_message</span> <span class=pl-c1>=</span> <span class=pl-s1>include_state</span>.<span class=pl-v>CheckNextIncludeOrder</span>(</td>
      </tr>
      <tr>
        <td id="L4586" class="blob-num js-line-number" data-line-number="4586"></td>
        <td id="LC4586" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>_ClassifyInclude</span>(<span class=pl-s1>fileinfo</span>, <span class=pl-s1>include</span>, <span class=pl-s1>is_system</span>))</td>
      </tr>
      <tr>
        <td id="L4587" class="blob-num js-line-number" data-line-number="4587"></td>
        <td id="LC4587" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>error_message</span>:</td>
      </tr>
      <tr>
        <td id="L4588" class="blob-num js-line-number" data-line-number="4588"></td>
        <td id="LC4588" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/include_order&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4589" class="blob-num js-line-number" data-line-number="4589"></td>
        <td id="LC4589" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;%s. Should be: %s.h, c system, c++ system, other.&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L4590" class="blob-num js-line-number" data-line-number="4590"></td>
        <td id="LC4590" class="blob-code blob-code-inner js-file-line">              (<span class=pl-s1>error_message</span>, <span class=pl-s1>fileinfo</span>.<span class=pl-v>BaseName</span>()))</td>
      </tr>
      <tr>
        <td id="L4591" class="blob-num js-line-number" data-line-number="4591"></td>
        <td id="LC4591" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>canonical_include</span> <span class=pl-c1>=</span> <span class=pl-s1>include_state</span>.<span class=pl-v>CanonicalizeAlphabeticalOrder</span>(<span class=pl-s1>include</span>)</td>
      </tr>
      <tr>
        <td id="L4592" class="blob-num js-line-number" data-line-number="4592"></td>
        <td id="LC4592" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>include_state</span>.<span class=pl-v>IsInAlphabeticalOrder</span>(</td>
      </tr>
      <tr>
        <td id="L4593" class="blob-num js-line-number" data-line-number="4593"></td>
        <td id="LC4593" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>canonical_include</span>):</td>
      </tr>
      <tr>
        <td id="L4594" class="blob-num js-line-number" data-line-number="4594"></td>
        <td id="LC4594" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/include_alpha&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4595" class="blob-num js-line-number" data-line-number="4595"></td>
        <td id="LC4595" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Include &quot;%s&quot; not in alphabetical order&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>include</span>)</td>
      </tr>
      <tr>
        <td id="L4596" class="blob-num js-line-number" data-line-number="4596"></td>
        <td id="LC4596" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_state</span>.<span class=pl-v>SetLastHeader</span>(<span class=pl-s1>canonical_include</span>)</td>
      </tr>
      <tr>
        <td id="L4597" class="blob-num js-line-number" data-line-number="4597"></td>
        <td id="LC4597" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4598" class="blob-num js-line-number" data-line-number="4598"></td>
        <td id="LC4598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4599" class="blob-num js-line-number" data-line-number="4599"></td>
        <td id="LC4599" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4600" class="blob-num js-line-number" data-line-number="4600"></td>
        <td id="LC4600" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>_GetTextInside</span>(<span class=pl-s1>text</span>, <span class=pl-s1>start_pattern</span>):</td>
      </tr>
      <tr>
        <td id="L4601" class="blob-num js-line-number" data-line-number="4601"></td>
        <td id="LC4601" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>r&quot;&quot;&quot;Retrieves all the text between matching open and close parentheses.</span></td>
      </tr>
      <tr>
        <td id="L4602" class="blob-num js-line-number" data-line-number="4602"></td>
        <td id="LC4602" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4603" class="blob-num js-line-number" data-line-number="4603"></td>
        <td id="LC4603" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Given a string of lines and a regular expression string, retrieve all the text</span></td>
      </tr>
      <tr>
        <td id="L4604" class="blob-num js-line-number" data-line-number="4604"></td>
        <td id="LC4604" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  following the expression and between opening punctuation symbols like</span></td>
      </tr>
      <tr>
        <td id="L4605" class="blob-num js-line-number" data-line-number="4605"></td>
        <td id="LC4605" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  (, [, or {, and the matching close-punctuation symbol. This properly nested</span></td>
      </tr>
      <tr>
        <td id="L4606" class="blob-num js-line-number" data-line-number="4606"></td>
        <td id="LC4606" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  occurrences of the punctuations, so for the text like</span></td>
      </tr>
      <tr>
        <td id="L4607" class="blob-num js-line-number" data-line-number="4607"></td>
        <td id="LC4607" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    printf(a(), b(c()));</span></td>
      </tr>
      <tr>
        <td id="L4608" class="blob-num js-line-number" data-line-number="4608"></td>
        <td id="LC4608" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  a call to _GetTextInside(text, r&#39;printf\(&#39;) will return &#39;a(), b(c())&#39;.</span></td>
      </tr>
      <tr>
        <td id="L4609" class="blob-num js-line-number" data-line-number="4609"></td>
        <td id="LC4609" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  start_pattern must match string having an open punctuation symbol at the end.</span></td>
      </tr>
      <tr>
        <td id="L4610" class="blob-num js-line-number" data-line-number="4610"></td>
        <td id="LC4610" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4611" class="blob-num js-line-number" data-line-number="4611"></td>
        <td id="LC4611" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4612" class="blob-num js-line-number" data-line-number="4612"></td>
        <td id="LC4612" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    text: The lines to extract text. Its comments and strings must be elided.</span></td>
      </tr>
      <tr>
        <td id="L4613" class="blob-num js-line-number" data-line-number="4613"></td>
        <td id="LC4613" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           It can be single line and can span multiple lines.</span></td>
      </tr>
      <tr>
        <td id="L4614" class="blob-num js-line-number" data-line-number="4614"></td>
        <td id="LC4614" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    start_pattern: The regexp string indicating where to start extracting</span></td>
      </tr>
      <tr>
        <td id="L4615" class="blob-num js-line-number" data-line-number="4615"></td>
        <td id="LC4615" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the text.</span></td>
      </tr>
      <tr>
        <td id="L4616" class="blob-num js-line-number" data-line-number="4616"></td>
        <td id="LC4616" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4617" class="blob-num js-line-number" data-line-number="4617"></td>
        <td id="LC4617" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The extracted text.</span></td>
      </tr>
      <tr>
        <td id="L4618" class="blob-num js-line-number" data-line-number="4618"></td>
        <td id="LC4618" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    None if either the opening string or ending punctuation could not be found.</span></td>
      </tr>
      <tr>
        <td id="L4619" class="blob-num js-line-number" data-line-number="4619"></td>
        <td id="LC4619" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4620" class="blob-num js-line-number" data-line-number="4620"></td>
        <td id="LC4620" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Audit cpplint.py to see what places could be profitably</span></td>
      </tr>
      <tr>
        <td id="L4621" class="blob-num js-line-number" data-line-number="4621"></td>
        <td id="LC4621" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># rewritten to use _GetTextInside (and use inferior regexp matching today).</span></td>
      </tr>
      <tr>
        <td id="L4622" class="blob-num js-line-number" data-line-number="4622"></td>
        <td id="LC4622" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4623" class="blob-num js-line-number" data-line-number="4623"></td>
        <td id="LC4623" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Give opening punctuations to get the matching close-punctuations.</span></td>
      </tr>
      <tr>
        <td id="L4624" class="blob-num js-line-number" data-line-number="4624"></td>
        <td id="LC4624" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>matching_punctuation</span> <span class=pl-c1>=</span> {<span class=pl-s>&#39;(&#39;</span>: <span class=pl-s>&#39;)&#39;</span>, <span class=pl-s>&#39;{&#39;</span>: <span class=pl-s>&#39;}&#39;</span>, <span class=pl-s>&#39;[&#39;</span>: <span class=pl-s>&#39;]&#39;</span>}</td>
      </tr>
      <tr>
        <td id="L4625" class="blob-num js-line-number" data-line-number="4625"></td>
        <td id="LC4625" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>closing_punctuation</span> <span class=pl-c1>=</span> <span class=pl-en>set</span>(<span class=pl-s1>matching_punctuation</span>.<span class=pl-en>itervalues</span>())</td>
      </tr>
      <tr>
        <td id="L4626" class="blob-num js-line-number" data-line-number="4626"></td>
        <td id="LC4626" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4627" class="blob-num js-line-number" data-line-number="4627"></td>
        <td id="LC4627" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Find the position to start extracting text.</span></td>
      </tr>
      <tr>
        <td id="L4628" class="blob-num js-line-number" data-line-number="4628"></td>
        <td id="LC4628" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>search</span>(<span class=pl-s1>start_pattern</span>, <span class=pl-s1>text</span>, <span class=pl-s1>re</span>.<span class=pl-v>M</span>)</td>
      </tr>
      <tr>
        <td id="L4629" class="blob-num js-line-number" data-line-number="4629"></td>
        <td id="LC4629" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>match</span>:  <span class=pl-c># start_pattern not found in text.</span></td>
      </tr>
      <tr>
        <td id="L4630" class="blob-num js-line-number" data-line-number="4630"></td>
        <td id="LC4630" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L4631" class="blob-num js-line-number" data-line-number="4631"></td>
        <td id="LC4631" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>start_position</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>end</span>(<span class=pl-c1>0</span>)</td>
      </tr>
      <tr>
        <td id="L4632" class="blob-num js-line-number" data-line-number="4632"></td>
        <td id="LC4632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4633" class="blob-num js-line-number" data-line-number="4633"></td>
        <td id="LC4633" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>assert</span> <span class=pl-s1>start_position</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>, (</td>
      </tr>
      <tr>
        <td id="L4634" class="blob-num js-line-number" data-line-number="4634"></td>
        <td id="LC4634" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>&#39;start_pattern must ends with an opening punctuation.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4635" class="blob-num js-line-number" data-line-number="4635"></td>
        <td id="LC4635" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>assert</span> <span class=pl-s1>text</span>[<span class=pl-s1>start_position</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>] <span class=pl-c1>in</span> <span class=pl-s1>matching_punctuation</span>, (</td>
      </tr>
      <tr>
        <td id="L4636" class="blob-num js-line-number" data-line-number="4636"></td>
        <td id="LC4636" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>&#39;start_pattern must ends with an opening punctuation.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4637" class="blob-num js-line-number" data-line-number="4637"></td>
        <td id="LC4637" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Stack of closing punctuations we expect to have in text after position.</span></td>
      </tr>
      <tr>
        <td id="L4638" class="blob-num js-line-number" data-line-number="4638"></td>
        <td id="LC4638" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>punctuation_stack</span> <span class=pl-c1>=</span> [<span class=pl-s1>matching_punctuation</span>[<span class=pl-s1>text</span>[<span class=pl-s1>start_position</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]]]</td>
      </tr>
      <tr>
        <td id="L4639" class="blob-num js-line-number" data-line-number="4639"></td>
        <td id="LC4639" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>position</span> <span class=pl-c1>=</span> <span class=pl-s1>start_position</span></td>
      </tr>
      <tr>
        <td id="L4640" class="blob-num js-line-number" data-line-number="4640"></td>
        <td id="LC4640" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>punctuation_stack</span> <span class=pl-c1>and</span> <span class=pl-s1>position</span> <span class=pl-c1>&lt;</span> <span class=pl-en>len</span>(<span class=pl-s1>text</span>):</td>
      </tr>
      <tr>
        <td id="L4641" class="blob-num js-line-number" data-line-number="4641"></td>
        <td id="LC4641" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>text</span>[<span class=pl-s1>position</span>] <span class=pl-c1>==</span> <span class=pl-s1>punctuation_stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>]:</td>
      </tr>
      <tr>
        <td id="L4642" class="blob-num js-line-number" data-line-number="4642"></td>
        <td id="LC4642" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>punctuation_stack</span>.<span class=pl-en>pop</span>()</td>
      </tr>
      <tr>
        <td id="L4643" class="blob-num js-line-number" data-line-number="4643"></td>
        <td id="LC4643" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>text</span>[<span class=pl-s1>position</span>] <span class=pl-c1>in</span> <span class=pl-s1>closing_punctuation</span>:</td>
      </tr>
      <tr>
        <td id="L4644" class="blob-num js-line-number" data-line-number="4644"></td>
        <td id="LC4644" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># A closing punctuation without matching opening punctuations.</span></td>
      </tr>
      <tr>
        <td id="L4645" class="blob-num js-line-number" data-line-number="4645"></td>
        <td id="LC4645" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L4646" class="blob-num js-line-number" data-line-number="4646"></td>
        <td id="LC4646" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>text</span>[<span class=pl-s1>position</span>] <span class=pl-c1>in</span> <span class=pl-s1>matching_punctuation</span>:</td>
      </tr>
      <tr>
        <td id="L4647" class="blob-num js-line-number" data-line-number="4647"></td>
        <td id="LC4647" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>punctuation_stack</span>.<span class=pl-en>append</span>(<span class=pl-s1>matching_punctuation</span>[<span class=pl-s1>text</span>[<span class=pl-s1>position</span>]])</td>
      </tr>
      <tr>
        <td id="L4648" class="blob-num js-line-number" data-line-number="4648"></td>
        <td id="LC4648" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>position</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L4649" class="blob-num js-line-number" data-line-number="4649"></td>
        <td id="LC4649" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>punctuation_stack</span>:</td>
      </tr>
      <tr>
        <td id="L4650" class="blob-num js-line-number" data-line-number="4650"></td>
        <td id="LC4650" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Opening punctuations left without matching close-punctuations.</span></td>
      </tr>
      <tr>
        <td id="L4651" class="blob-num js-line-number" data-line-number="4651"></td>
        <td id="LC4651" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L4652" class="blob-num js-line-number" data-line-number="4652"></td>
        <td id="LC4652" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># punctuations match.</span></td>
      </tr>
      <tr>
        <td id="L4653" class="blob-num js-line-number" data-line-number="4653"></td>
        <td id="LC4653" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>text</span>[<span class=pl-s1>start_position</span>:<span class=pl-s1>position</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L4654" class="blob-num js-line-number" data-line-number="4654"></td>
        <td id="LC4654" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4655" class="blob-num js-line-number" data-line-number="4655"></td>
        <td id="LC4655" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4656" class="blob-num js-line-number" data-line-number="4656"></td>
        <td id="LC4656" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Patterns for matching call-by-reference parameters.</span></td>
      </tr>
      <tr>
        <td id="L4657" class="blob-num js-line-number" data-line-number="4657"></td>
        <td id="LC4657" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4658" class="blob-num js-line-number" data-line-number="4658"></td>
        <td id="LC4658" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Supports nested templates up to 2 levels deep using this messy pattern:</span></td>
      </tr>
      <tr>
        <td id="L4659" class="blob-num js-line-number" data-line-number="4659"></td>
        <td id="LC4659" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#   &lt; (?: &lt; (?: &lt; [^&lt;&gt;]*</span></td>
      </tr>
      <tr>
        <td id="L4660" class="blob-num js-line-number" data-line-number="4660"></td>
        <td id="LC4660" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#               &gt;</span></td>
      </tr>
      <tr>
        <td id="L4661" class="blob-num js-line-number" data-line-number="4661"></td>
        <td id="LC4661" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#           |   [^&lt;&gt;] )*</span></td>
      </tr>
      <tr>
        <td id="L4662" class="blob-num js-line-number" data-line-number="4662"></td>
        <td id="LC4662" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#         &gt;</span></td>
      </tr>
      <tr>
        <td id="L4663" class="blob-num js-line-number" data-line-number="4663"></td>
        <td id="LC4663" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#     |   [^&lt;&gt;] )*</span></td>
      </tr>
      <tr>
        <td id="L4664" class="blob-num js-line-number" data-line-number="4664"></td>
        <td id="LC4664" class="blob-code blob-code-inner js-file-line"><span class=pl-c>#   &gt;</span></td>
      </tr>
      <tr>
        <td id="L4665" class="blob-num js-line-number" data-line-number="4665"></td>
        <td id="LC4665" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_IDENT</span> <span class=pl-c1>=</span> <span class=pl-s>r&#39;[_a-zA-Z]\w*&#39;</span>  <span class=pl-c># =~ [[:alpha:]][[:alnum:]]*</span></td>
      </tr>
      <tr>
        <td id="L4666" class="blob-num js-line-number" data-line-number="4666"></td>
        <td id="LC4666" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_TYPE</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L4667" class="blob-num js-line-number" data-line-number="4667"></td>
        <td id="LC4667" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(?:const\s+)?(?:typename\s+|class\s+|struct\s+|union\s+|enum\s+)?&#39;</span></td>
      </tr>
      <tr>
        <td id="L4668" class="blob-num js-line-number" data-line-number="4668"></td>
        <td id="LC4668" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(?:\w|&#39;</span></td>
      </tr>
      <tr>
        <td id="L4669" class="blob-num js-line-number" data-line-number="4669"></td>
        <td id="LC4669" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;\s*&lt;(?:&lt;(?:&lt;[^&lt;&gt;]*&gt;|[^&lt;&gt;])*&gt;|[^&lt;&gt;])*&gt;|&#39;</span></td>
      </tr>
      <tr>
        <td id="L4670" class="blob-num js-line-number" data-line-number="4670"></td>
        <td id="LC4670" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;::)+&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4671" class="blob-num js-line-number" data-line-number="4671"></td>
        <td id="LC4671" class="blob-code blob-code-inner js-file-line"><span class=pl-c># A call-by-reference parameter ends with &#39;&amp; identifier&#39;.</span></td>
      </tr>
      <tr>
        <td id="L4672" class="blob-num js-line-number" data-line-number="4672"></td>
        <td id="LC4672" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_REF_PARAM</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(</td>
      </tr>
      <tr>
        <td id="L4673" class="blob-num js-line-number" data-line-number="4673"></td>
        <td id="LC4673" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_TYPE</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;(?:\s*(?:\bconst\b|[*]))*\s*&#39;</span></td>
      </tr>
      <tr>
        <td id="L4674" class="blob-num js-line-number" data-line-number="4674"></td>
        <td id="LC4674" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;&amp;\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_IDENT</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;)\s*(?:=[^,()]+)?[,)]&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4675" class="blob-num js-line-number" data-line-number="4675"></td>
        <td id="LC4675" class="blob-code blob-code-inner js-file-line"><span class=pl-c># A call-by-const-reference parameter either ends with &#39;const&amp; identifier&#39;</span></td>
      </tr>
      <tr>
        <td id="L4676" class="blob-num js-line-number" data-line-number="4676"></td>
        <td id="LC4676" class="blob-code blob-code-inner js-file-line"><span class=pl-c># or looks like &#39;const type&amp; identifier&#39; when &#39;type&#39; is atomic.</span></td>
      </tr>
      <tr>
        <td id="L4677" class="blob-num js-line-number" data-line-number="4677"></td>
        <td id="LC4677" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_CONST_REF_PARAM</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L4678" class="blob-num js-line-number" data-line-number="4678"></td>
        <td id="LC4678" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(?:.*\s*\bconst\s*&amp;\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_IDENT</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L4679" class="blob-num js-line-number" data-line-number="4679"></td>
        <td id="LC4679" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;|const\s+&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_TYPE</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\s*&amp;\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_IDENT</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4680" class="blob-num js-line-number" data-line-number="4680"></td>
        <td id="LC4680" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Stream types.</span></td>
      </tr>
      <tr>
        <td id="L4681" class="blob-num js-line-number" data-line-number="4681"></td>
        <td id="LC4681" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_REF_STREAM_PARAM</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L4682" class="blob-num js-line-number" data-line-number="4682"></td>
        <td id="LC4682" class="blob-code blob-code-inner js-file-line">    <span class=pl-s>r&#39;(?:.*stream\s*&amp;\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_RE_PATTERN_IDENT</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4683" class="blob-num js-line-number" data-line-number="4683"></td>
        <td id="LC4683" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4684" class="blob-num js-line-number" data-line-number="4684"></td>
        <td id="LC4684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4685" class="blob-num js-line-number" data-line-number="4685"></td>
        <td id="LC4685" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckLanguage</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>file_extension</span>,</td>
      </tr>
      <tr>
        <td id="L4686" class="blob-num js-line-number" data-line-number="4686"></td>
        <td id="LC4686" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s1>include_state</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4687" class="blob-num js-line-number" data-line-number="4687"></td>
        <td id="LC4687" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks rules from the &#39;C++ language rules&#39; section of cppguide.html.</span></td>
      </tr>
      <tr>
        <td id="L4688" class="blob-num js-line-number" data-line-number="4688"></td>
        <td id="LC4688" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4689" class="blob-num js-line-number" data-line-number="4689"></td>
        <td id="LC4689" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Some of these rules are hard to test (function overloading, using</span></td>
      </tr>
      <tr>
        <td id="L4690" class="blob-num js-line-number" data-line-number="4690"></td>
        <td id="LC4690" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  uint32 inappropriately), but we do the best we can.</span></td>
      </tr>
      <tr>
        <td id="L4691" class="blob-num js-line-number" data-line-number="4691"></td>
        <td id="LC4691" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4692" class="blob-num js-line-number" data-line-number="4692"></td>
        <td id="LC4692" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4693" class="blob-num js-line-number" data-line-number="4693"></td>
        <td id="LC4693" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4694" class="blob-num js-line-number" data-line-number="4694"></td>
        <td id="LC4694" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4695" class="blob-num js-line-number" data-line-number="4695"></td>
        <td id="LC4695" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4696" class="blob-num js-line-number" data-line-number="4696"></td>
        <td id="LC4696" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    file_extension: The extension (without the dot) of the filename.</span></td>
      </tr>
      <tr>
        <td id="L4697" class="blob-num js-line-number" data-line-number="4697"></td>
        <td id="LC4697" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include_state: An _IncludeState instance in which the headers are inserted.</span></td>
      </tr>
      <tr>
        <td id="L4698" class="blob-num js-line-number" data-line-number="4698"></td>
        <td id="LC4698" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L4699" class="blob-num js-line-number" data-line-number="4699"></td>
        <td id="LC4699" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L4700" class="blob-num js-line-number" data-line-number="4700"></td>
        <td id="LC4700" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4701" class="blob-num js-line-number" data-line-number="4701"></td>
        <td id="LC4701" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4702" class="blob-num js-line-number" data-line-number="4702"></td>
        <td id="LC4702" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If the line is empty or consists of entirely a comment, no need to</span></td>
      </tr>
      <tr>
        <td id="L4703" class="blob-num js-line-number" data-line-number="4703"></td>
        <td id="LC4703" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># check it.</span></td>
      </tr>
      <tr>
        <td id="L4704" class="blob-num js-line-number" data-line-number="4704"></td>
        <td id="LC4704" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4705" class="blob-num js-line-number" data-line-number="4705"></td>
        <td id="LC4705" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>line</span>:</td>
      </tr>
      <tr>
        <td id="L4706" class="blob-num js-line-number" data-line-number="4706"></td>
        <td id="LC4706" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4707" class="blob-num js-line-number" data-line-number="4707"></td>
        <td id="LC4707" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4708" class="blob-num js-line-number" data-line-number="4708"></td>
        <td id="LC4708" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_INCLUDE</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4709" class="blob-num js-line-number" data-line-number="4709"></td>
        <td id="LC4709" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4710" class="blob-num js-line-number" data-line-number="4710"></td>
        <td id="LC4710" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckIncludeLine</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4711" class="blob-num js-line-number" data-line-number="4711"></td>
        <td id="LC4711" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L4712" class="blob-num js-line-number" data-line-number="4712"></td>
        <td id="LC4712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4713" class="blob-num js-line-number" data-line-number="4713"></td>
        <td id="LC4713" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Reset include state across preprocessor directives.  This is meant</span></td>
      </tr>
      <tr>
        <td id="L4714" class="blob-num js-line-number" data-line-number="4714"></td>
        <td id="LC4714" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># to silence warnings for conditional includes.</span></td>
      </tr>
      <tr>
        <td id="L4715" class="blob-num js-line-number" data-line-number="4715"></td>
        <td id="LC4715" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*#\s*(if|ifdef|ifndef|elif|else|endif)\b&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4716" class="blob-num js-line-number" data-line-number="4716"></td>
        <td id="LC4716" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4717" class="blob-num js-line-number" data-line-number="4717"></td>
        <td id="LC4717" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>include_state</span>.<span class=pl-v>ResetSection</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L4718" class="blob-num js-line-number" data-line-number="4718"></td>
        <td id="LC4718" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4719" class="blob-num js-line-number" data-line-number="4719"></td>
        <td id="LC4719" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Make Windows paths like Unix.</span></td>
      </tr>
      <tr>
        <td id="L4720" class="blob-num js-line-number" data-line-number="4720"></td>
        <td id="LC4720" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fullname</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>abspath</span>(<span class=pl-s1>filename</span>).<span class=pl-en>replace</span>(<span class=pl-s>&#39;<span class=pl-cce>\\</span>&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4721" class="blob-num js-line-number" data-line-number="4721"></td>
        <td id="LC4721" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4722" class="blob-num js-line-number" data-line-number="4722"></td>
        <td id="LC4722" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Perform other checks now that we are sure that this is not an include line</span></td>
      </tr>
      <tr>
        <td id="L4723" class="blob-num js-line-number" data-line-number="4723"></td>
        <td id="LC4723" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckCasts</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4724" class="blob-num js-line-number" data-line-number="4724"></td>
        <td id="LC4724" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckGlobalStatic</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4725" class="blob-num js-line-number" data-line-number="4725"></td>
        <td id="LC4725" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckPrintf</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L4726" class="blob-num js-line-number" data-line-number="4726"></td>
        <td id="LC4726" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4727" class="blob-num js-line-number" data-line-number="4727"></td>
        <td id="LC4727" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsHeaderExtension</span>(<span class=pl-s1>file_extension</span>):</td>
      </tr>
      <tr>
        <td id="L4728" class="blob-num js-line-number" data-line-number="4728"></td>
        <td id="LC4728" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># TODO(unknown): check that 1-arg constructors are explicit.</span></td>
      </tr>
      <tr>
        <td id="L4729" class="blob-num js-line-number" data-line-number="4729"></td>
        <td id="LC4729" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                How to tell it&#39;s a constructor?</span></td>
      </tr>
      <tr>
        <td id="L4730" class="blob-num js-line-number" data-line-number="4730"></td>
        <td id="LC4730" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                (handled in CheckForNonStandardConstructs for now)</span></td>
      </tr>
      <tr>
        <td id="L4731" class="blob-num js-line-number" data-line-number="4731"></td>
        <td id="LC4731" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># TODO(unknown): check that classes declare or disable copy/assign</span></td>
      </tr>
      <tr>
        <td id="L4732" class="blob-num js-line-number" data-line-number="4732"></td>
        <td id="LC4732" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#                (level 1 error)</span></td>
      </tr>
      <tr>
        <td id="L4733" class="blob-num js-line-number" data-line-number="4733"></td>
        <td id="LC4733" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L4734" class="blob-num js-line-number" data-line-number="4734"></td>
        <td id="LC4734" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4735" class="blob-num js-line-number" data-line-number="4735"></td>
        <td id="LC4735" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check if people are using the verboten C basic types.  The only exception</span></td>
      </tr>
      <tr>
        <td id="L4736" class="blob-num js-line-number" data-line-number="4736"></td>
        <td id="LC4736" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># we regularly allow is &quot;unsigned short port&quot; for port.</span></td>
      </tr>
      <tr>
        <td id="L4737" class="blob-num js-line-number" data-line-number="4737"></td>
        <td id="LC4737" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bshort port\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4738" class="blob-num js-line-number" data-line-number="4738"></td>
        <td id="LC4738" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bunsigned short port\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4739" class="blob-num js-line-number" data-line-number="4739"></td>
        <td id="LC4739" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/int&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4740" class="blob-num js-line-number" data-line-number="4740"></td>
        <td id="LC4740" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Use &quot;unsigned short&quot; for ports, not &quot;short&quot;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4741" class="blob-num js-line-number" data-line-number="4741"></td>
        <td id="LC4741" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4742" class="blob-num js-line-number" data-line-number="4742"></td>
        <td id="LC4742" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(short|long(?! +double)|long long)\b&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4743" class="blob-num js-line-number" data-line-number="4743"></td>
        <td id="LC4743" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4744" class="blob-num js-line-number" data-line-number="4744"></td>
        <td id="LC4744" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/int&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4745" class="blob-num js-line-number" data-line-number="4745"></td>
        <td id="LC4745" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Use int16/int64/etc, rather than the C type %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L4746" class="blob-num js-line-number" data-line-number="4746"></td>
        <td id="LC4746" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4747" class="blob-num js-line-number" data-line-number="4747"></td>
        <td id="LC4747" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check if some verboten operator overloading is going on</span></td>
      </tr>
      <tr>
        <td id="L4748" class="blob-num js-line-number" data-line-number="4748"></td>
        <td id="LC4748" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): catch out-of-line unary operator&amp;:</span></td>
      </tr>
      <tr>
        <td id="L4749" class="blob-num js-line-number" data-line-number="4749"></td>
        <td id="LC4749" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   class X {};</span></td>
      </tr>
      <tr>
        <td id="L4750" class="blob-num js-line-number" data-line-number="4750"></td>
        <td id="LC4750" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   int operator&amp;(const X&amp; x) { return 42; }  // unary operator&amp;</span></td>
      </tr>
      <tr>
        <td id="L4751" class="blob-num js-line-number" data-line-number="4751"></td>
        <td id="LC4751" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The trick is it&#39;s hard to tell apart from binary operator&amp;:</span></td>
      </tr>
      <tr>
        <td id="L4752" class="blob-num js-line-number" data-line-number="4752"></td>
        <td id="LC4752" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   class Y { int operator&amp;(const Y&amp; x) { return 23; } }; // binary operator&amp;</span></td>
      </tr>
      <tr>
        <td id="L4753" class="blob-num js-line-number" data-line-number="4753"></td>
        <td id="LC4753" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\s*&amp;\s*\(\s*\)&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4754" class="blob-num js-line-number" data-line-number="4754"></td>
        <td id="LC4754" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/operator&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4755" class="blob-num js-line-number" data-line-number="4755"></td>
        <td id="LC4755" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Unary operator&amp; is dangerous.  Do not use it.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4756" class="blob-num js-line-number" data-line-number="4756"></td>
        <td id="LC4756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4757" class="blob-num js-line-number" data-line-number="4757"></td>
        <td id="LC4757" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for suspicious usage of &quot;if&quot; like</span></td>
      </tr>
      <tr>
        <td id="L4758" class="blob-num js-line-number" data-line-number="4758"></td>
        <td id="LC4758" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># } if (a == b) {</span></td>
      </tr>
      <tr>
        <td id="L4759" class="blob-num js-line-number" data-line-number="4759"></td>
        <td id="LC4759" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\}\s*if\s*\(&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4760" class="blob-num js-line-number" data-line-number="4760"></td>
        <td id="LC4760" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/braces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4761" class="blob-num js-line-number" data-line-number="4761"></td>
        <td id="LC4761" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Did you mean &quot;else if&quot;? If not, start a new line for &quot;if&quot;.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4762" class="blob-num js-line-number" data-line-number="4762"></td>
        <td id="LC4762" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4763" class="blob-num js-line-number" data-line-number="4763"></td>
        <td id="LC4763" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for potential format string bugs like printf(foo).</span></td>
      </tr>
      <tr>
        <td id="L4764" class="blob-num js-line-number" data-line-number="4764"></td>
        <td id="LC4764" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We constrain the pattern not to pick things like DocidForPrintf(foo).</span></td>
      </tr>
      <tr>
        <td id="L4765" class="blob-num js-line-number" data-line-number="4765"></td>
        <td id="LC4765" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Not perfect but it can catch printf(foo.c_str()) and printf(foo-&gt;c_str())</span></td>
      </tr>
      <tr>
        <td id="L4766" class="blob-num js-line-number" data-line-number="4766"></td>
        <td id="LC4766" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Catch the following case. Need to change the calling</span></td>
      </tr>
      <tr>
        <td id="L4767" class="blob-num js-line-number" data-line-number="4767"></td>
        <td id="LC4767" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># convention of the whole function to process multiple line to handle it.</span></td>
      </tr>
      <tr>
        <td id="L4768" class="blob-num js-line-number" data-line-number="4768"></td>
        <td id="LC4768" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   printf(</span></td>
      </tr>
      <tr>
        <td id="L4769" class="blob-num js-line-number" data-line-number="4769"></td>
        <td id="LC4769" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#       boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);</span></td>
      </tr>
      <tr>
        <td id="L4770" class="blob-num js-line-number" data-line-number="4770"></td>
        <td id="LC4770" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>printf_args</span> <span class=pl-c1>=</span> <span class=pl-en>_GetTextInside</span>(<span class=pl-s1>line</span>, <span class=pl-s>r&#39;(?i)\b(string)?printf\s*\(&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4771" class="blob-num js-line-number" data-line-number="4771"></td>
        <td id="LC4771" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>printf_args</span>:</td>
      </tr>
      <tr>
        <td id="L4772" class="blob-num js-line-number" data-line-number="4772"></td>
        <td id="LC4772" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;([\w.\-&gt;()]+)$&#39;</span>, <span class=pl-s1>printf_args</span>)</td>
      </tr>
      <tr>
        <td id="L4773" class="blob-num js-line-number" data-line-number="4773"></td>
        <td id="LC4773" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>!=</span> <span class=pl-s>&#39;__VA_ARGS__&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4774" class="blob-num js-line-number" data-line-number="4774"></td>
        <td id="LC4774" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>function_name</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>search</span>(<span class=pl-s>r&#39;\b((?:string)?printf)\s*\(&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L4775" class="blob-num js-line-number" data-line-number="4775"></td>
        <td id="LC4775" class="blob-code blob-code-inner js-file-line">                                <span class=pl-s1>line</span>, <span class=pl-s1>re</span>.<span class=pl-v>I</span>).<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L4776" class="blob-num js-line-number" data-line-number="4776"></td>
        <td id="LC4776" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4777" class="blob-num js-line-number" data-line-number="4777"></td>
        <td id="LC4777" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Potential format string bug. Do %s(&quot;%%s&quot;, %s) instead.&#39;</span></td>
      </tr>
      <tr>
        <td id="L4778" class="blob-num js-line-number" data-line-number="4778"></td>
        <td id="LC4778" class="blob-code blob-code-inner js-file-line">            <span class=pl-c1>%</span> (<span class=pl-s1>function_name</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L4779" class="blob-num js-line-number" data-line-number="4779"></td>
        <td id="LC4779" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4780" class="blob-num js-line-number" data-line-number="4780"></td>
        <td id="LC4780" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for potential memset bugs like memset(buf, sizeof(buf), 0).</span></td>
      </tr>
      <tr>
        <td id="L4781" class="blob-num js-line-number" data-line-number="4781"></td>
        <td id="LC4781" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;memset\s*\(([^,]*),\s*([^,]*),\s*0\s*\)&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4782" class="blob-num js-line-number" data-line-number="4782"></td>
        <td id="LC4782" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&quot;^&#39;&#39;|-?[0-9]+|0x[0-9A-Fa-f]$&quot;</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)):</td>
      </tr>
      <tr>
        <td id="L4783" class="blob-num js-line-number" data-line-number="4783"></td>
        <td id="LC4783" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/memset&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4784" class="blob-num js-line-number" data-line-number="4784"></td>
        <td id="LC4784" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Did you mean &quot;memset(%s, 0, %s)&quot;?&#39;</span></td>
      </tr>
      <tr>
        <td id="L4785" class="blob-num js-line-number" data-line-number="4785"></td>
        <td id="LC4785" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>%</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>), <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)))</td>
      </tr>
      <tr>
        <td id="L4786" class="blob-num js-line-number" data-line-number="4786"></td>
        <td id="LC4786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4787" class="blob-num js-line-number" data-line-number="4787"></td>
        <td id="LC4787" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\busing namespace\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4788" class="blob-num js-line-number" data-line-number="4788"></td>
        <td id="LC4788" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/namespaces&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L4789" class="blob-num js-line-number" data-line-number="4789"></td>
        <td id="LC4789" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Do not use namespace using-directives.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L4790" class="blob-num js-line-number" data-line-number="4790"></td>
        <td id="LC4790" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Use using-declarations instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4791" class="blob-num js-line-number" data-line-number="4791"></td>
        <td id="LC4791" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4792" class="blob-num js-line-number" data-line-number="4792"></td>
        <td id="LC4792" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Detect variable-length arrays.</span></td>
      </tr>
      <tr>
        <td id="L4793" class="blob-num js-line-number" data-line-number="4793"></td>
        <td id="LC4793" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(.+::)?(\w+) [a-z]\w*\[(.+)];&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4794" class="blob-num js-line-number" data-line-number="4794"></td>
        <td id="LC4794" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>!=</span> <span class=pl-s>&#39;return&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>!=</span> <span class=pl-s>&#39;delete&#39;</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4795" class="blob-num js-line-number" data-line-number="4795"></td>
        <td id="LC4795" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>).<span class=pl-en>find</span>(<span class=pl-s>&#39;]&#39;</span>) <span class=pl-c1>==</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L4796" class="blob-num js-line-number" data-line-number="4796"></td>
        <td id="LC4796" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Split the size using space and arithmetic operators as delimiters.</span></td>
      </tr>
      <tr>
        <td id="L4797" class="blob-num js-line-number" data-line-number="4797"></td>
        <td id="LC4797" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If any of the resulting tokens are not compile time constants then</span></td>
      </tr>
      <tr>
        <td id="L4798" class="blob-num js-line-number" data-line-number="4798"></td>
        <td id="LC4798" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># report the error.</span></td>
      </tr>
      <tr>
        <td id="L4799" class="blob-num js-line-number" data-line-number="4799"></td>
        <td id="LC4799" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>tokens</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>split</span>(<span class=pl-s>r&#39;\s|\+|\-|\*|\/|&lt;&lt;|&gt;&gt;]&#39;</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>))</td>
      </tr>
      <tr>
        <td id="L4800" class="blob-num js-line-number" data-line-number="4800"></td>
        <td id="LC4800" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>is_const</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L4801" class="blob-num js-line-number" data-line-number="4801"></td>
        <td id="LC4801" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>skip_next</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4802" class="blob-num js-line-number" data-line-number="4802"></td>
        <td id="LC4802" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>tok</span> <span class=pl-c1>in</span> <span class=pl-s1>tokens</span>:</td>
      </tr>
      <tr>
        <td id="L4803" class="blob-num js-line-number" data-line-number="4803"></td>
        <td id="LC4803" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>skip_next</span>:</td>
      </tr>
      <tr>
        <td id="L4804" class="blob-num js-line-number" data-line-number="4804"></td>
        <td id="LC4804" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>skip_next</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4805" class="blob-num js-line-number" data-line-number="4805"></td>
        <td id="LC4805" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4806" class="blob-num js-line-number" data-line-number="4806"></td>
        <td id="LC4806" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4807" class="blob-num js-line-number" data-line-number="4807"></td>
        <td id="LC4807" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;sizeof\(.+\)&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4808" class="blob-num js-line-number" data-line-number="4808"></td>
        <td id="LC4808" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;arraysize\(\w+\)&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4809" class="blob-num js-line-number" data-line-number="4809"></td>
        <td id="LC4809" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4810" class="blob-num js-line-number" data-line-number="4810"></td>
        <td id="LC4810" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>tok</span> <span class=pl-c1>=</span> <span class=pl-s1>tok</span>.<span class=pl-en>lstrip</span>(<span class=pl-s>&#39;(&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4811" class="blob-num js-line-number" data-line-number="4811"></td>
        <td id="LC4811" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>tok</span> <span class=pl-c1>=</span> <span class=pl-s1>tok</span>.<span class=pl-en>rstrip</span>(<span class=pl-s>&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4812" class="blob-num js-line-number" data-line-number="4812"></td>
        <td id="LC4812" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>tok</span>: <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4813" class="blob-num js-line-number" data-line-number="4813"></td>
        <td id="LC4813" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\d+&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4814" class="blob-num js-line-number" data-line-number="4814"></td>
        <td id="LC4814" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;0[xX][0-9a-fA-F]+&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4815" class="blob-num js-line-number" data-line-number="4815"></td>
        <td id="LC4815" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;k[A-Z0-9]\w*&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4816" class="blob-num js-line-number" data-line-number="4816"></td>
        <td id="LC4816" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;(.+::)?k[A-Z0-9]\w*&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4817" class="blob-num js-line-number" data-line-number="4817"></td>
        <td id="LC4817" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;(.+::)?[A-Z][A-Z0-9_]*&#39;</span>, <span class=pl-s1>tok</span>): <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4818" class="blob-num js-line-number" data-line-number="4818"></td>
        <td id="LC4818" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># A catch all for tricky sizeof cases, including &#39;sizeof expression&#39;,</span></td>
      </tr>
      <tr>
        <td id="L4819" class="blob-num js-line-number" data-line-number="4819"></td>
        <td id="LC4819" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># &#39;sizeof(*type)&#39;, &#39;sizeof(const type)&#39;, &#39;sizeof(struct StructName)&#39;</span></td>
      </tr>
      <tr>
        <td id="L4820" class="blob-num js-line-number" data-line-number="4820"></td>
        <td id="LC4820" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># requires skipping the next token because we split on &#39; &#39; and &#39;*&#39;.</span></td>
      </tr>
      <tr>
        <td id="L4821" class="blob-num js-line-number" data-line-number="4821"></td>
        <td id="LC4821" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>tok</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;sizeof&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4822" class="blob-num js-line-number" data-line-number="4822"></td>
        <td id="LC4822" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>skip_next</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L4823" class="blob-num js-line-number" data-line-number="4823"></td>
        <td id="LC4823" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L4824" class="blob-num js-line-number" data-line-number="4824"></td>
        <td id="LC4824" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>is_const</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4825" class="blob-num js-line-number" data-line-number="4825"></td>
        <td id="LC4825" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L4826" class="blob-num js-line-number" data-line-number="4826"></td>
        <td id="LC4826" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>is_const</span>:</td>
      </tr>
      <tr>
        <td id="L4827" class="blob-num js-line-number" data-line-number="4827"></td>
        <td id="LC4827" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/arrays&#39;</span>, <span class=pl-c1>1</span>,</td>
      </tr>
      <tr>
        <td id="L4828" class="blob-num js-line-number" data-line-number="4828"></td>
        <td id="LC4828" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Do not use variable-length arrays.  Use an appropriately named &#39;</span></td>
      </tr>
      <tr>
        <td id="L4829" class="blob-num js-line-number" data-line-number="4829"></td>
        <td id="LC4829" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&quot;(&#39;k&#39; followed by CamelCase) compile-time constant for the size.&quot;</span>)</td>
      </tr>
      <tr>
        <td id="L4830" class="blob-num js-line-number" data-line-number="4830"></td>
        <td id="LC4830" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4831" class="blob-num js-line-number" data-line-number="4831"></td>
        <td id="LC4831" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for use of unnamed namespaces in header files.  Registration</span></td>
      </tr>
      <tr>
        <td id="L4832" class="blob-num js-line-number" data-line-number="4832"></td>
        <td id="LC4832" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># macros are typically OK, so we allow use of &quot;namespace {&quot; on lines</span></td>
      </tr>
      <tr>
        <td id="L4833" class="blob-num js-line-number" data-line-number="4833"></td>
        <td id="LC4833" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># that end with backslashes.</span></td>
      </tr>
      <tr>
        <td id="L4834" class="blob-num js-line-number" data-line-number="4834"></td>
        <td id="LC4834" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>IsHeaderExtension</span>(<span class=pl-s1>file_extension</span>)</td>
      </tr>
      <tr>
        <td id="L4835" class="blob-num js-line-number" data-line-number="4835"></td>
        <td id="LC4835" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bnamespace\s*{&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4836" class="blob-num js-line-number" data-line-number="4836"></td>
        <td id="LC4836" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>and</span> <span class=pl-s1>line</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>] <span class=pl-c1>!=</span> <span class=pl-s>&#39;<span class=pl-cce>\\</span>&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L4837" class="blob-num js-line-number" data-line-number="4837"></td>
        <td id="LC4837" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/namespaces&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4838" class="blob-num js-line-number" data-line-number="4838"></td>
        <td id="LC4838" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Do not use unnamed namespaces in header files.  See &#39;</span></td>
      </tr>
      <tr>
        <td id="L4839" class="blob-num js-line-number" data-line-number="4839"></td>
        <td id="LC4839" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Namespaces&#39;</span></td>
      </tr>
      <tr>
        <td id="L4840" class="blob-num js-line-number" data-line-number="4840"></td>
        <td id="LC4840" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39; for more information.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4841" class="blob-num js-line-number" data-line-number="4841"></td>
        <td id="LC4841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4842" class="blob-num js-line-number" data-line-number="4842"></td>
        <td id="LC4842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4843" class="blob-num js-line-number" data-line-number="4843"></td>
        <td id="LC4843" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckGlobalStatic</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4844" class="blob-num js-line-number" data-line-number="4844"></td>
        <td id="LC4844" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check for unsafe global or static objects.</span></td>
      </tr>
      <tr>
        <td id="L4845" class="blob-num js-line-number" data-line-number="4845"></td>
        <td id="LC4845" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4846" class="blob-num js-line-number" data-line-number="4846"></td>
        <td id="LC4846" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4847" class="blob-num js-line-number" data-line-number="4847"></td>
        <td id="LC4847" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4848" class="blob-num js-line-number" data-line-number="4848"></td>
        <td id="LC4848" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4849" class="blob-num js-line-number" data-line-number="4849"></td>
        <td id="LC4849" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4850" class="blob-num js-line-number" data-line-number="4850"></td>
        <td id="LC4850" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4851" class="blob-num js-line-number" data-line-number="4851"></td>
        <td id="LC4851" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4852" class="blob-num js-line-number" data-line-number="4852"></td>
        <td id="LC4852" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4853" class="blob-num js-line-number" data-line-number="4853"></td>
        <td id="LC4853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4854" class="blob-num js-line-number" data-line-number="4854"></td>
        <td id="LC4854" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Match two lines at a time to support multiline declarations</span></td>
      </tr>
      <tr>
        <td id="L4855" class="blob-num js-line-number" data-line-number="4855"></td>
        <td id="LC4855" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>() <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[;({]&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4856" class="blob-num js-line-number" data-line-number="4856"></td>
        <td id="LC4856" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>+=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>].<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L4857" class="blob-num js-line-number" data-line-number="4857"></td>
        <td id="LC4857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4858" class="blob-num js-line-number" data-line-number="4858"></td>
        <td id="LC4858" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for people declaring static/global STL strings at the top level.</span></td>
      </tr>
      <tr>
        <td id="L4859" class="blob-num js-line-number" data-line-number="4859"></td>
        <td id="LC4859" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This is dangerous because the C++ language does not guarantee that</span></td>
      </tr>
      <tr>
        <td id="L4860" class="blob-num js-line-number" data-line-number="4860"></td>
        <td id="LC4860" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># globals with constructors are initialized before the first access, and</span></td>
      </tr>
      <tr>
        <td id="L4861" class="blob-num js-line-number" data-line-number="4861"></td>
        <td id="LC4861" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># also because globals can be destroyed when some threads are still running.</span></td>
      </tr>
      <tr>
        <td id="L4862" class="blob-num js-line-number" data-line-number="4862"></td>
        <td id="LC4862" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Generalize this to also find static unique_ptr instances.</span></td>
      </tr>
      <tr>
        <td id="L4863" class="blob-num js-line-number" data-line-number="4863"></td>
        <td id="LC4863" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): File bugs for clang-tidy to find these.</span></td>
      </tr>
      <tr>
        <td id="L4864" class="blob-num js-line-number" data-line-number="4864"></td>
        <td id="LC4864" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(</td>
      </tr>
      <tr>
        <td id="L4865" class="blob-num js-line-number" data-line-number="4865"></td>
        <td id="LC4865" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;((?:|static +)(?:|const +))(?::*std::)?string( +const)? +&#39;</span></td>
      </tr>
      <tr>
        <td id="L4866" class="blob-num js-line-number" data-line-number="4866"></td>
        <td id="LC4866" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;([a-zA-Z0-9_:]+)\b(.*)&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L4867" class="blob-num js-line-number" data-line-number="4867"></td>
        <td id="LC4867" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4868" class="blob-num js-line-number" data-line-number="4868"></td>
        <td id="LC4868" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4869" class="blob-num js-line-number" data-line-number="4869"></td>
        <td id="LC4869" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Remove false positives:</span></td>
      </tr>
      <tr>
        <td id="L4870" class="blob-num js-line-number" data-line-number="4870"></td>
        <td id="LC4870" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># - String pointers (as opposed to values).</span></td>
      </tr>
      <tr>
        <td id="L4871" class="blob-num js-line-number" data-line-number="4871"></td>
        <td id="LC4871" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string *pointer</span></td>
      </tr>
      <tr>
        <td id="L4872" class="blob-num js-line-number" data-line-number="4872"></td>
        <td id="LC4872" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    const string *pointer</span></td>
      </tr>
      <tr>
        <td id="L4873" class="blob-num js-line-number" data-line-number="4873"></td>
        <td id="LC4873" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string const *pointer</span></td>
      </tr>
      <tr>
        <td id="L4874" class="blob-num js-line-number" data-line-number="4874"></td>
        <td id="LC4874" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string *const pointer</span></td>
      </tr>
      <tr>
        <td id="L4875" class="blob-num js-line-number" data-line-number="4875"></td>
        <td id="LC4875" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4876" class="blob-num js-line-number" data-line-number="4876"></td>
        <td id="LC4876" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># - Functions and template specializations.</span></td>
      </tr>
      <tr>
        <td id="L4877" class="blob-num js-line-number" data-line-number="4877"></td>
        <td id="LC4877" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string Function&lt;Type&gt;(...</span></td>
      </tr>
      <tr>
        <td id="L4878" class="blob-num js-line-number" data-line-number="4878"></td>
        <td id="LC4878" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string Class&lt;Type&gt;::Method(...</span></td>
      </tr>
      <tr>
        <td id="L4879" class="blob-num js-line-number" data-line-number="4879"></td>
        <td id="LC4879" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L4880" class="blob-num js-line-number" data-line-number="4880"></td>
        <td id="LC4880" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># - Operators.  These are matched separately because operator names</span></td>
      </tr>
      <tr>
        <td id="L4881" class="blob-num js-line-number" data-line-number="4881"></td>
        <td id="LC4881" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   cross non-word boundaries, and trying to match both operators</span></td>
      </tr>
      <tr>
        <td id="L4882" class="blob-num js-line-number" data-line-number="4882"></td>
        <td id="LC4882" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   and functions at the same time would decrease accuracy of</span></td>
      </tr>
      <tr>
        <td id="L4883" class="blob-num js-line-number" data-line-number="4883"></td>
        <td id="LC4883" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   matching identifiers.</span></td>
      </tr>
      <tr>
        <td id="L4884" class="blob-num js-line-number" data-line-number="4884"></td>
        <td id="LC4884" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#    string Class::operator*()</span></td>
      </tr>
      <tr>
        <td id="L4885" class="blob-num js-line-number" data-line-number="4885"></td>
        <td id="LC4885" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>match</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4886" class="blob-num js-line-number" data-line-number="4886"></td>
        <td id="LC4886" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bstring\b(\s+const)?\s*[\*\&amp;]\s*(const\s+)?\w&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4887" class="blob-num js-line-number" data-line-number="4887"></td>
        <td id="LC4887" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boperator\W&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4888" class="blob-num js-line-number" data-line-number="4888"></td>
        <td id="LC4888" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(&lt;.*&gt;)?(::[a-zA-Z0-9_]+)*\s*\(([^&quot;]|$)&#39;</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>4</span>))):</td>
      </tr>
      <tr>
        <td id="L4889" class="blob-num js-line-number" data-line-number="4889"></td>
        <td id="LC4889" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bconst\b&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4890" class="blob-num js-line-number" data-line-number="4890"></td>
        <td id="LC4890" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/string&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4891" class="blob-num js-line-number" data-line-number="4891"></td>
        <td id="LC4891" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;For a static/global string constant, use a C style string &#39;</span></td>
      </tr>
      <tr>
        <td id="L4892" class="blob-num js-line-number" data-line-number="4892"></td>
        <td id="LC4892" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;instead: &quot;%schar%s %s[]&quot;.&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L4893" class="blob-num js-line-number" data-line-number="4893"></td>
        <td id="LC4893" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>), <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>or</span> <span class=pl-s>&#39;&#39;</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)))</td>
      </tr>
      <tr>
        <td id="L4894" class="blob-num js-line-number" data-line-number="4894"></td>
        <td id="LC4894" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L4895" class="blob-num js-line-number" data-line-number="4895"></td>
        <td id="LC4895" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/string&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4896" class="blob-num js-line-number" data-line-number="4896"></td>
        <td id="LC4896" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Static/global string variables are not permitted.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4897" class="blob-num js-line-number" data-line-number="4897"></td>
        <td id="LC4897" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4898" class="blob-num js-line-number" data-line-number="4898"></td>
        <td id="LC4898" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b([A-Za-z0-9_]*_)\(\1\)&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L4899" class="blob-num js-line-number" data-line-number="4899"></td>
        <td id="LC4899" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b([A-Za-z0-9_]*_)\(CHECK_NOTNULL\(\1\)\)&#39;</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L4900" class="blob-num js-line-number" data-line-number="4900"></td>
        <td id="LC4900" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/init&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4901" class="blob-num js-line-number" data-line-number="4901"></td>
        <td id="LC4901" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;You seem to be initializing a member variable with itself.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4902" class="blob-num js-line-number" data-line-number="4902"></td>
        <td id="LC4902" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4903" class="blob-num js-line-number" data-line-number="4903"></td>
        <td id="LC4903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4904" class="blob-num js-line-number" data-line-number="4904"></td>
        <td id="LC4904" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckPrintf</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L4905" class="blob-num js-line-number" data-line-number="4905"></td>
        <td id="LC4905" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check for printf related issues.</span></td>
      </tr>
      <tr>
        <td id="L4906" class="blob-num js-line-number" data-line-number="4906"></td>
        <td id="LC4906" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4907" class="blob-num js-line-number" data-line-number="4907"></td>
        <td id="LC4907" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4908" class="blob-num js-line-number" data-line-number="4908"></td>
        <td id="LC4908" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L4909" class="blob-num js-line-number" data-line-number="4909"></td>
        <td id="LC4909" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4910" class="blob-num js-line-number" data-line-number="4910"></td>
        <td id="LC4910" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4911" class="blob-num js-line-number" data-line-number="4911"></td>
        <td id="LC4911" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L4912" class="blob-num js-line-number" data-line-number="4912"></td>
        <td id="LC4912" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4913" class="blob-num js-line-number" data-line-number="4913"></td>
        <td id="LC4913" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L4914" class="blob-num js-line-number" data-line-number="4914"></td>
        <td id="LC4914" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4915" class="blob-num js-line-number" data-line-number="4915"></td>
        <td id="LC4915" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># When snprintf is used, the second argument shouldn&#39;t be a literal.</span></td>
      </tr>
      <tr>
        <td id="L4916" class="blob-num js-line-number" data-line-number="4916"></td>
        <td id="LC4916" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;snprintf\s*\(([^,]*),\s*([0-9]*)\s*,&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4917" class="blob-num js-line-number" data-line-number="4917"></td>
        <td id="LC4917" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>) <span class=pl-c1>!=</span> <span class=pl-s>&#39;0&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L4918" class="blob-num js-line-number" data-line-number="4918"></td>
        <td id="LC4918" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If 2nd arg is zero, snprintf is used to calculate size.</span></td>
      </tr>
      <tr>
        <td id="L4919" class="blob-num js-line-number" data-line-number="4919"></td>
        <td id="LC4919" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf&#39;</span>, <span class=pl-c1>3</span>,</td>
      </tr>
      <tr>
        <td id="L4920" class="blob-num js-line-number" data-line-number="4920"></td>
        <td id="LC4920" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;If you can, use sizeof(%s) instead of %s as the 2nd arg &#39;</span></td>
      </tr>
      <tr>
        <td id="L4921" class="blob-num js-line-number" data-line-number="4921"></td>
        <td id="LC4921" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;to snprintf.&#39;</span> <span class=pl-c1>%</span> (<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>), <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)))</td>
      </tr>
      <tr>
        <td id="L4922" class="blob-num js-line-number" data-line-number="4922"></td>
        <td id="LC4922" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4923" class="blob-num js-line-number" data-line-number="4923"></td>
        <td id="LC4923" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check if some verboten C functions are being used.</span></td>
      </tr>
      <tr>
        <td id="L4924" class="blob-num js-line-number" data-line-number="4924"></td>
        <td id="LC4924" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bsprintf\s*\(&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4925" class="blob-num js-line-number" data-line-number="4925"></td>
        <td id="LC4925" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L4926" class="blob-num js-line-number" data-line-number="4926"></td>
        <td id="LC4926" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Never use sprintf. Use snprintf instead.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L4927" class="blob-num js-line-number" data-line-number="4927"></td>
        <td id="LC4927" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(strcpy|strcat)\s*\(&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4928" class="blob-num js-line-number" data-line-number="4928"></td>
        <td id="LC4928" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4929" class="blob-num js-line-number" data-line-number="4929"></td>
        <td id="LC4929" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/printf&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L4930" class="blob-num js-line-number" data-line-number="4930"></td>
        <td id="LC4930" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Almost always, snprintf is better than %s&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L4931" class="blob-num js-line-number" data-line-number="4931"></td>
        <td id="LC4931" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4932" class="blob-num js-line-number" data-line-number="4932"></td>
        <td id="LC4932" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4933" class="blob-num js-line-number" data-line-number="4933"></td>
        <td id="LC4933" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsDerivedFunction</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L4934" class="blob-num js-line-number" data-line-number="4934"></td>
        <td id="LC4934" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if current line contains an inherited function.</span></td>
      </tr>
      <tr>
        <td id="L4935" class="blob-num js-line-number" data-line-number="4935"></td>
        <td id="LC4935" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4936" class="blob-num js-line-number" data-line-number="4936"></td>
        <td id="LC4936" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4937" class="blob-num js-line-number" data-line-number="4937"></td>
        <td id="LC4937" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4938" class="blob-num js-line-number" data-line-number="4938"></td>
        <td id="LC4938" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4939" class="blob-num js-line-number" data-line-number="4939"></td>
        <td id="LC4939" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4940" class="blob-num js-line-number" data-line-number="4940"></td>
        <td id="LC4940" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if current line contains a function with &quot;override&quot;</span></td>
      </tr>
      <tr>
        <td id="L4941" class="blob-num js-line-number" data-line-number="4941"></td>
        <td id="LC4941" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    virt-specifier.</span></td>
      </tr>
      <tr>
        <td id="L4942" class="blob-num js-line-number" data-line-number="4942"></td>
        <td id="LC4942" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4943" class="blob-num js-line-number" data-line-number="4943"></td>
        <td id="LC4943" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Scan back a few lines for start of current function</span></td>
      </tr>
      <tr>
        <td id="L4944" class="blob-num js-line-number" data-line-number="4944"></td>
        <td id="LC4944" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span>, <span class=pl-en>max</span>(<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>10</span>), <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L4945" class="blob-num js-line-number" data-line-number="4945"></td>
        <td id="LC4945" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^()]*\w+)\(&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>])</td>
      </tr>
      <tr>
        <td id="L4946" class="blob-num js-line-number" data-line-number="4946"></td>
        <td id="LC4946" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L4947" class="blob-num js-line-number" data-line-number="4947"></td>
        <td id="LC4947" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Look for &quot;override&quot; after the matching closing parenthesis</span></td>
      </tr>
      <tr>
        <td id="L4948" class="blob-num js-line-number" data-line-number="4948"></td>
        <td id="LC4948" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span>, <span class=pl-s1>_</span>, <span class=pl-s1>closing_paren</span> <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L4949" class="blob-num js-line-number" data-line-number="4949"></td>
        <td id="LC4949" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>i</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L4950" class="blob-num js-line-number" data-line-number="4950"></td>
        <td id="LC4950" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> (<span class=pl-s1>closing_paren</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L4951" class="blob-num js-line-number" data-line-number="4951"></td>
        <td id="LC4951" class="blob-code blob-code-inner js-file-line">              <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boverride\b&#39;</span>, <span class=pl-s1>line</span>[<span class=pl-s1>closing_paren</span>:]))</td>
      </tr>
      <tr>
        <td id="L4952" class="blob-num js-line-number" data-line-number="4952"></td>
        <td id="LC4952" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4953" class="blob-num js-line-number" data-line-number="4953"></td>
        <td id="LC4953" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4954" class="blob-num js-line-number" data-line-number="4954"></td>
        <td id="LC4954" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4955" class="blob-num js-line-number" data-line-number="4955"></td>
        <td id="LC4955" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsOutOfLineMethodDefinition</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L4956" class="blob-num js-line-number" data-line-number="4956"></td>
        <td id="LC4956" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if current line contains an out-of-line method definition.</span></td>
      </tr>
      <tr>
        <td id="L4957" class="blob-num js-line-number" data-line-number="4957"></td>
        <td id="LC4957" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4958" class="blob-num js-line-number" data-line-number="4958"></td>
        <td id="LC4958" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4959" class="blob-num js-line-number" data-line-number="4959"></td>
        <td id="LC4959" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4960" class="blob-num js-line-number" data-line-number="4960"></td>
        <td id="LC4960" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4961" class="blob-num js-line-number" data-line-number="4961"></td>
        <td id="LC4961" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4962" class="blob-num js-line-number" data-line-number="4962"></td>
        <td id="LC4962" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if current line contains an out-of-line method definition.</span></td>
      </tr>
      <tr>
        <td id="L4963" class="blob-num js-line-number" data-line-number="4963"></td>
        <td id="LC4963" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4964" class="blob-num js-line-number" data-line-number="4964"></td>
        <td id="LC4964" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Scan back a few lines for start of current function</span></td>
      </tr>
      <tr>
        <td id="L4965" class="blob-num js-line-number" data-line-number="4965"></td>
        <td id="LC4965" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span>, <span class=pl-en>max</span>(<span class=pl-c1>-</span><span class=pl-c1>1</span>, <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>10</span>), <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L4966" class="blob-num js-line-number" data-line-number="4966"></td>
        <td id="LC4966" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^()]*\w+)\(&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]):</td>
      </tr>
      <tr>
        <td id="L4967" class="blob-num js-line-number" data-line-number="4967"></td>
        <td id="LC4967" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^[^()]*\w+::\w+\(&#39;</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]) <span class=pl-c1>is</span> <span class=pl-c1>not</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L4968" class="blob-num js-line-number" data-line-number="4968"></td>
        <td id="LC4968" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L4969" class="blob-num js-line-number" data-line-number="4969"></td>
        <td id="LC4969" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4970" class="blob-num js-line-number" data-line-number="4970"></td>
        <td id="LC4970" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4971" class="blob-num js-line-number" data-line-number="4971"></td>
        <td id="LC4971" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsInitializerList</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L4972" class="blob-num js-line-number" data-line-number="4972"></td>
        <td id="LC4972" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if current line is inside constructor initializer list.</span></td>
      </tr>
      <tr>
        <td id="L4973" class="blob-num js-line-number" data-line-number="4973"></td>
        <td id="LC4973" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L4974" class="blob-num js-line-number" data-line-number="4974"></td>
        <td id="LC4974" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L4975" class="blob-num js-line-number" data-line-number="4975"></td>
        <td id="LC4975" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L4976" class="blob-num js-line-number" data-line-number="4976"></td>
        <td id="LC4976" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L4977" class="blob-num js-line-number" data-line-number="4977"></td>
        <td id="LC4977" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L4978" class="blob-num js-line-number" data-line-number="4978"></td>
        <td id="LC4978" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if current line appears to be inside constructor initializer</span></td>
      </tr>
      <tr>
        <td id="L4979" class="blob-num js-line-number" data-line-number="4979"></td>
        <td id="LC4979" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    list, False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L4980" class="blob-num js-line-number" data-line-number="4980"></td>
        <td id="LC4980" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L4981" class="blob-num js-line-number" data-line-number="4981"></td>
        <td id="LC4981" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span>, <span class=pl-c1>1</span>, <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L4982" class="blob-num js-line-number" data-line-number="4982"></td>
        <td id="LC4982" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L4983" class="blob-num js-line-number" data-line-number="4983"></td>
        <td id="LC4983" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>i</span> <span class=pl-c1>==</span> <span class=pl-s1>linenum</span>:</td>
      </tr>
      <tr>
        <td id="L4984" class="blob-num js-line-number" data-line-number="4984"></td>
        <td id="LC4984" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>remove_function_body</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*)\{\s*$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L4985" class="blob-num js-line-number" data-line-number="4985"></td>
        <td id="LC4985" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>remove_function_body</span>:</td>
      </tr>
      <tr>
        <td id="L4986" class="blob-num js-line-number" data-line-number="4986"></td>
        <td id="LC4986" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>remove_function_body</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L4987" class="blob-num js-line-number" data-line-number="4987"></td>
        <td id="LC4987" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4988" class="blob-num js-line-number" data-line-number="4988"></td>
        <td id="LC4988" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\s:\s*\w+[({]&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4989" class="blob-num js-line-number" data-line-number="4989"></td>
        <td id="LC4989" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># A lone colon tend to indicate the start of a constructor</span></td>
      </tr>
      <tr>
        <td id="L4990" class="blob-num js-line-number" data-line-number="4990"></td>
        <td id="LC4990" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># initializer list.  It could also be a ternary operator, which</span></td>
      </tr>
      <tr>
        <td id="L4991" class="blob-num js-line-number" data-line-number="4991"></td>
        <td id="LC4991" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># also tend to appear in constructor initializer lists as</span></td>
      </tr>
      <tr>
        <td id="L4992" class="blob-num js-line-number" data-line-number="4992"></td>
        <td id="LC4992" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># opposed to parameter lists.</span></td>
      </tr>
      <tr>
        <td id="L4993" class="blob-num js-line-number" data-line-number="4993"></td>
        <td id="LC4993" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L4994" class="blob-num js-line-number" data-line-number="4994"></td>
        <td id="LC4994" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\}\s*,\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4995" class="blob-num js-line-number" data-line-number="4995"></td>
        <td id="LC4995" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># A closing brace followed by a comma is probably the end of a</span></td>
      </tr>
      <tr>
        <td id="L4996" class="blob-num js-line-number" data-line-number="4996"></td>
        <td id="LC4996" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># brace-initialized member in constructor initializer list.</span></td>
      </tr>
      <tr>
        <td id="L4997" class="blob-num js-line-number" data-line-number="4997"></td>
        <td id="LC4997" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L4998" class="blob-num js-line-number" data-line-number="4998"></td>
        <td id="LC4998" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[{};]\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L4999" class="blob-num js-line-number" data-line-number="4999"></td>
        <td id="LC4999" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Found one of the following:</span></td>
      </tr>
      <tr>
        <td id="L5000" class="blob-num js-line-number" data-line-number="5000"></td>
        <td id="LC5000" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># - A closing brace or semicolon, probably the end of the previous</span></td>
      </tr>
      <tr>
        <td id="L5001" class="blob-num js-line-number" data-line-number="5001"></td>
        <td id="LC5001" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#   function.</span></td>
      </tr>
      <tr>
        <td id="L5002" class="blob-num js-line-number" data-line-number="5002"></td>
        <td id="LC5002" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># - An opening brace, probably the start of current class or namespace.</span></td>
      </tr>
      <tr>
        <td id="L5003" class="blob-num js-line-number" data-line-number="5003"></td>
        <td id="LC5003" class="blob-code blob-code-inner js-file-line">      <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5004" class="blob-num js-line-number" data-line-number="5004"></td>
        <td id="LC5004" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Current line is probably not inside an initializer list since</span></td>
      </tr>
      <tr>
        <td id="L5005" class="blob-num js-line-number" data-line-number="5005"></td>
        <td id="LC5005" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># we saw one of those things without seeing the starting colon.</span></td>
      </tr>
      <tr>
        <td id="L5006" class="blob-num js-line-number" data-line-number="5006"></td>
        <td id="LC5006" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5007" class="blob-num js-line-number" data-line-number="5007"></td>
        <td id="LC5007" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5008" class="blob-num js-line-number" data-line-number="5008"></td>
        <td id="LC5008" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Got to the beginning of the file without seeing the start of</span></td>
      </tr>
      <tr>
        <td id="L5009" class="blob-num js-line-number" data-line-number="5009"></td>
        <td id="LC5009" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># constructor initializer list.</span></td>
      </tr>
      <tr>
        <td id="L5010" class="blob-num js-line-number" data-line-number="5010"></td>
        <td id="LC5010" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5011" class="blob-num js-line-number" data-line-number="5011"></td>
        <td id="LC5011" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5012" class="blob-num js-line-number" data-line-number="5012"></td>
        <td id="LC5012" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5013" class="blob-num js-line-number" data-line-number="5013"></td>
        <td id="LC5013" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForNonConstReference</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>,</td>
      </tr>
      <tr>
        <td id="L5014" class="blob-num js-line-number" data-line-number="5014"></td>
        <td id="LC5014" class="blob-code blob-code-inner js-file-line">                              <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5015" class="blob-num js-line-number" data-line-number="5015"></td>
        <td id="LC5015" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check for non-const references.</span></td>
      </tr>
      <tr>
        <td id="L5016" class="blob-num js-line-number" data-line-number="5016"></td>
        <td id="LC5016" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5017" class="blob-num js-line-number" data-line-number="5017"></td>
        <td id="LC5017" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Separate from CheckLanguage since it scans backwards from current</span></td>
      </tr>
      <tr>
        <td id="L5018" class="blob-num js-line-number" data-line-number="5018"></td>
        <td id="LC5018" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  line, instead of scanning forward.</span></td>
      </tr>
      <tr>
        <td id="L5019" class="blob-num js-line-number" data-line-number="5019"></td>
        <td id="LC5019" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5020" class="blob-num js-line-number" data-line-number="5020"></td>
        <td id="LC5020" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5021" class="blob-num js-line-number" data-line-number="5021"></td>
        <td id="LC5021" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5022" class="blob-num js-line-number" data-line-number="5022"></td>
        <td id="LC5022" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5023" class="blob-num js-line-number" data-line-number="5023"></td>
        <td id="LC5023" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5024" class="blob-num js-line-number" data-line-number="5024"></td>
        <td id="LC5024" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L5025" class="blob-num js-line-number" data-line-number="5025"></td>
        <td id="LC5025" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L5026" class="blob-num js-line-number" data-line-number="5026"></td>
        <td id="LC5026" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5027" class="blob-num js-line-number" data-line-number="5027"></td>
        <td id="LC5027" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5028" class="blob-num js-line-number" data-line-number="5028"></td>
        <td id="LC5028" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Do nothing if there is no &#39;&amp;&#39; on current line.</span></td>
      </tr>
      <tr>
        <td id="L5029" class="blob-num js-line-number" data-line-number="5029"></td>
        <td id="LC5029" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5030" class="blob-num js-line-number" data-line-number="5030"></td>
        <td id="LC5030" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s>&#39;&amp;&#39;</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>line</span>:</td>
      </tr>
      <tr>
        <td id="L5031" class="blob-num js-line-number" data-line-number="5031"></td>
        <td id="LC5031" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5032" class="blob-num js-line-number" data-line-number="5032"></td>
        <td id="LC5032" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5033" class="blob-num js-line-number" data-line-number="5033"></td>
        <td id="LC5033" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If a function is inherited, current function doesn&#39;t have much of</span></td>
      </tr>
      <tr>
        <td id="L5034" class="blob-num js-line-number" data-line-number="5034"></td>
        <td id="LC5034" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># a choice, so any non-const references should not be blamed on</span></td>
      </tr>
      <tr>
        <td id="L5035" class="blob-num js-line-number" data-line-number="5035"></td>
        <td id="LC5035" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># derived function.</span></td>
      </tr>
      <tr>
        <td id="L5036" class="blob-num js-line-number" data-line-number="5036"></td>
        <td id="LC5036" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsDerivedFunction</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5037" class="blob-num js-line-number" data-line-number="5037"></td>
        <td id="LC5037" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5038" class="blob-num js-line-number" data-line-number="5038"></td>
        <td id="LC5038" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5039" class="blob-num js-line-number" data-line-number="5039"></td>
        <td id="LC5039" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Don&#39;t warn on out-of-line method definitions, as we would warn on the</span></td>
      </tr>
      <tr>
        <td id="L5040" class="blob-num js-line-number" data-line-number="5040"></td>
        <td id="LC5040" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># in-line declaration, if it isn&#39;t marked with &#39;override&#39;.</span></td>
      </tr>
      <tr>
        <td id="L5041" class="blob-num js-line-number" data-line-number="5041"></td>
        <td id="LC5041" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsOutOfLineMethodDefinition</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5042" class="blob-num js-line-number" data-line-number="5042"></td>
        <td id="LC5042" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5043" class="blob-num js-line-number" data-line-number="5043"></td>
        <td id="LC5043" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5044" class="blob-num js-line-number" data-line-number="5044"></td>
        <td id="LC5044" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Long type names may be broken across multiple lines, usually in one</span></td>
      </tr>
      <tr>
        <td id="L5045" class="blob-num js-line-number" data-line-number="5045"></td>
        <td id="LC5045" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># of these forms:</span></td>
      </tr>
      <tr>
        <td id="L5046" class="blob-num js-line-number" data-line-number="5046"></td>
        <td id="LC5046" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   LongType</span></td>
      </tr>
      <tr>
        <td id="L5047" class="blob-num js-line-number" data-line-number="5047"></td>
        <td id="LC5047" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#       ::LongTypeContinued &amp;identifier</span></td>
      </tr>
      <tr>
        <td id="L5048" class="blob-num js-line-number" data-line-number="5048"></td>
        <td id="LC5048" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   LongType::</span></td>
      </tr>
      <tr>
        <td id="L5049" class="blob-num js-line-number" data-line-number="5049"></td>
        <td id="LC5049" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#       LongTypeContinued &amp;identifier</span></td>
      </tr>
      <tr>
        <td id="L5050" class="blob-num js-line-number" data-line-number="5050"></td>
        <td id="LC5050" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   LongType&lt;</span></td>
      </tr>
      <tr>
        <td id="L5051" class="blob-num js-line-number" data-line-number="5051"></td>
        <td id="LC5051" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#       ...&gt;::LongTypeContinued &amp;identifier</span></td>
      </tr>
      <tr>
        <td id="L5052" class="blob-num js-line-number" data-line-number="5052"></td>
        <td id="LC5052" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5053" class="blob-num js-line-number" data-line-number="5053"></td>
        <td id="LC5053" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If we detected a type split across two lines, join the previous</span></td>
      </tr>
      <tr>
        <td id="L5054" class="blob-num js-line-number" data-line-number="5054"></td>
        <td id="LC5054" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># line to current line so that we can match const references</span></td>
      </tr>
      <tr>
        <td id="L5055" class="blob-num js-line-number" data-line-number="5055"></td>
        <td id="LC5055" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># accordingly.</span></td>
      </tr>
      <tr>
        <td id="L5056" class="blob-num js-line-number" data-line-number="5056"></td>
        <td id="LC5056" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5057" class="blob-num js-line-number" data-line-number="5057"></td>
        <td id="LC5057" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Note that this only scans back one line, since scanning back</span></td>
      </tr>
      <tr>
        <td id="L5058" class="blob-num js-line-number" data-line-number="5058"></td>
        <td id="LC5058" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># arbitrary number of lines would be expensive.  If you have a type</span></td>
      </tr>
      <tr>
        <td id="L5059" class="blob-num js-line-number" data-line-number="5059"></td>
        <td id="LC5059" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># that spans more than 2 lines, please use a typedef.</span></td>
      </tr>
      <tr>
        <td id="L5060" class="blob-num js-line-number" data-line-number="5060"></td>
        <td id="LC5060" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L5061" class="blob-num js-line-number" data-line-number="5061"></td>
        <td id="LC5061" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>previous</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L5062" class="blob-num js-line-number" data-line-number="5062"></td>
        <td id="LC5062" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*::(?:[\w&lt;&gt;]|::)+\s*&amp;\s*\S&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5063" class="blob-num js-line-number" data-line-number="5063"></td>
        <td id="LC5063" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># previous_line\n + ::current_line</span></td>
      </tr>
      <tr>
        <td id="L5064" class="blob-num js-line-number" data-line-number="5064"></td>
        <td id="LC5064" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>previous</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b((?:const\s*)?(?:[\w&lt;&gt;]|::)+[\w&lt;&gt;])\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5065" class="blob-num js-line-number" data-line-number="5065"></td>
        <td id="LC5065" class="blob-code blob-code-inner js-file-line">                        <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>])</td>
      </tr>
      <tr>
        <td id="L5066" class="blob-num js-line-number" data-line-number="5066"></td>
        <td id="LC5066" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*[a-zA-Z_]([\w&lt;&gt;]|::)+\s*&amp;\s*\S&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5067" class="blob-num js-line-number" data-line-number="5067"></td>
        <td id="LC5067" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># previous_line::\n + current_line</span></td>
      </tr>
      <tr>
        <td id="L5068" class="blob-num js-line-number" data-line-number="5068"></td>
        <td id="LC5068" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>previous</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b((?:const\s*)?(?:[\w&lt;&gt;]|::)+::)\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5069" class="blob-num js-line-number" data-line-number="5069"></td>
        <td id="LC5069" class="blob-code blob-code-inner js-file-line">                        <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>])</td>
      </tr>
      <tr>
        <td id="L5070" class="blob-num js-line-number" data-line-number="5070"></td>
        <td id="LC5070" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>previous</span>:</td>
      </tr>
      <tr>
        <td id="L5071" class="blob-num js-line-number" data-line-number="5071"></td>
        <td id="LC5071" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>previous</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>+</span> <span class=pl-s1>line</span>.<span class=pl-en>lstrip</span>()</td>
      </tr>
      <tr>
        <td id="L5072" class="blob-num js-line-number" data-line-number="5072"></td>
        <td id="LC5072" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5073" class="blob-num js-line-number" data-line-number="5073"></td>
        <td id="LC5073" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Check for templated parameter that is split across multiple lines</span></td>
      </tr>
      <tr>
        <td id="L5074" class="blob-num js-line-number" data-line-number="5074"></td>
        <td id="LC5074" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>endpos</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>rfind</span>(<span class=pl-s>&#39;&gt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5075" class="blob-num js-line-number" data-line-number="5075"></td>
        <td id="LC5075" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>endpos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L5076" class="blob-num js-line-number" data-line-number="5076"></td>
        <td id="LC5076" class="blob-code blob-code-inner js-file-line">        (<span class=pl-s1>_</span>, <span class=pl-s1>startline</span>, <span class=pl-s1>startpos</span>) <span class=pl-c1>=</span> <span class=pl-v>ReverseCloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L5077" class="blob-num js-line-number" data-line-number="5077"></td>
        <td id="LC5077" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>endpos</span>)</td>
      </tr>
      <tr>
        <td id="L5078" class="blob-num js-line-number" data-line-number="5078"></td>
        <td id="LC5078" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>startpos</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>-</span><span class=pl-c1>1</span> <span class=pl-c1>and</span> <span class=pl-s1>startline</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>linenum</span>:</td>
      </tr>
      <tr>
        <td id="L5079" class="blob-num js-line-number" data-line-number="5079"></td>
        <td id="LC5079" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># Found the matching &lt; on an earlier line, collect all</span></td>
      </tr>
      <tr>
        <td id="L5080" class="blob-num js-line-number" data-line-number="5080"></td>
        <td id="LC5080" class="blob-code blob-code-inner js-file-line">          <span class=pl-c># pieces up to current line.</span></td>
      </tr>
      <tr>
        <td id="L5081" class="blob-num js-line-number" data-line-number="5081"></td>
        <td id="LC5081" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L5082" class="blob-num js-line-number" data-line-number="5082"></td>
        <td id="LC5082" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>startline</span>, <span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L5083" class="blob-num js-line-number" data-line-number="5083"></td>
        <td id="LC5083" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>line</span> <span class=pl-c1>+=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>].<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L5084" class="blob-num js-line-number" data-line-number="5084"></td>
        <td id="LC5084" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5085" class="blob-num js-line-number" data-line-number="5085"></td>
        <td id="LC5085" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check for non-const references in function parameters.  A single &#39;&amp;&#39; may</span></td>
      </tr>
      <tr>
        <td id="L5086" class="blob-num js-line-number" data-line-number="5086"></td>
        <td id="LC5086" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># found in the following places:</span></td>
      </tr>
      <tr>
        <td id="L5087" class="blob-num js-line-number" data-line-number="5087"></td>
        <td id="LC5087" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   inside expression: binary &amp; for bitwise AND</span></td>
      </tr>
      <tr>
        <td id="L5088" class="blob-num js-line-number" data-line-number="5088"></td>
        <td id="LC5088" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   inside expression: unary &amp; for taking the address of something</span></td>
      </tr>
      <tr>
        <td id="L5089" class="blob-num js-line-number" data-line-number="5089"></td>
        <td id="LC5089" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   inside declarators: reference parameter</span></td>
      </tr>
      <tr>
        <td id="L5090" class="blob-num js-line-number" data-line-number="5090"></td>
        <td id="LC5090" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We will exclude the first two cases by checking that we are not inside a</span></td>
      </tr>
      <tr>
        <td id="L5091" class="blob-num js-line-number" data-line-number="5091"></td>
        <td id="LC5091" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># function body, including one that was just introduced by a trailing &#39;{&#39;.</span></td>
      </tr>
      <tr>
        <td id="L5092" class="blob-num js-line-number" data-line-number="5092"></td>
        <td id="LC5092" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Doesn&#39;t account for &#39;catch(Exception&amp; e)&#39; [rare].</span></td>
      </tr>
      <tr>
        <td id="L5093" class="blob-num js-line-number" data-line-number="5093"></td>
        <td id="LC5093" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-s1>nesting_state</span>.<span class=pl-s1>previous_stack_top</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5094" class="blob-num js-line-number" data-line-number="5094"></td>
        <td id="LC5094" class="blob-code blob-code-inner js-file-line">      <span class=pl-c1>not</span> (<span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>previous_stack_top</span>, <span class=pl-s1>_ClassInfo</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5095" class="blob-num js-line-number" data-line-number="5095"></td>
        <td id="LC5095" class="blob-code blob-code-inner js-file-line">           <span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>previous_stack_top</span>, <span class=pl-s1>_NamespaceInfo</span>))):</td>
      </tr>
      <tr>
        <td id="L5096" class="blob-num js-line-number" data-line-number="5096"></td>
        <td id="LC5096" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Not at toplevel, not within a class, and not within a namespace</span></td>
      </tr>
      <tr>
        <td id="L5097" class="blob-num js-line-number" data-line-number="5097"></td>
        <td id="LC5097" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5098" class="blob-num js-line-number" data-line-number="5098"></td>
        <td id="LC5098" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5099" class="blob-num js-line-number" data-line-number="5099"></td>
        <td id="LC5099" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Avoid initializer lists.  We only need to scan back from the</span></td>
      </tr>
      <tr>
        <td id="L5100" class="blob-num js-line-number" data-line-number="5100"></td>
        <td id="LC5100" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># current line for something that starts with &#39;:&#39;.</span></td>
      </tr>
      <tr>
        <td id="L5101" class="blob-num js-line-number" data-line-number="5101"></td>
        <td id="LC5101" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5102" class="blob-num js-line-number" data-line-number="5102"></td>
        <td id="LC5102" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We don&#39;t need to check the current line, since the &#39;&amp;&#39; would</span></td>
      </tr>
      <tr>
        <td id="L5103" class="blob-num js-line-number" data-line-number="5103"></td>
        <td id="LC5103" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># appear inside the second set of parentheses on the current line as</span></td>
      </tr>
      <tr>
        <td id="L5104" class="blob-num js-line-number" data-line-number="5104"></td>
        <td id="LC5104" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># opposed to the first set.</span></td>
      </tr>
      <tr>
        <td id="L5105" class="blob-num js-line-number" data-line-number="5105"></td>
        <td id="LC5105" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5106" class="blob-num js-line-number" data-line-number="5106"></td>
        <td id="LC5106" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>, <span class=pl-en>max</span>(<span class=pl-c1>0</span>, <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>10</span>), <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L5107" class="blob-num js-line-number" data-line-number="5107"></td>
        <td id="LC5107" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>previous_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>]</td>
      </tr>
      <tr>
        <td id="L5108" class="blob-num js-line-number" data-line-number="5108"></td>
        <td id="LC5108" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[),]\s*$&#39;</span>, <span class=pl-s1>previous_line</span>):</td>
      </tr>
      <tr>
        <td id="L5109" class="blob-num js-line-number" data-line-number="5109"></td>
        <td id="LC5109" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L5110" class="blob-num js-line-number" data-line-number="5110"></td>
        <td id="LC5110" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*:\s+\S&#39;</span>, <span class=pl-s1>previous_line</span>):</td>
      </tr>
      <tr>
        <td id="L5111" class="blob-num js-line-number" data-line-number="5111"></td>
        <td id="LC5111" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5112" class="blob-num js-line-number" data-line-number="5112"></td>
        <td id="LC5112" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5113" class="blob-num js-line-number" data-line-number="5113"></td>
        <td id="LC5113" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Avoid preprocessors</span></td>
      </tr>
      <tr>
        <td id="L5114" class="blob-num js-line-number" data-line-number="5114"></td>
        <td id="LC5114" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\\\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5115" class="blob-num js-line-number" data-line-number="5115"></td>
        <td id="LC5115" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5116" class="blob-num js-line-number" data-line-number="5116"></td>
        <td id="LC5116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5117" class="blob-num js-line-number" data-line-number="5117"></td>
        <td id="LC5117" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Avoid constructor initializer lists</span></td>
      </tr>
      <tr>
        <td id="L5118" class="blob-num js-line-number" data-line-number="5118"></td>
        <td id="LC5118" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsInitializerList</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5119" class="blob-num js-line-number" data-line-number="5119"></td>
        <td id="LC5119" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5120" class="blob-num js-line-number" data-line-number="5120"></td>
        <td id="LC5120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5121" class="blob-num js-line-number" data-line-number="5121"></td>
        <td id="LC5121" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We allow non-const references in a few standard places, like functions</span></td>
      </tr>
      <tr>
        <td id="L5122" class="blob-num js-line-number" data-line-number="5122"></td>
        <td id="LC5122" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># called &quot;swap()&quot; or iostream operators like &quot;&lt;&lt;&quot; or &quot;&gt;&gt;&quot;.  Do not check</span></td>
      </tr>
      <tr>
        <td id="L5123" class="blob-num js-line-number" data-line-number="5123"></td>
        <td id="LC5123" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># those function parameters.</span></td>
      </tr>
      <tr>
        <td id="L5124" class="blob-num js-line-number" data-line-number="5124"></td>
        <td id="LC5124" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5125" class="blob-num js-line-number" data-line-number="5125"></td>
        <td id="LC5125" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We also accept &amp; in static_assert, which looks like a function but</span></td>
      </tr>
      <tr>
        <td id="L5126" class="blob-num js-line-number" data-line-number="5126"></td>
        <td id="LC5126" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># it&#39;s actually a declaration expression.</span></td>
      </tr>
      <tr>
        <td id="L5127" class="blob-num js-line-number" data-line-number="5127"></td>
        <td id="LC5127" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>allowed_functions</span> <span class=pl-c1>=</span> (<span class=pl-s>r&#39;(?:[sS]wap(?:&lt;\w:+&gt;)?|&#39;</span></td>
      </tr>
      <tr>
        <td id="L5128" class="blob-num js-line-number" data-line-number="5128"></td>
        <td id="LC5128" class="blob-code blob-code-inner js-file-line">                           <span class=pl-s>r&#39;operator\s*[&lt;&gt;][&lt;&gt;]|&#39;</span></td>
      </tr>
      <tr>
        <td id="L5129" class="blob-num js-line-number" data-line-number="5129"></td>
        <td id="LC5129" class="blob-code blob-code-inner js-file-line">                           <span class=pl-s>r&#39;static_assert|COMPILE_ASSERT&#39;</span></td>
      </tr>
      <tr>
        <td id="L5130" class="blob-num js-line-number" data-line-number="5130"></td>
        <td id="LC5130" class="blob-code blob-code-inner js-file-line">                           <span class=pl-s>r&#39;)\s*\(&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5131" class="blob-num js-line-number" data-line-number="5131"></td>
        <td id="LC5131" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s1>allowed_functions</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5132" class="blob-num js-line-number" data-line-number="5132"></td>
        <td id="LC5132" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5133" class="blob-num js-line-number" data-line-number="5133"></td>
        <td id="LC5133" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>elif</span> <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\S+\([^)]*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5134" class="blob-num js-line-number" data-line-number="5134"></td>
        <td id="LC5134" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Don&#39;t see an allowed function on this line.  Actually we</span></td>
      </tr>
      <tr>
        <td id="L5135" class="blob-num js-line-number" data-line-number="5135"></td>
        <td id="LC5135" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># didn&#39;t see any function name on this line, so this is likely a</span></td>
      </tr>
      <tr>
        <td id="L5136" class="blob-num js-line-number" data-line-number="5136"></td>
        <td id="LC5136" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># multi-line parameter list.  Try a bit harder to catch this case.</span></td>
      </tr>
      <tr>
        <td id="L5137" class="blob-num js-line-number" data-line-number="5137"></td>
        <td id="LC5137" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-c1>2</span>):</td>
      </tr>
      <tr>
        <td id="L5138" class="blob-num js-line-number" data-line-number="5138"></td>
        <td id="LC5138" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> (<span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-s1>i</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5139" class="blob-num js-line-number" data-line-number="5139"></td>
        <td id="LC5139" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>Search</span>(<span class=pl-s1>allowed_functions</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-s1>i</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>])):</td>
      </tr>
      <tr>
        <td id="L5140" class="blob-num js-line-number" data-line-number="5140"></td>
        <td id="LC5140" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5141" class="blob-num js-line-number" data-line-number="5141"></td>
        <td id="LC5141" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5142" class="blob-num js-line-number" data-line-number="5142"></td>
        <td id="LC5142" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>decls</span> <span class=pl-c1>=</span> <span class=pl-v>ReplaceAll</span>(<span class=pl-s>r&#39;{[^}]*}&#39;</span>, <span class=pl-s>&#39; &#39;</span>, <span class=pl-s1>line</span>)  <span class=pl-c># exclude function body</span></td>
      </tr>
      <tr>
        <td id="L5143" class="blob-num js-line-number" data-line-number="5143"></td>
        <td id="LC5143" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>parameter</span> <span class=pl-c1>in</span> <span class=pl-s1>re</span>.<span class=pl-en>findall</span>(<span class=pl-s1>_RE_PATTERN_REF_PARAM</span>, <span class=pl-s1>decls</span>):</td>
      </tr>
      <tr>
        <td id="L5144" class="blob-num js-line-number" data-line-number="5144"></td>
        <td id="LC5144" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s1>_RE_PATTERN_CONST_REF_PARAM</span>, <span class=pl-s1>parameter</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5145" class="blob-num js-line-number" data-line-number="5145"></td>
        <td id="LC5145" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s1>_RE_PATTERN_REF_STREAM_PARAM</span>, <span class=pl-s1>parameter</span>)):</td>
      </tr>
      <tr>
        <td id="L5146" class="blob-num js-line-number" data-line-number="5146"></td>
        <td id="LC5146" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/references&#39;</span>, <span class=pl-c1>2</span>,</td>
      </tr>
      <tr>
        <td id="L5147" class="blob-num js-line-number" data-line-number="5147"></td>
        <td id="LC5147" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Is this a non-const reference? &#39;</span></td>
      </tr>
      <tr>
        <td id="L5148" class="blob-num js-line-number" data-line-number="5148"></td>
        <td id="LC5148" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;If so, make const or use a pointer: &#39;</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L5149" class="blob-num js-line-number" data-line-number="5149"></td>
        <td id="LC5149" class="blob-code blob-code-inner js-file-line">            <span class=pl-v>ReplaceAll</span>(<span class=pl-s>&#39; *&lt;&#39;</span>, <span class=pl-s>&#39;&lt;&#39;</span>, <span class=pl-s1>parameter</span>))</td>
      </tr>
      <tr>
        <td id="L5150" class="blob-num js-line-number" data-line-number="5150"></td>
        <td id="LC5150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5151" class="blob-num js-line-number" data-line-number="5151"></td>
        <td id="LC5151" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5152" class="blob-num js-line-number" data-line-number="5152"></td>
        <td id="LC5152" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckCasts</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5153" class="blob-num js-line-number" data-line-number="5153"></td>
        <td id="LC5153" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Various cast related checks.</span></td>
      </tr>
      <tr>
        <td id="L5154" class="blob-num js-line-number" data-line-number="5154"></td>
        <td id="LC5154" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5155" class="blob-num js-line-number" data-line-number="5155"></td>
        <td id="LC5155" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5156" class="blob-num js-line-number" data-line-number="5156"></td>
        <td id="LC5156" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5157" class="blob-num js-line-number" data-line-number="5157"></td>
        <td id="LC5157" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5158" class="blob-num js-line-number" data-line-number="5158"></td>
        <td id="LC5158" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5159" class="blob-num js-line-number" data-line-number="5159"></td>
        <td id="LC5159" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5160" class="blob-num js-line-number" data-line-number="5160"></td>
        <td id="LC5160" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5161" class="blob-num js-line-number" data-line-number="5161"></td>
        <td id="LC5161" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5162" class="blob-num js-line-number" data-line-number="5162"></td>
        <td id="LC5162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5163" class="blob-num js-line-number" data-line-number="5163"></td>
        <td id="LC5163" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check to see if they&#39;re using an conversion function cast.</span></td>
      </tr>
      <tr>
        <td id="L5164" class="blob-num js-line-number" data-line-number="5164"></td>
        <td id="LC5164" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># I just try to capture the most common basic types, though there are more.</span></td>
      </tr>
      <tr>
        <td id="L5165" class="blob-num js-line-number" data-line-number="5165"></td>
        <td id="LC5165" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Parameterless conversion functions, such as bool(), are allowed as they are</span></td>
      </tr>
      <tr>
        <td id="L5166" class="blob-num js-line-number" data-line-number="5166"></td>
        <td id="LC5166" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># probably a member operator declaration or default constructor.</span></td>
      </tr>
      <tr>
        <td id="L5167" class="blob-num js-line-number" data-line-number="5167"></td>
        <td id="LC5167" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(</td>
      </tr>
      <tr>
        <td id="L5168" class="blob-num js-line-number" data-line-number="5168"></td>
        <td id="LC5168" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(\bnew\s+(?:const\s+)?|\S&lt;\s*(?:const\s+)?)?\b&#39;</span></td>
      </tr>
      <tr>
        <td id="L5169" class="blob-num js-line-number" data-line-number="5169"></td>
        <td id="LC5169" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(int|float|double|bool|char|int32|uint32|int64|uint64)&#39;</span></td>
      </tr>
      <tr>
        <td id="L5170" class="blob-num js-line-number" data-line-number="5170"></td>
        <td id="LC5170" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(\([^)].*)&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5171" class="blob-num js-line-number" data-line-number="5171"></td>
        <td id="LC5171" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>expecting_function</span> <span class=pl-c1>=</span> <span class=pl-v>ExpectingFunctionArgs</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>)</td>
      </tr>
      <tr>
        <td id="L5172" class="blob-num js-line-number" data-line-number="5172"></td>
        <td id="LC5172" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span> <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-s1>expecting_function</span>:</td>
      </tr>
      <tr>
        <td id="L5173" class="blob-num js-line-number" data-line-number="5173"></td>
        <td id="LC5173" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched_type</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L5174" class="blob-num js-line-number" data-line-number="5174"></td>
        <td id="LC5174" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5175" class="blob-num js-line-number" data-line-number="5175"></td>
        <td id="LC5175" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># matched_new_or_template is used to silence two false positives:</span></td>
      </tr>
      <tr>
        <td id="L5176" class="blob-num js-line-number" data-line-number="5176"></td>
        <td id="LC5176" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - New operators</span></td>
      </tr>
      <tr>
        <td id="L5177" class="blob-num js-line-number" data-line-number="5177"></td>
        <td id="LC5177" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - Template arguments with function types</span></td>
      </tr>
      <tr>
        <td id="L5178" class="blob-num js-line-number" data-line-number="5178"></td>
        <td id="LC5178" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5179" class="blob-num js-line-number" data-line-number="5179"></td>
        <td id="LC5179" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># For template arguments, we match on types immediately following</span></td>
      </tr>
      <tr>
        <td id="L5180" class="blob-num js-line-number" data-line-number="5180"></td>
        <td id="LC5180" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># an opening bracket without any spaces.  This is a fast way to</span></td>
      </tr>
      <tr>
        <td id="L5181" class="blob-num js-line-number" data-line-number="5181"></td>
        <td id="LC5181" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># silence the common case where the function type is the first</span></td>
      </tr>
      <tr>
        <td id="L5182" class="blob-num js-line-number" data-line-number="5182"></td>
        <td id="LC5182" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># template argument.  False negative with less-than comparison is</span></td>
      </tr>
      <tr>
        <td id="L5183" class="blob-num js-line-number" data-line-number="5183"></td>
        <td id="LC5183" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># avoided because those operators are usually followed by a space.</span></td>
      </tr>
      <tr>
        <td id="L5184" class="blob-num js-line-number" data-line-number="5184"></td>
        <td id="LC5184" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5185" class="blob-num js-line-number" data-line-number="5185"></td>
        <td id="LC5185" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   function&lt;double(double)&gt;   // bracket + no space = false positive</span></td>
      </tr>
      <tr>
        <td id="L5186" class="blob-num js-line-number" data-line-number="5186"></td>
        <td id="LC5186" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#   value &lt; double(42)         // bracket + space = true positive</span></td>
      </tr>
      <tr>
        <td id="L5187" class="blob-num js-line-number" data-line-number="5187"></td>
        <td id="LC5187" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched_new_or_template</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L5188" class="blob-num js-line-number" data-line-number="5188"></td>
        <td id="LC5188" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5189" class="blob-num js-line-number" data-line-number="5189"></td>
        <td id="LC5189" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Avoid arrays by looking for brackets that come after the closing</span></td>
      </tr>
      <tr>
        <td id="L5190" class="blob-num js-line-number" data-line-number="5190"></td>
        <td id="LC5190" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># parenthesis.</span></td>
      </tr>
      <tr>
        <td id="L5191" class="blob-num js-line-number" data-line-number="5191"></td>
        <td id="LC5191" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\([^()]+\)\s*\[&#39;</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)):</td>
      </tr>
      <tr>
        <td id="L5192" class="blob-num js-line-number" data-line-number="5192"></td>
        <td id="LC5192" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5193" class="blob-num js-line-number" data-line-number="5193"></td>
        <td id="LC5193" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5194" class="blob-num js-line-number" data-line-number="5194"></td>
        <td id="LC5194" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Other things to ignore:</span></td>
      </tr>
      <tr>
        <td id="L5195" class="blob-num js-line-number" data-line-number="5195"></td>
        <td id="LC5195" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - Function pointers</span></td>
      </tr>
      <tr>
        <td id="L5196" class="blob-num js-line-number" data-line-number="5196"></td>
        <td id="LC5196" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - Casts to pointer types</span></td>
      </tr>
      <tr>
        <td id="L5197" class="blob-num js-line-number" data-line-number="5197"></td>
        <td id="LC5197" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - Placement new</span></td>
      </tr>
      <tr>
        <td id="L5198" class="blob-num js-line-number" data-line-number="5198"></td>
        <td id="LC5198" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># - Alias declarations</span></td>
      </tr>
      <tr>
        <td id="L5199" class="blob-num js-line-number" data-line-number="5199"></td>
        <td id="LC5199" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched_funcptr</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>)</td>
      </tr>
      <tr>
        <td id="L5200" class="blob-num js-line-number" data-line-number="5200"></td>
        <td id="LC5200" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> (<span class=pl-s1>matched_new_or_template</span> <span class=pl-c1>is</span> <span class=pl-c1>None</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5201" class="blob-num js-line-number" data-line-number="5201"></td>
        <td id="LC5201" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> (<span class=pl-s1>matched_funcptr</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5202" class="blob-num js-line-number" data-line-number="5202"></td>
        <td id="LC5202" class="blob-code blob-code-inner js-file-line">             (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;\((?:[^() ]+::\s*\*\s*)?[^() ]+\)\s*\(&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5203" class="blob-num js-line-number" data-line-number="5203"></td>
        <td id="LC5203" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>matched_funcptr</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5204" class="blob-num js-line-number" data-line-number="5204"></td>
        <td id="LC5204" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>matched_funcptr</span>.<span class=pl-en>startswith</span>(<span class=pl-s>&#39;(*)&#39;</span>))) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5205" class="blob-num js-line-number" data-line-number="5205"></td>
        <td id="LC5205" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*using\s+\S+\s*=\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>matched_type</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5206" class="blob-num js-line-number" data-line-number="5206"></td>
        <td id="LC5206" class="blob-code blob-code-inner js-file-line">        <span class=pl-c1>not</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;new\(\S+\)\s*&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>matched_type</span>, <span class=pl-s1>line</span>)):</td>
      </tr>
      <tr>
        <td id="L5207" class="blob-num js-line-number" data-line-number="5207"></td>
        <td id="LC5207" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/casting&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5208" class="blob-num js-line-number" data-line-number="5208"></td>
        <td id="LC5208" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Using deprecated casting style.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L5209" class="blob-num js-line-number" data-line-number="5209"></td>
        <td id="LC5209" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Use static_cast&lt;%s&gt;(...) instead&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L5210" class="blob-num js-line-number" data-line-number="5210"></td>
        <td id="LC5210" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>matched_type</span>)</td>
      </tr>
      <tr>
        <td id="L5211" class="blob-num js-line-number" data-line-number="5211"></td>
        <td id="LC5211" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5212" class="blob-num js-line-number" data-line-number="5212"></td>
        <td id="LC5212" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>expecting_function</span>:</td>
      </tr>
      <tr>
        <td id="L5213" class="blob-num js-line-number" data-line-number="5213"></td>
        <td id="LC5213" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckCStyleCast</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;static_cast&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5214" class="blob-num js-line-number" data-line-number="5214"></td>
        <td id="LC5214" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s>r&#39;\((int|float|double|bool|char|u?int(16|32|64))\)&#39;</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5215" class="blob-num js-line-number" data-line-number="5215"></td>
        <td id="LC5215" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5216" class="blob-num js-line-number" data-line-number="5216"></td>
        <td id="LC5216" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This doesn&#39;t catch all cases. Consider (const char * const)&quot;hello&quot;.</span></td>
      </tr>
      <tr>
        <td id="L5217" class="blob-num js-line-number" data-line-number="5217"></td>
        <td id="LC5217" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5218" class="blob-num js-line-number" data-line-number="5218"></td>
        <td id="LC5218" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># (char *) &quot;foo&quot; should always be a const_cast (reinterpret_cast won&#39;t</span></td>
      </tr>
      <tr>
        <td id="L5219" class="blob-num js-line-number" data-line-number="5219"></td>
        <td id="LC5219" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># compile).</span></td>
      </tr>
      <tr>
        <td id="L5220" class="blob-num js-line-number" data-line-number="5220"></td>
        <td id="LC5220" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>CheckCStyleCast</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;const_cast&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5221" class="blob-num js-line-number" data-line-number="5221"></td>
        <td id="LC5221" class="blob-code blob-code-inner js-file-line">                     <span class=pl-s>r&#39;\((char\s?\*+\s?)\)\s*&quot;&#39;</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5222" class="blob-num js-line-number" data-line-number="5222"></td>
        <td id="LC5222" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>pass</span></td>
      </tr>
      <tr>
        <td id="L5223" class="blob-num js-line-number" data-line-number="5223"></td>
        <td id="LC5223" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5224" class="blob-num js-line-number" data-line-number="5224"></td>
        <td id="LC5224" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Check pointer casts for other than string constants</span></td>
      </tr>
      <tr>
        <td id="L5225" class="blob-num js-line-number" data-line-number="5225"></td>
        <td id="LC5225" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckCStyleCast</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;reinterpret_cast&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5226" class="blob-num js-line-number" data-line-number="5226"></td>
        <td id="LC5226" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s>r&#39;\((\w+\s?\*+\s?)\)&#39;</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5227" class="blob-num js-line-number" data-line-number="5227"></td>
        <td id="LC5227" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5228" class="blob-num js-line-number" data-line-number="5228"></td>
        <td id="LC5228" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># In addition, we look for people taking the address of a cast.  This</span></td>
      </tr>
      <tr>
        <td id="L5229" class="blob-num js-line-number" data-line-number="5229"></td>
        <td id="LC5229" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># is dangerous -- casts can assign to temporaries, so the pointer doesn&#39;t</span></td>
      </tr>
      <tr>
        <td id="L5230" class="blob-num js-line-number" data-line-number="5230"></td>
        <td id="LC5230" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># point where you think.</span></td>
      </tr>
      <tr>
        <td id="L5231" class="blob-num js-line-number" data-line-number="5231"></td>
        <td id="LC5231" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5232" class="blob-num js-line-number" data-line-number="5232"></td>
        <td id="LC5232" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Some non-identifier character is required before the &#39;&amp;&#39; for the</span></td>
      </tr>
      <tr>
        <td id="L5233" class="blob-num js-line-number" data-line-number="5233"></td>
        <td id="LC5233" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># expression to be recognized as a cast.  These are casts:</span></td>
      </tr>
      <tr>
        <td id="L5234" class="blob-num js-line-number" data-line-number="5234"></td>
        <td id="LC5234" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   expression = &amp;static_cast&lt;int*&gt;(temporary());</span></td>
      </tr>
      <tr>
        <td id="L5235" class="blob-num js-line-number" data-line-number="5235"></td>
        <td id="LC5235" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   function(&amp;(int*)(temporary()));</span></td>
      </tr>
      <tr>
        <td id="L5236" class="blob-num js-line-number" data-line-number="5236"></td>
        <td id="LC5236" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L5237" class="blob-num js-line-number" data-line-number="5237"></td>
        <td id="LC5237" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># This is not a cast:</span></td>
      </tr>
      <tr>
        <td id="L5238" class="blob-num js-line-number" data-line-number="5238"></td>
        <td id="LC5238" class="blob-code blob-code-inner js-file-line">  <span class=pl-c>#   reference_type&amp;(int* function_param);</span></td>
      </tr>
      <tr>
        <td id="L5239" class="blob-num js-line-number" data-line-number="5239"></td>
        <td id="LC5239" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(</td>
      </tr>
      <tr>
        <td id="L5240" class="blob-num js-line-number" data-line-number="5240"></td>
        <td id="LC5240" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(?:[^\w]&amp;\(([^)*][^)]*)\)[\w(])|&#39;</span></td>
      </tr>
      <tr>
        <td id="L5241" class="blob-num js-line-number" data-line-number="5241"></td>
        <td id="LC5241" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>r&#39;(?:[^\w]&amp;(static|dynamic|down|reinterpret)_cast\b)&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5242" class="blob-num js-line-number" data-line-number="5242"></td>
        <td id="LC5242" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5243" class="blob-num js-line-number" data-line-number="5243"></td>
        <td id="LC5243" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Try a better error message when the &amp; is bound to something</span></td>
      </tr>
      <tr>
        <td id="L5244" class="blob-num js-line-number" data-line-number="5244"></td>
        <td id="LC5244" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># dereferenced by the casted pointer, as opposed to the casted</span></td>
      </tr>
      <tr>
        <td id="L5245" class="blob-num js-line-number" data-line-number="5245"></td>
        <td id="LC5245" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># pointer itself.</span></td>
      </tr>
      <tr>
        <td id="L5246" class="blob-num js-line-number" data-line-number="5246"></td>
        <td id="LC5246" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>parenthesis_error</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5247" class="blob-num js-line-number" data-line-number="5247"></td>
        <td id="LC5247" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*&amp;(?:static|dynamic|down|reinterpret)_cast\b)&lt;&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5248" class="blob-num js-line-number" data-line-number="5248"></td>
        <td id="LC5248" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5249" class="blob-num js-line-number" data-line-number="5249"></td>
        <td id="LC5249" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_</span>, <span class=pl-s1>y1</span>, <span class=pl-s1>x1</span> <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-en>len</span>(<span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L5250" class="blob-num js-line-number" data-line-number="5250"></td>
        <td id="LC5250" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>x1</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span> <span class=pl-c1>and</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>y1</span>][<span class=pl-s1>x1</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;(&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L5251" class="blob-num js-line-number" data-line-number="5251"></td>
        <td id="LC5251" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>_</span>, <span class=pl-s1>y2</span>, <span class=pl-s1>x2</span> <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>y1</span>, <span class=pl-s1>x1</span>)</td>
      </tr>
      <tr>
        <td id="L5252" class="blob-num js-line-number" data-line-number="5252"></td>
        <td id="LC5252" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>x2</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5253" class="blob-num js-line-number" data-line-number="5253"></td>
        <td id="LC5253" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>extended_line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>y2</span>][<span class=pl-s1>x2</span>:]</td>
      </tr>
      <tr>
        <td id="L5254" class="blob-num js-line-number" data-line-number="5254"></td>
        <td id="LC5254" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>y2</span> <span class=pl-c1>&lt;</span> <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>() <span class=pl-c1>-</span> <span class=pl-c1>1</span>:</td>
      </tr>
      <tr>
        <td id="L5255" class="blob-num js-line-number" data-line-number="5255"></td>
        <td id="LC5255" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>extended_line</span> <span class=pl-c1>+=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>y2</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L5256" class="blob-num js-line-number" data-line-number="5256"></td>
        <td id="LC5256" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*(?:-&gt;|\[)&#39;</span>, <span class=pl-s1>extended_line</span>):</td>
      </tr>
      <tr>
        <td id="L5257" class="blob-num js-line-number" data-line-number="5257"></td>
        <td id="LC5257" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>parenthesis_error</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5258" class="blob-num js-line-number" data-line-number="5258"></td>
        <td id="LC5258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5259" class="blob-num js-line-number" data-line-number="5259"></td>
        <td id="LC5259" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>parenthesis_error</span>:</td>
      </tr>
      <tr>
        <td id="L5260" class="blob-num js-line-number" data-line-number="5260"></td>
        <td id="LC5260" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/casting&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5261" class="blob-num js-line-number" data-line-number="5261"></td>
        <td id="LC5261" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s>&#39;Are you taking an address of something dereferenced &#39;</span></td>
      </tr>
      <tr>
        <td id="L5262" class="blob-num js-line-number" data-line-number="5262"></td>
        <td id="LC5262" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;from a cast?  Wrapping the dereferenced expression in &#39;</span></td>
      </tr>
      <tr>
        <td id="L5263" class="blob-num js-line-number" data-line-number="5263"></td>
        <td id="LC5263" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;parentheses will make the binding more obvious&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L5264" class="blob-num js-line-number" data-line-number="5264"></td>
        <td id="LC5264" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5265" class="blob-num js-line-number" data-line-number="5265"></td>
        <td id="LC5265" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/casting&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5266" class="blob-num js-line-number" data-line-number="5266"></td>
        <td id="LC5266" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s>&#39;Are you taking an address of a cast?  &#39;</span></td>
      </tr>
      <tr>
        <td id="L5267" class="blob-num js-line-number" data-line-number="5267"></td>
        <td id="LC5267" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;This is dangerous: could be a temp var.  &#39;</span></td>
      </tr>
      <tr>
        <td id="L5268" class="blob-num js-line-number" data-line-number="5268"></td>
        <td id="LC5268" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;Take the address before doing the cast, rather than after&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L5269" class="blob-num js-line-number" data-line-number="5269"></td>
        <td id="LC5269" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5270" class="blob-num js-line-number" data-line-number="5270"></td>
        <td id="LC5270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5271" class="blob-num js-line-number" data-line-number="5271"></td>
        <td id="LC5271" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckCStyleCast</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>cast_type</span>, <span class=pl-s1>pattern</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5272" class="blob-num js-line-number" data-line-number="5272"></td>
        <td id="LC5272" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks for a C-style cast by looking for the pattern.</span></td>
      </tr>
      <tr>
        <td id="L5273" class="blob-num js-line-number" data-line-number="5273"></td>
        <td id="LC5273" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5274" class="blob-num js-line-number" data-line-number="5274"></td>
        <td id="LC5274" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5275" class="blob-num js-line-number" data-line-number="5275"></td>
        <td id="LC5275" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5276" class="blob-num js-line-number" data-line-number="5276"></td>
        <td id="LC5276" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5277" class="blob-num js-line-number" data-line-number="5277"></td>
        <td id="LC5277" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5278" class="blob-num js-line-number" data-line-number="5278"></td>
        <td id="LC5278" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    cast_type: The string for the C++ cast to recommend.  This is either</span></td>
      </tr>
      <tr>
        <td id="L5279" class="blob-num js-line-number" data-line-number="5279"></td>
        <td id="LC5279" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      reinterpret_cast, static_cast, or const_cast, depending.</span></td>
      </tr>
      <tr>
        <td id="L5280" class="blob-num js-line-number" data-line-number="5280"></td>
        <td id="LC5280" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    pattern: The regular expression used to find C-style casts.</span></td>
      </tr>
      <tr>
        <td id="L5281" class="blob-num js-line-number" data-line-number="5281"></td>
        <td id="LC5281" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5282" class="blob-num js-line-number" data-line-number="5282"></td>
        <td id="LC5282" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5283" class="blob-num js-line-number" data-line-number="5283"></td>
        <td id="LC5283" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5284" class="blob-num js-line-number" data-line-number="5284"></td>
        <td id="LC5284" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if an error was emitted.</span></td>
      </tr>
      <tr>
        <td id="L5285" class="blob-num js-line-number" data-line-number="5285"></td>
        <td id="LC5285" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L5286" class="blob-num js-line-number" data-line-number="5286"></td>
        <td id="LC5286" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5287" class="blob-num js-line-number" data-line-number="5287"></td>
        <td id="LC5287" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5288" class="blob-num js-line-number" data-line-number="5288"></td>
        <td id="LC5288" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s1>pattern</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5289" class="blob-num js-line-number" data-line-number="5289"></td>
        <td id="LC5289" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5290" class="blob-num js-line-number" data-line-number="5290"></td>
        <td id="LC5290" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5291" class="blob-num js-line-number" data-line-number="5291"></td>
        <td id="LC5291" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5292" class="blob-num js-line-number" data-line-number="5292"></td>
        <td id="LC5292" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Exclude lines with keywords that tend to look like casts</span></td>
      </tr>
      <tr>
        <td id="L5293" class="blob-num js-line-number" data-line-number="5293"></td>
        <td id="LC5293" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>context</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-c1>0</span>:<span class=pl-s1>match</span>.<span class=pl-en>start</span>(<span class=pl-c1>1</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L5294" class="blob-num js-line-number" data-line-number="5294"></td>
        <td id="LC5294" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;.*\b(?:sizeof|alignof|alignas|[_A-Z][_A-Z0-9]*)\s*$&#39;</span>, <span class=pl-s1>context</span>):</td>
      </tr>
      <tr>
        <td id="L5295" class="blob-num js-line-number" data-line-number="5295"></td>
        <td id="LC5295" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5296" class="blob-num js-line-number" data-line-number="5296"></td>
        <td id="LC5296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5297" class="blob-num js-line-number" data-line-number="5297"></td>
        <td id="LC5297" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Try expanding current context to see if we one level of</span></td>
      </tr>
      <tr>
        <td id="L5298" class="blob-num js-line-number" data-line-number="5298"></td>
        <td id="LC5298" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># parentheses inside a macro.</span></td>
      </tr>
      <tr>
        <td id="L5299" class="blob-num js-line-number" data-line-number="5299"></td>
        <td id="LC5299" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5300" class="blob-num js-line-number" data-line-number="5300"></td>
        <td id="LC5300" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>, <span class=pl-en>max</span>(<span class=pl-c1>0</span>, <span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>5</span>), <span class=pl-c1>-</span><span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L5301" class="blob-num js-line-number" data-line-number="5301"></td>
        <td id="LC5301" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>context</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>] <span class=pl-c1>+</span> <span class=pl-s1>context</span></td>
      </tr>
      <tr>
        <td id="L5302" class="blob-num js-line-number" data-line-number="5302"></td>
        <td id="LC5302" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;.*\b[_A-Z][_A-Z0-9]*\s*\((?:\([^()]*\)|[^()])*$&#39;</span>, <span class=pl-s1>context</span>):</td>
      </tr>
      <tr>
        <td id="L5303" class="blob-num js-line-number" data-line-number="5303"></td>
        <td id="LC5303" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5304" class="blob-num js-line-number" data-line-number="5304"></td>
        <td id="LC5304" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5305" class="blob-num js-line-number" data-line-number="5305"></td>
        <td id="LC5305" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># operator++(int) and operator--(int)</span></td>
      </tr>
      <tr>
        <td id="L5306" class="blob-num js-line-number" data-line-number="5306"></td>
        <td id="LC5306" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>context</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39; operator++&#39;</span>) <span class=pl-c1>or</span> <span class=pl-s1>context</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39; operator--&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5307" class="blob-num js-line-number" data-line-number="5307"></td>
        <td id="LC5307" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5308" class="blob-num js-line-number" data-line-number="5308"></td>
        <td id="LC5308" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5309" class="blob-num js-line-number" data-line-number="5309"></td>
        <td id="LC5309" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># A single unnamed argument for a function tends to look like old style cast.</span></td>
      </tr>
      <tr>
        <td id="L5310" class="blob-num js-line-number" data-line-number="5310"></td>
        <td id="LC5310" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If we see those, don&#39;t issue warnings for deprecated casts.</span></td>
      </tr>
      <tr>
        <td id="L5311" class="blob-num js-line-number" data-line-number="5311"></td>
        <td id="LC5311" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>remainder</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>match</span>.<span class=pl-en>end</span>(<span class=pl-c1>0</span>):]</td>
      </tr>
      <tr>
        <td id="L5312" class="blob-num js-line-number" data-line-number="5312"></td>
        <td id="LC5312" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*(?:;|const\b|throw\b|final\b|override\b|[=&gt;{),]|-&gt;)&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5313" class="blob-num js-line-number" data-line-number="5313"></td>
        <td id="LC5313" class="blob-code blob-code-inner js-file-line">           <span class=pl-s1>remainder</span>):</td>
      </tr>
      <tr>
        <td id="L5314" class="blob-num js-line-number" data-line-number="5314"></td>
        <td id="LC5314" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5315" class="blob-num js-line-number" data-line-number="5315"></td>
        <td id="LC5315" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5316" class="blob-num js-line-number" data-line-number="5316"></td>
        <td id="LC5316" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># At this point, all that should be left is actual casts.</span></td>
      </tr>
      <tr>
        <td id="L5317" class="blob-num js-line-number" data-line-number="5317"></td>
        <td id="LC5317" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/casting&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5318" class="blob-num js-line-number" data-line-number="5318"></td>
        <td id="LC5318" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>&#39;Using C-style cast.  Use %s&lt;%s&gt;(...) instead&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L5319" class="blob-num js-line-number" data-line-number="5319"></td>
        <td id="LC5319" class="blob-code blob-code-inner js-file-line">        (<span class=pl-s1>cast_type</span>, <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L5320" class="blob-num js-line-number" data-line-number="5320"></td>
        <td id="LC5320" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5321" class="blob-num js-line-number" data-line-number="5321"></td>
        <td id="LC5321" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5322" class="blob-num js-line-number" data-line-number="5322"></td>
        <td id="LC5322" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5323" class="blob-num js-line-number" data-line-number="5323"></td>
        <td id="LC5323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5324" class="blob-num js-line-number" data-line-number="5324"></td>
        <td id="LC5324" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ExpectingFunctionArgs</span>(<span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5325" class="blob-num js-line-number" data-line-number="5325"></td>
        <td id="LC5325" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks whether where function type arguments are expected.</span></td>
      </tr>
      <tr>
        <td id="L5326" class="blob-num js-line-number" data-line-number="5326"></td>
        <td id="LC5326" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5327" class="blob-num js-line-number" data-line-number="5327"></td>
        <td id="LC5327" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5328" class="blob-num js-line-number" data-line-number="5328"></td>
        <td id="LC5328" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5329" class="blob-num js-line-number" data-line-number="5329"></td>
        <td id="LC5329" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5330" class="blob-num js-line-number" data-line-number="5330"></td>
        <td id="LC5330" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5331" class="blob-num js-line-number" data-line-number="5331"></td>
        <td id="LC5331" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5332" class="blob-num js-line-number" data-line-number="5332"></td>
        <td id="LC5332" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if the line at &#39;linenum&#39; is inside something that expects arguments</span></td>
      </tr>
      <tr>
        <td id="L5333" class="blob-num js-line-number" data-line-number="5333"></td>
        <td id="LC5333" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    of function types.</span></td>
      </tr>
      <tr>
        <td id="L5334" class="blob-num js-line-number" data-line-number="5334"></td>
        <td id="LC5334" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5335" class="blob-num js-line-number" data-line-number="5335"></td>
        <td id="LC5335" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5336" class="blob-num js-line-number" data-line-number="5336"></td>
        <td id="LC5336" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*MOCK_(CONST_)?METHOD\d+(_T)?\(&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5337" class="blob-num js-line-number" data-line-number="5337"></td>
        <td id="LC5337" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s1>linenum</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>2</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5338" class="blob-num js-line-number" data-line-number="5338"></td>
        <td id="LC5338" class="blob-code blob-code-inner js-file-line">           (<span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*MOCK_(?:CONST_)?METHOD\d+(?:_T)?\((?:\S+,)?\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5339" class="blob-num js-line-number" data-line-number="5339"></td>
        <td id="LC5339" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5340" class="blob-num js-line-number" data-line-number="5340"></td>
        <td id="LC5340" class="blob-code blob-code-inner js-file-line">            <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s*MOCK_(?:CONST_)?METHOD\d+(?:_T)?\(\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5341" class="blob-num js-line-number" data-line-number="5341"></td>
        <td id="LC5341" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>2</span>]) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5342" class="blob-num js-line-number" data-line-number="5342"></td>
        <td id="LC5342" class="blob-code blob-code-inner js-file-line">            <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bstd::m?function\s*\&lt;\s*$&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5343" class="blob-num js-line-number" data-line-number="5343"></td>
        <td id="LC5343" class="blob-code blob-code-inner js-file-line">                   <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>]))))</td>
      </tr>
      <tr>
        <td id="L5344" class="blob-num js-line-number" data-line-number="5344"></td>
        <td id="LC5344" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5345" class="blob-num js-line-number" data-line-number="5345"></td>
        <td id="LC5345" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5346" class="blob-num js-line-number" data-line-number="5346"></td>
        <td id="LC5346" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_HEADERS_CONTAINING_TEMPLATES</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L5347" class="blob-num js-line-number" data-line-number="5347"></td>
        <td id="LC5347" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;deque&gt;&#39;</span>, (<span class=pl-s>&#39;deque&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5348" class="blob-num js-line-number" data-line-number="5348"></td>
        <td id="LC5348" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;functional&gt;&#39;</span>, (<span class=pl-s>&#39;unary_function&#39;</span>, <span class=pl-s>&#39;binary_function&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5349" class="blob-num js-line-number" data-line-number="5349"></td>
        <td id="LC5349" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;plus&#39;</span>, <span class=pl-s>&#39;minus&#39;</span>, <span class=pl-s>&#39;multiplies&#39;</span>, <span class=pl-s>&#39;divides&#39;</span>, <span class=pl-s>&#39;modulus&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5350" class="blob-num js-line-number" data-line-number="5350"></td>
        <td id="LC5350" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;negate&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5351" class="blob-num js-line-number" data-line-number="5351"></td>
        <td id="LC5351" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;equal_to&#39;</span>, <span class=pl-s>&#39;not_equal_to&#39;</span>, <span class=pl-s>&#39;greater&#39;</span>, <span class=pl-s>&#39;less&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5352" class="blob-num js-line-number" data-line-number="5352"></td>
        <td id="LC5352" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;greater_equal&#39;</span>, <span class=pl-s>&#39;less_equal&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5353" class="blob-num js-line-number" data-line-number="5353"></td>
        <td id="LC5353" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;logical_and&#39;</span>, <span class=pl-s>&#39;logical_or&#39;</span>, <span class=pl-s>&#39;logical_not&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5354" class="blob-num js-line-number" data-line-number="5354"></td>
        <td id="LC5354" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;unary_negate&#39;</span>, <span class=pl-s>&#39;not1&#39;</span>, <span class=pl-s>&#39;binary_negate&#39;</span>, <span class=pl-s>&#39;not2&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5355" class="blob-num js-line-number" data-line-number="5355"></td>
        <td id="LC5355" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;bind1st&#39;</span>, <span class=pl-s>&#39;bind2nd&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5356" class="blob-num js-line-number" data-line-number="5356"></td>
        <td id="LC5356" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;pointer_to_unary_function&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5357" class="blob-num js-line-number" data-line-number="5357"></td>
        <td id="LC5357" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;pointer_to_binary_function&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5358" class="blob-num js-line-number" data-line-number="5358"></td>
        <td id="LC5358" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;ptr_fun&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5359" class="blob-num js-line-number" data-line-number="5359"></td>
        <td id="LC5359" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;mem_fun_t&#39;</span>, <span class=pl-s>&#39;mem_fun&#39;</span>, <span class=pl-s>&#39;mem_fun1_t&#39;</span>, <span class=pl-s>&#39;mem_fun1_ref_t&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5360" class="blob-num js-line-number" data-line-number="5360"></td>
        <td id="LC5360" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;mem_fun_ref_t&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5361" class="blob-num js-line-number" data-line-number="5361"></td>
        <td id="LC5361" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;const_mem_fun_t&#39;</span>, <span class=pl-s>&#39;const_mem_fun1_t&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5362" class="blob-num js-line-number" data-line-number="5362"></td>
        <td id="LC5362" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;const_mem_fun_ref_t&#39;</span>, <span class=pl-s>&#39;const_mem_fun1_ref_t&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5363" class="blob-num js-line-number" data-line-number="5363"></td>
        <td id="LC5363" class="blob-code blob-code-inner js-file-line">                      <span class=pl-s>&#39;mem_fun_ref&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5364" class="blob-num js-line-number" data-line-number="5364"></td>
        <td id="LC5364" class="blob-code blob-code-inner js-file-line">                     )),</td>
      </tr>
      <tr>
        <td id="L5365" class="blob-num js-line-number" data-line-number="5365"></td>
        <td id="LC5365" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;limits&gt;&#39;</span>, (<span class=pl-s>&#39;numeric_limits&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5366" class="blob-num js-line-number" data-line-number="5366"></td>
        <td id="LC5366" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;list&gt;&#39;</span>, (<span class=pl-s>&#39;list&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5367" class="blob-num js-line-number" data-line-number="5367"></td>
        <td id="LC5367" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;map&gt;&#39;</span>, (<span class=pl-s>&#39;map&#39;</span>, <span class=pl-s>&#39;multimap&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5368" class="blob-num js-line-number" data-line-number="5368"></td>
        <td id="LC5368" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;memory&gt;&#39;</span>, (<span class=pl-s>&#39;allocator&#39;</span>, <span class=pl-s>&#39;make_shared&#39;</span>, <span class=pl-s>&#39;make_unique&#39;</span>, <span class=pl-s>&#39;shared_ptr&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5369" class="blob-num js-line-number" data-line-number="5369"></td>
        <td id="LC5369" class="blob-code blob-code-inner js-file-line">                  <span class=pl-s>&#39;unique_ptr&#39;</span>, <span class=pl-s>&#39;weak_ptr&#39;</span>)),</td>
      </tr>
      <tr>
        <td id="L5370" class="blob-num js-line-number" data-line-number="5370"></td>
        <td id="LC5370" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;queue&gt;&#39;</span>, (<span class=pl-s>&#39;queue&#39;</span>, <span class=pl-s>&#39;priority_queue&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5371" class="blob-num js-line-number" data-line-number="5371"></td>
        <td id="LC5371" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;set&gt;&#39;</span>, (<span class=pl-s>&#39;set&#39;</span>, <span class=pl-s>&#39;multiset&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5372" class="blob-num js-line-number" data-line-number="5372"></td>
        <td id="LC5372" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;stack&gt;&#39;</span>, (<span class=pl-s>&#39;stack&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5373" class="blob-num js-line-number" data-line-number="5373"></td>
        <td id="LC5373" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;string&gt;&#39;</span>, (<span class=pl-s>&#39;char_traits&#39;</span>, <span class=pl-s>&#39;basic_string&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5374" class="blob-num js-line-number" data-line-number="5374"></td>
        <td id="LC5374" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;tuple&gt;&#39;</span>, (<span class=pl-s>&#39;tuple&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5375" class="blob-num js-line-number" data-line-number="5375"></td>
        <td id="LC5375" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;unordered_map&gt;&#39;</span>, (<span class=pl-s>&#39;unordered_map&#39;</span>, <span class=pl-s>&#39;unordered_multimap&#39;</span>)),</td>
      </tr>
      <tr>
        <td id="L5376" class="blob-num js-line-number" data-line-number="5376"></td>
        <td id="LC5376" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;unordered_set&gt;&#39;</span>, (<span class=pl-s>&#39;unordered_set&#39;</span>, <span class=pl-s>&#39;unordered_multiset&#39;</span>)),</td>
      </tr>
      <tr>
        <td id="L5377" class="blob-num js-line-number" data-line-number="5377"></td>
        <td id="LC5377" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;utility&gt;&#39;</span>, (<span class=pl-s>&#39;pair&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5378" class="blob-num js-line-number" data-line-number="5378"></td>
        <td id="LC5378" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;vector&gt;&#39;</span>, (<span class=pl-s>&#39;vector&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5379" class="blob-num js-line-number" data-line-number="5379"></td>
        <td id="LC5379" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5380" class="blob-num js-line-number" data-line-number="5380"></td>
        <td id="LC5380" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># gcc extensions.</span></td>
      </tr>
      <tr>
        <td id="L5381" class="blob-num js-line-number" data-line-number="5381"></td>
        <td id="LC5381" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Note: std::hash is their hash, ::hash is our hash</span></td>
      </tr>
      <tr>
        <td id="L5382" class="blob-num js-line-number" data-line-number="5382"></td>
        <td id="LC5382" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;hash_map&gt;&#39;</span>, (<span class=pl-s>&#39;hash_map&#39;</span>, <span class=pl-s>&#39;hash_multimap&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5383" class="blob-num js-line-number" data-line-number="5383"></td>
        <td id="LC5383" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;hash_set&gt;&#39;</span>, (<span class=pl-s>&#39;hash_set&#39;</span>, <span class=pl-s>&#39;hash_multiset&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5384" class="blob-num js-line-number" data-line-number="5384"></td>
        <td id="LC5384" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;slist&gt;&#39;</span>, (<span class=pl-s>&#39;slist&#39;</span>,)),</td>
      </tr>
      <tr>
        <td id="L5385" class="blob-num js-line-number" data-line-number="5385"></td>
        <td id="LC5385" class="blob-code blob-code-inner js-file-line">    )</td>
      </tr>
      <tr>
        <td id="L5386" class="blob-num js-line-number" data-line-number="5386"></td>
        <td id="LC5386" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5387" class="blob-num js-line-number" data-line-number="5387"></td>
        <td id="LC5387" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_HEADERS_MAYBE_TEMPLATES</span> <span class=pl-c1>=</span> (</td>
      </tr>
      <tr>
        <td id="L5388" class="blob-num js-line-number" data-line-number="5388"></td>
        <td id="LC5388" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;algorithm&gt;&#39;</span>, (<span class=pl-s>&#39;copy&#39;</span>, <span class=pl-s>&#39;max&#39;</span>, <span class=pl-s>&#39;min&#39;</span>, <span class=pl-s>&#39;min_element&#39;</span>, <span class=pl-s>&#39;sort&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5389" class="blob-num js-line-number" data-line-number="5389"></td>
        <td id="LC5389" class="blob-code blob-code-inner js-file-line">                     <span class=pl-s>&#39;transform&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5390" class="blob-num js-line-number" data-line-number="5390"></td>
        <td id="LC5390" class="blob-code blob-code-inner js-file-line">                    )),</td>
      </tr>
      <tr>
        <td id="L5391" class="blob-num js-line-number" data-line-number="5391"></td>
        <td id="LC5391" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s>&#39;&lt;utility&gt;&#39;</span>, (<span class=pl-s>&#39;forward&#39;</span>, <span class=pl-s>&#39;make_pair&#39;</span>, <span class=pl-s>&#39;move&#39;</span>, <span class=pl-s>&#39;swap&#39;</span>)),</td>
      </tr>
      <tr>
        <td id="L5392" class="blob-num js-line-number" data-line-number="5392"></td>
        <td id="LC5392" class="blob-code blob-code-inner js-file-line">    )</td>
      </tr>
      <tr>
        <td id="L5393" class="blob-num js-line-number" data-line-number="5393"></td>
        <td id="LC5393" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5394" class="blob-num js-line-number" data-line-number="5394"></td>
        <td id="LC5394" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_STRING</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;\bstring\b&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5395" class="blob-num js-line-number" data-line-number="5395"></td>
        <td id="LC5395" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5396" class="blob-num js-line-number" data-line-number="5396"></td>
        <td id="LC5396" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_re_pattern_headers_maybe_templates</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L5397" class="blob-num js-line-number" data-line-number="5397"></td>
        <td id="LC5397" class="blob-code blob-code-inner js-file-line"><span class=pl-k>for</span> <span class=pl-s1>_header</span>, <span class=pl-s1>_templates</span> <span class=pl-c1>in</span> <span class=pl-s1>_HEADERS_MAYBE_TEMPLATES</span>:</td>
      </tr>
      <tr>
        <td id="L5398" class="blob-num js-line-number" data-line-number="5398"></td>
        <td id="LC5398" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>_template</span> <span class=pl-c1>in</span> <span class=pl-s1>_templates</span>:</td>
      </tr>
      <tr>
        <td id="L5399" class="blob-num js-line-number" data-line-number="5399"></td>
        <td id="LC5399" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Match max&lt;type&gt;(..., ...), max(..., ...), but not foo-&gt;max, foo.max or</span></td>
      </tr>
      <tr>
        <td id="L5400" class="blob-num js-line-number" data-line-number="5400"></td>
        <td id="LC5400" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># type::max().</span></td>
      </tr>
      <tr>
        <td id="L5401" class="blob-num js-line-number" data-line-number="5401"></td>
        <td id="LC5401" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_re_pattern_headers_maybe_templates</span>.<span class=pl-en>append</span>(</td>
      </tr>
      <tr>
        <td id="L5402" class="blob-num js-line-number" data-line-number="5402"></td>
        <td id="LC5402" class="blob-code blob-code-inner js-file-line">        (<span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;[^&gt;.]\b&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_template</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;(&lt;.*?&gt;)?\([^\)]&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L5403" class="blob-num js-line-number" data-line-number="5403"></td>
        <td id="LC5403" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>_template</span>,</td>
      </tr>
      <tr>
        <td id="L5404" class="blob-num js-line-number" data-line-number="5404"></td>
        <td id="LC5404" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>_header</span>))</td>
      </tr>
      <tr>
        <td id="L5405" class="blob-num js-line-number" data-line-number="5405"></td>
        <td id="LC5405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5406" class="blob-num js-line-number" data-line-number="5406"></td>
        <td id="LC5406" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Other scripts may reach in and modify this pattern.</span></td>
      </tr>
      <tr>
        <td id="L5407" class="blob-num js-line-number" data-line-number="5407"></td>
        <td id="LC5407" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_re_pattern_templates</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L5408" class="blob-num js-line-number" data-line-number="5408"></td>
        <td id="LC5408" class="blob-code blob-code-inner js-file-line"><span class=pl-k>for</span> <span class=pl-s1>_header</span>, <span class=pl-s1>_templates</span> <span class=pl-c1>in</span> <span class=pl-s1>_HEADERS_CONTAINING_TEMPLATES</span>:</td>
      </tr>
      <tr>
        <td id="L5409" class="blob-num js-line-number" data-line-number="5409"></td>
        <td id="LC5409" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>_template</span> <span class=pl-c1>in</span> <span class=pl-s1>_templates</span>:</td>
      </tr>
      <tr>
        <td id="L5410" class="blob-num js-line-number" data-line-number="5410"></td>
        <td id="LC5410" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_re_pattern_templates</span>.<span class=pl-en>append</span>(</td>
      </tr>
      <tr>
        <td id="L5411" class="blob-num js-line-number" data-line-number="5411"></td>
        <td id="LC5411" class="blob-code blob-code-inner js-file-line">        (<span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;(\&lt;|\b)&#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>_template</span> <span class=pl-c1>+</span> <span class=pl-s>r&#39;\s*\&lt;&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L5412" class="blob-num js-line-number" data-line-number="5412"></td>
        <td id="LC5412" class="blob-code blob-code-inner js-file-line">         <span class=pl-s1>_template</span> <span class=pl-c1>+</span> <span class=pl-s>&#39;&lt;&gt;&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5413" class="blob-num js-line-number" data-line-number="5413"></td>
        <td id="LC5413" class="blob-code blob-code-inner js-file-line">         <span class=pl-s1>_header</span>))</td>
      </tr>
      <tr>
        <td id="L5414" class="blob-num js-line-number" data-line-number="5414"></td>
        <td id="LC5414" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5415" class="blob-num js-line-number" data-line-number="5415"></td>
        <td id="LC5415" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5416" class="blob-num js-line-number" data-line-number="5416"></td>
        <td id="LC5416" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FilesBelongToSameModule</span>(<span class=pl-s1>filename_cc</span>, <span class=pl-s1>filename_h</span>):</td>
      </tr>
      <tr>
        <td id="L5417" class="blob-num js-line-number" data-line-number="5417"></td>
        <td id="LC5417" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if these two filenames belong to the same module.</span></td>
      </tr>
      <tr>
        <td id="L5418" class="blob-num js-line-number" data-line-number="5418"></td>
        <td id="LC5418" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5419" class="blob-num js-line-number" data-line-number="5419"></td>
        <td id="LC5419" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  The concept of a &#39;module&#39; here is a as follows:</span></td>
      </tr>
      <tr>
        <td id="L5420" class="blob-num js-line-number" data-line-number="5420"></td>
        <td id="LC5420" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  foo.h, foo-inl.h, foo.cc, foo_test.cc and foo_unittest.cc belong to the</span></td>
      </tr>
      <tr>
        <td id="L5421" class="blob-num js-line-number" data-line-number="5421"></td>
        <td id="LC5421" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  same &#39;module&#39; if they are in the same directory.</span></td>
      </tr>
      <tr>
        <td id="L5422" class="blob-num js-line-number" data-line-number="5422"></td>
        <td id="LC5422" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  some/path/public/xyzzy and some/path/internal/xyzzy are also considered</span></td>
      </tr>
      <tr>
        <td id="L5423" class="blob-num js-line-number" data-line-number="5423"></td>
        <td id="LC5423" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  to belong to the same module here.</span></td>
      </tr>
      <tr>
        <td id="L5424" class="blob-num js-line-number" data-line-number="5424"></td>
        <td id="LC5424" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5425" class="blob-num js-line-number" data-line-number="5425"></td>
        <td id="LC5425" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  If the filename_cc contains a longer path than the filename_h, for example,</span></td>
      </tr>
      <tr>
        <td id="L5426" class="blob-num js-line-number" data-line-number="5426"></td>
        <td id="LC5426" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &#39;/absolute/path/to/base/sysinfo.cc&#39;, and this file would include</span></td>
      </tr>
      <tr>
        <td id="L5427" class="blob-num js-line-number" data-line-number="5427"></td>
        <td id="LC5427" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &#39;base/sysinfo.h&#39;, this function also produces the prefix needed to open the</span></td>
      </tr>
      <tr>
        <td id="L5428" class="blob-num js-line-number" data-line-number="5428"></td>
        <td id="LC5428" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  header. This is used by the caller of this function to more robustly open the</span></td>
      </tr>
      <tr>
        <td id="L5429" class="blob-num js-line-number" data-line-number="5429"></td>
        <td id="LC5429" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  header file. We don&#39;t have access to the real include paths in this context,</span></td>
      </tr>
      <tr>
        <td id="L5430" class="blob-num js-line-number" data-line-number="5430"></td>
        <td id="LC5430" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  so we need this guesswork here.</span></td>
      </tr>
      <tr>
        <td id="L5431" class="blob-num js-line-number" data-line-number="5431"></td>
        <td id="LC5431" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5432" class="blob-num js-line-number" data-line-number="5432"></td>
        <td id="LC5432" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Known bugs: tools/base/bar.cc and base/bar.h belong to the same module</span></td>
      </tr>
      <tr>
        <td id="L5433" class="blob-num js-line-number" data-line-number="5433"></td>
        <td id="LC5433" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  according to this implementation. Because of this, this function gives</span></td>
      </tr>
      <tr>
        <td id="L5434" class="blob-num js-line-number" data-line-number="5434"></td>
        <td id="LC5434" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  some false positives. This should be sufficiently rare in practice.</span></td>
      </tr>
      <tr>
        <td id="L5435" class="blob-num js-line-number" data-line-number="5435"></td>
        <td id="LC5435" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5436" class="blob-num js-line-number" data-line-number="5436"></td>
        <td id="LC5436" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5437" class="blob-num js-line-number" data-line-number="5437"></td>
        <td id="LC5437" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename_cc: is the path for the .cc file</span></td>
      </tr>
      <tr>
        <td id="L5438" class="blob-num js-line-number" data-line-number="5438"></td>
        <td id="LC5438" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename_h: is the path for the header path</span></td>
      </tr>
      <tr>
        <td id="L5439" class="blob-num js-line-number" data-line-number="5439"></td>
        <td id="LC5439" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5440" class="blob-num js-line-number" data-line-number="5440"></td>
        <td id="LC5440" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5441" class="blob-num js-line-number" data-line-number="5441"></td>
        <td id="LC5441" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Tuple with a bool and a string:</span></td>
      </tr>
      <tr>
        <td id="L5442" class="blob-num js-line-number" data-line-number="5442"></td>
        <td id="LC5442" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    bool: True if filename_cc and filename_h belong to the same module.</span></td>
      </tr>
      <tr>
        <td id="L5443" class="blob-num js-line-number" data-line-number="5443"></td>
        <td id="LC5443" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    string: the additional prefix needed to open the header file.</span></td>
      </tr>
      <tr>
        <td id="L5444" class="blob-num js-line-number" data-line-number="5444"></td>
        <td id="LC5444" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5445" class="blob-num js-line-number" data-line-number="5445"></td>
        <td id="LC5445" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5446" class="blob-num js-line-number" data-line-number="5446"></td>
        <td id="LC5446" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>fileinfo</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>filename_cc</span>)</td>
      </tr>
      <tr>
        <td id="L5447" class="blob-num js-line-number" data-line-number="5447"></td>
        <td id="LC5447" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>fileinfo</span>.<span class=pl-v>IsSource</span>():</td>
      </tr>
      <tr>
        <td id="L5448" class="blob-num js-line-number" data-line-number="5448"></td>
        <td id="LC5448" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-c1>False</span>, <span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5449" class="blob-num js-line-number" data-line-number="5449"></td>
        <td id="LC5449" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_cc</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s1>fileinfo</span>.<span class=pl-v>Extension</span>())]</td>
      </tr>
      <tr>
        <td id="L5450" class="blob-num js-line-number" data-line-number="5450"></td>
        <td id="LC5450" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>matched_test_suffix</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s1>_TEST_FILE_SUFFIX</span>, <span class=pl-s1>fileinfo</span>.<span class=pl-v>BaseName</span>())</td>
      </tr>
      <tr>
        <td id="L5451" class="blob-num js-line-number" data-line-number="5451"></td>
        <td id="LC5451" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>matched_test_suffix</span>:</td>
      </tr>
      <tr>
        <td id="L5452" class="blob-num js-line-number" data-line-number="5452"></td>
        <td id="LC5452" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>filename_cc</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s1>matched_test_suffix</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))]</td>
      </tr>
      <tr>
        <td id="L5453" class="blob-num js-line-number" data-line-number="5453"></td>
        <td id="LC5453" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_cc</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;/public/&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5454" class="blob-num js-line-number" data-line-number="5454"></td>
        <td id="LC5454" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_cc</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;/internal/&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5455" class="blob-num js-line-number" data-line-number="5455"></td>
        <td id="LC5455" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5456" class="blob-num js-line-number" data-line-number="5456"></td>
        <td id="LC5456" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>filename_h</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;.h&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5457" class="blob-num js-line-number" data-line-number="5457"></td>
        <td id="LC5457" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> (<span class=pl-c1>False</span>, <span class=pl-s>&#39;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5458" class="blob-num js-line-number" data-line-number="5458"></td>
        <td id="LC5458" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_h</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_h</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s>&#39;.h&#39;</span>)]</td>
      </tr>
      <tr>
        <td id="L5459" class="blob-num js-line-number" data-line-number="5459"></td>
        <td id="LC5459" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>filename_h</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;-inl&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5460" class="blob-num js-line-number" data-line-number="5460"></td>
        <td id="LC5460" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>filename_h</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_h</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s>&#39;-inl&#39;</span>)]</td>
      </tr>
      <tr>
        <td id="L5461" class="blob-num js-line-number" data-line-number="5461"></td>
        <td id="LC5461" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_h</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_h</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;/public/&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5462" class="blob-num js-line-number" data-line-number="5462"></td>
        <td id="LC5462" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filename_h</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_h</span>.<span class=pl-en>replace</span>(<span class=pl-s>&#39;/internal/&#39;</span>, <span class=pl-s>&#39;/&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5463" class="blob-num js-line-number" data-line-number="5463"></td>
        <td id="LC5463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5464" class="blob-num js-line-number" data-line-number="5464"></td>
        <td id="LC5464" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>files_belong_to_same_module</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>.<span class=pl-en>endswith</span>(<span class=pl-s1>filename_h</span>)</td>
      </tr>
      <tr>
        <td id="L5465" class="blob-num js-line-number" data-line-number="5465"></td>
        <td id="LC5465" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>common_path</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L5466" class="blob-num js-line-number" data-line-number="5466"></td>
        <td id="LC5466" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>files_belong_to_same_module</span>:</td>
      </tr>
      <tr>
        <td id="L5467" class="blob-num js-line-number" data-line-number="5467"></td>
        <td id="LC5467" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>common_path</span> <span class=pl-c1>=</span> <span class=pl-s1>filename_cc</span>[:<span class=pl-c1>-</span><span class=pl-en>len</span>(<span class=pl-s1>filename_h</span>)]</td>
      </tr>
      <tr>
        <td id="L5468" class="blob-num js-line-number" data-line-number="5468"></td>
        <td id="LC5468" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>files_belong_to_same_module</span>, <span class=pl-s1>common_path</span></td>
      </tr>
      <tr>
        <td id="L5469" class="blob-num js-line-number" data-line-number="5469"></td>
        <td id="LC5469" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5470" class="blob-num js-line-number" data-line-number="5470"></td>
        <td id="LC5470" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5471" class="blob-num js-line-number" data-line-number="5471"></td>
        <td id="LC5471" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>UpdateIncludeState</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>include_dict</span>, <span class=pl-s1>io</span><span class=pl-c1>=</span><span class=pl-s1>codecs</span>):</td>
      </tr>
      <tr>
        <td id="L5472" class="blob-num js-line-number" data-line-number="5472"></td>
        <td id="LC5472" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Fill up the include_dict with new includes found from the file.</span></td>
      </tr>
      <tr>
        <td id="L5473" class="blob-num js-line-number" data-line-number="5473"></td>
        <td id="LC5473" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5474" class="blob-num js-line-number" data-line-number="5474"></td>
        <td id="LC5474" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5475" class="blob-num js-line-number" data-line-number="5475"></td>
        <td id="LC5475" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: the name of the header to read.</span></td>
      </tr>
      <tr>
        <td id="L5476" class="blob-num js-line-number" data-line-number="5476"></td>
        <td id="LC5476" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include_dict: a dictionary in which the headers are inserted.</span></td>
      </tr>
      <tr>
        <td id="L5477" class="blob-num js-line-number" data-line-number="5477"></td>
        <td id="LC5477" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    io: The io factory to use to read the file. Provided for testability.</span></td>
      </tr>
      <tr>
        <td id="L5478" class="blob-num js-line-number" data-line-number="5478"></td>
        <td id="LC5478" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5479" class="blob-num js-line-number" data-line-number="5479"></td>
        <td id="LC5479" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5480" class="blob-num js-line-number" data-line-number="5480"></td>
        <td id="LC5480" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if a header was successfully added. False otherwise.</span></td>
      </tr>
      <tr>
        <td id="L5481" class="blob-num js-line-number" data-line-number="5481"></td>
        <td id="LC5481" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5482" class="blob-num js-line-number" data-line-number="5482"></td>
        <td id="LC5482" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>headerfile</span> <span class=pl-c1>=</span> <span class=pl-c1>None</span></td>
      </tr>
      <tr>
        <td id="L5483" class="blob-num js-line-number" data-line-number="5483"></td>
        <td id="LC5483" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L5484" class="blob-num js-line-number" data-line-number="5484"></td>
        <td id="LC5484" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>headerfile</span> <span class=pl-c1>=</span> <span class=pl-s1>io</span>.<span class=pl-en>open</span>(<span class=pl-s1>filename</span>, <span class=pl-s>&#39;r&#39;</span>, <span class=pl-s>&#39;utf8&#39;</span>, <span class=pl-s>&#39;replace&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5485" class="blob-num js-line-number" data-line-number="5485"></td>
        <td id="LC5485" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>except</span> <span class=pl-v>IOError</span>:</td>
      </tr>
      <tr>
        <td id="L5486" class="blob-num js-line-number" data-line-number="5486"></td>
        <td id="LC5486" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5487" class="blob-num js-line-number" data-line-number="5487"></td>
        <td id="LC5487" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>linenum</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L5488" class="blob-num js-line-number" data-line-number="5488"></td>
        <td id="LC5488" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-s1>headerfile</span>:</td>
      </tr>
      <tr>
        <td id="L5489" class="blob-num js-line-number" data-line-number="5489"></td>
        <td id="LC5489" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>linenum</span> <span class=pl-c1>+=</span> <span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L5490" class="blob-num js-line-number" data-line-number="5490"></td>
        <td id="LC5490" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>clean_line</span> <span class=pl-c1>=</span> <span class=pl-v>CleanseComments</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5491" class="blob-num js-line-number" data-line-number="5491"></td>
        <td id="LC5491" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_INCLUDE</span>.<span class=pl-en>search</span>(<span class=pl-s1>clean_line</span>)</td>
      </tr>
      <tr>
        <td id="L5492" class="blob-num js-line-number" data-line-number="5492"></td>
        <td id="LC5492" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5493" class="blob-num js-line-number" data-line-number="5493"></td>
        <td id="LC5493" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include</span> <span class=pl-c1>=</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>)</td>
      </tr>
      <tr>
        <td id="L5494" class="blob-num js-line-number" data-line-number="5494"></td>
        <td id="LC5494" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>include_dict</span>.<span class=pl-en>setdefault</span>(<span class=pl-s1>include</span>, <span class=pl-s1>linenum</span>)</td>
      </tr>
      <tr>
        <td id="L5495" class="blob-num js-line-number" data-line-number="5495"></td>
        <td id="LC5495" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5496" class="blob-num js-line-number" data-line-number="5496"></td>
        <td id="LC5496" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5497" class="blob-num js-line-number" data-line-number="5497"></td>
        <td id="LC5497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5498" class="blob-num js-line-number" data-line-number="5498"></td>
        <td id="LC5498" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckForIncludeWhatYouUse</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>,</td>
      </tr>
      <tr>
        <td id="L5499" class="blob-num js-line-number" data-line-number="5499"></td>
        <td id="LC5499" class="blob-code blob-code-inner js-file-line">                              <span class=pl-s1>io</span><span class=pl-c1>=</span><span class=pl-s1>codecs</span>):</td>
      </tr>
      <tr>
        <td id="L5500" class="blob-num js-line-number" data-line-number="5500"></td>
        <td id="LC5500" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Reports for missing stl includes.</span></td>
      </tr>
      <tr>
        <td id="L5501" class="blob-num js-line-number" data-line-number="5501"></td>
        <td id="LC5501" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5502" class="blob-num js-line-number" data-line-number="5502"></td>
        <td id="LC5502" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  This function will output warnings to make sure you are including the headers</span></td>
      </tr>
      <tr>
        <td id="L5503" class="blob-num js-line-number" data-line-number="5503"></td>
        <td id="LC5503" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  necessary for the stl containers and functions that you use. We only give one</span></td>
      </tr>
      <tr>
        <td id="L5504" class="blob-num js-line-number" data-line-number="5504"></td>
        <td id="LC5504" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  reason to include a header. For example, if you use both equal_to&lt;&gt; and</span></td>
      </tr>
      <tr>
        <td id="L5505" class="blob-num js-line-number" data-line-number="5505"></td>
        <td id="LC5505" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  less&lt;&gt; in a .h file, only one (the latter in the file) of these will be</span></td>
      </tr>
      <tr>
        <td id="L5506" class="blob-num js-line-number" data-line-number="5506"></td>
        <td id="LC5506" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  reported as a reason to include the &lt;functional&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5507" class="blob-num js-line-number" data-line-number="5507"></td>
        <td id="LC5507" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5508" class="blob-num js-line-number" data-line-number="5508"></td>
        <td id="LC5508" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5509" class="blob-num js-line-number" data-line-number="5509"></td>
        <td id="LC5509" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5510" class="blob-num js-line-number" data-line-number="5510"></td>
        <td id="LC5510" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5511" class="blob-num js-line-number" data-line-number="5511"></td>
        <td id="LC5511" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include_state: An _IncludeState instance.</span></td>
      </tr>
      <tr>
        <td id="L5512" class="blob-num js-line-number" data-line-number="5512"></td>
        <td id="LC5512" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5513" class="blob-num js-line-number" data-line-number="5513"></td>
        <td id="LC5513" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    io: The IO factory to use to read the header file. Provided for unittest</span></td>
      </tr>
      <tr>
        <td id="L5514" class="blob-num js-line-number" data-line-number="5514"></td>
        <td id="LC5514" class="blob-code blob-code-inner js-file-line"><span class=pl-s>        injection.</span></td>
      </tr>
      <tr>
        <td id="L5515" class="blob-num js-line-number" data-line-number="5515"></td>
        <td id="LC5515" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5516" class="blob-num js-line-number" data-line-number="5516"></td>
        <td id="LC5516" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>required</span> <span class=pl-c1>=</span> {}  <span class=pl-c># A map of header name to linenumber and the template entity.</span></td>
      </tr>
      <tr>
        <td id="L5517" class="blob-num js-line-number" data-line-number="5517"></td>
        <td id="LC5517" class="blob-code blob-code-inner js-file-line">                 <span class=pl-c># Example of required: { &#39;&lt;functional&gt;&#39;: (1219, &#39;less&lt;&gt;&#39;) }</span></td>
      </tr>
      <tr>
        <td id="L5518" class="blob-num js-line-number" data-line-number="5518"></td>
        <td id="LC5518" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5519" class="blob-num js-line-number" data-line-number="5519"></td>
        <td id="LC5519" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>()):</td>
      </tr>
      <tr>
        <td id="L5520" class="blob-num js-line-number" data-line-number="5520"></td>
        <td id="LC5520" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5521" class="blob-num js-line-number" data-line-number="5521"></td>
        <td id="LC5521" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>line</span> <span class=pl-c1>or</span> <span class=pl-s1>line</span>[<span class=pl-c1>0</span>] <span class=pl-c1>==</span> <span class=pl-s>&#39;#&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L5522" class="blob-num js-line-number" data-line-number="5522"></td>
        <td id="LC5522" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L5523" class="blob-num js-line-number" data-line-number="5523"></td>
        <td id="LC5523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5524" class="blob-num js-line-number" data-line-number="5524"></td>
        <td id="LC5524" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># String is special -- it is a non-templatized type in STL.</span></td>
      </tr>
      <tr>
        <td id="L5525" class="blob-num js-line-number" data-line-number="5525"></td>
        <td id="LC5525" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_STRING</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5526" class="blob-num js-line-number" data-line-number="5526"></td>
        <td id="LC5526" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L5527" class="blob-num js-line-number" data-line-number="5527"></td>
        <td id="LC5527" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Don&#39;t warn about strings in non-STL namespaces:</span></td>
      </tr>
      <tr>
        <td id="L5528" class="blob-num js-line-number" data-line-number="5528"></td>
        <td id="LC5528" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># (We check only the first match per line; good enough.)</span></td>
      </tr>
      <tr>
        <td id="L5529" class="blob-num js-line-number" data-line-number="5529"></td>
        <td id="LC5529" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>prefix</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[:<span class=pl-s1>matched</span>.<span class=pl-en>start</span>()]</td>
      </tr>
      <tr>
        <td id="L5530" class="blob-num js-line-number" data-line-number="5530"></td>
        <td id="LC5530" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>prefix</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;std::&#39;</span>) <span class=pl-c1>or</span> <span class=pl-c1>not</span> <span class=pl-s1>prefix</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;::&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5531" class="blob-num js-line-number" data-line-number="5531"></td>
        <td id="LC5531" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>required</span>[<span class=pl-s>&#39;&lt;string&gt;&#39;</span>] <span class=pl-c1>=</span> (<span class=pl-s1>linenum</span>, <span class=pl-s>&#39;string&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5532" class="blob-num js-line-number" data-line-number="5532"></td>
        <td id="LC5532" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5533" class="blob-num js-line-number" data-line-number="5533"></td>
        <td id="LC5533" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>pattern</span>, <span class=pl-s1>template</span>, <span class=pl-s1>header</span> <span class=pl-c1>in</span> <span class=pl-s1>_re_pattern_headers_maybe_templates</span>:</td>
      </tr>
      <tr>
        <td id="L5534" class="blob-num js-line-number" data-line-number="5534"></td>
        <td id="LC5534" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>pattern</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5535" class="blob-num js-line-number" data-line-number="5535"></td>
        <td id="LC5535" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>required</span>[<span class=pl-s1>header</span>] <span class=pl-c1>=</span> (<span class=pl-s1>linenum</span>, <span class=pl-s1>template</span>)</td>
      </tr>
      <tr>
        <td id="L5536" class="blob-num js-line-number" data-line-number="5536"></td>
        <td id="LC5536" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5537" class="blob-num js-line-number" data-line-number="5537"></td>
        <td id="LC5537" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The following function is just a speed up, no semantics are changed.</span></td>
      </tr>
      <tr>
        <td id="L5538" class="blob-num js-line-number" data-line-number="5538"></td>
        <td id="LC5538" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s>&#39;&lt;&#39;</span> <span class=pl-c1>in</span> <span class=pl-s1>line</span>:  <span class=pl-c># Reduces the cpu time usage by skipping lines.</span></td>
      </tr>
      <tr>
        <td id="L5539" class="blob-num js-line-number" data-line-number="5539"></td>
        <td id="LC5539" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L5540" class="blob-num js-line-number" data-line-number="5540"></td>
        <td id="LC5540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5541" class="blob-num js-line-number" data-line-number="5541"></td>
        <td id="LC5541" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>pattern</span>, <span class=pl-s1>template</span>, <span class=pl-s1>header</span> <span class=pl-c1>in</span> <span class=pl-s1>_re_pattern_templates</span>:</td>
      </tr>
      <tr>
        <td id="L5542" class="blob-num js-line-number" data-line-number="5542"></td>
        <td id="LC5542" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>matched</span> <span class=pl-c1>=</span> <span class=pl-s1>pattern</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5543" class="blob-num js-line-number" data-line-number="5543"></td>
        <td id="LC5543" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>matched</span>:</td>
      </tr>
      <tr>
        <td id="L5544" class="blob-num js-line-number" data-line-number="5544"></td>
        <td id="LC5544" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># Don&#39;t warn about IWYU in non-STL namespaces:</span></td>
      </tr>
      <tr>
        <td id="L5545" class="blob-num js-line-number" data-line-number="5545"></td>
        <td id="LC5545" class="blob-code blob-code-inner js-file-line">        <span class=pl-c># (We check only the first match per line; good enough.)</span></td>
      </tr>
      <tr>
        <td id="L5546" class="blob-num js-line-number" data-line-number="5546"></td>
        <td id="LC5546" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>prefix</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[:<span class=pl-s1>matched</span>.<span class=pl-en>start</span>()]</td>
      </tr>
      <tr>
        <td id="L5547" class="blob-num js-line-number" data-line-number="5547"></td>
        <td id="LC5547" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>if</span> <span class=pl-s1>prefix</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;std::&#39;</span>) <span class=pl-c1>or</span> <span class=pl-c1>not</span> <span class=pl-s1>prefix</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;::&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5548" class="blob-num js-line-number" data-line-number="5548"></td>
        <td id="LC5548" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>required</span>[<span class=pl-s1>header</span>] <span class=pl-c1>=</span> (<span class=pl-s1>linenum</span>, <span class=pl-s1>template</span>)</td>
      </tr>
      <tr>
        <td id="L5549" class="blob-num js-line-number" data-line-number="5549"></td>
        <td id="LC5549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5550" class="blob-num js-line-number" data-line-number="5550"></td>
        <td id="LC5550" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The policy is that if you #include something in foo.h you don&#39;t need to</span></td>
      </tr>
      <tr>
        <td id="L5551" class="blob-num js-line-number" data-line-number="5551"></td>
        <td id="LC5551" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># include it again in foo.cc. Here, we will look at possible includes.</span></td>
      </tr>
      <tr>
        <td id="L5552" class="blob-num js-line-number" data-line-number="5552"></td>
        <td id="LC5552" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Let&#39;s flatten the include_state include_list and copy it into a dictionary.</span></td>
      </tr>
      <tr>
        <td id="L5553" class="blob-num js-line-number" data-line-number="5553"></td>
        <td id="LC5553" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include_dict</span> <span class=pl-c1>=</span> <span class=pl-en>dict</span>([<span class=pl-s1>item</span> <span class=pl-k>for</span> <span class=pl-s1>sublist</span> <span class=pl-c1>in</span> <span class=pl-s1>include_state</span>.<span class=pl-s1>include_list</span></td>
      </tr>
      <tr>
        <td id="L5554" class="blob-num js-line-number" data-line-number="5554"></td>
        <td id="LC5554" class="blob-code blob-code-inner js-file-line">                       <span class=pl-k>for</span> <span class=pl-s1>item</span> <span class=pl-c1>in</span> <span class=pl-s1>sublist</span>])</td>
      </tr>
      <tr>
        <td id="L5555" class="blob-num js-line-number" data-line-number="5555"></td>
        <td id="LC5555" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5556" class="blob-num js-line-number" data-line-number="5556"></td>
        <td id="LC5556" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Did we find the header for this file (if any) and successfully load it?</span></td>
      </tr>
      <tr>
        <td id="L5557" class="blob-num js-line-number" data-line-number="5557"></td>
        <td id="LC5557" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>header_found</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5558" class="blob-num js-line-number" data-line-number="5558"></td>
        <td id="LC5558" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5559" class="blob-num js-line-number" data-line-number="5559"></td>
        <td id="LC5559" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Use the absolute path so that matching works properly.</span></td>
      </tr>
      <tr>
        <td id="L5560" class="blob-num js-line-number" data-line-number="5560"></td>
        <td id="LC5560" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>abs_filename</span> <span class=pl-c1>=</span> <span class=pl-v>FileInfo</span>(<span class=pl-s1>filename</span>).<span class=pl-v>FullName</span>()</td>
      </tr>
      <tr>
        <td id="L5561" class="blob-num js-line-number" data-line-number="5561"></td>
        <td id="LC5561" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5562" class="blob-num js-line-number" data-line-number="5562"></td>
        <td id="LC5562" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># For Emacs&#39;s flymake.</span></td>
      </tr>
      <tr>
        <td id="L5563" class="blob-num js-line-number" data-line-number="5563"></td>
        <td id="LC5563" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If cpplint is invoked from Emacs&#39;s flymake, a temporary file is generated</span></td>
      </tr>
      <tr>
        <td id="L5564" class="blob-num js-line-number" data-line-number="5564"></td>
        <td id="LC5564" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># by flymake and that file name might end with &#39;_flymake.cc&#39;. In that case,</span></td>
      </tr>
      <tr>
        <td id="L5565" class="blob-num js-line-number" data-line-number="5565"></td>
        <td id="LC5565" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># restore original file name here so that the corresponding header file can be</span></td>
      </tr>
      <tr>
        <td id="L5566" class="blob-num js-line-number" data-line-number="5566"></td>
        <td id="LC5566" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># found.</span></td>
      </tr>
      <tr>
        <td id="L5567" class="blob-num js-line-number" data-line-number="5567"></td>
        <td id="LC5567" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># e.g. If the file name is &#39;foo_flymake.cc&#39;, we should search for &#39;foo.h&#39;</span></td>
      </tr>
      <tr>
        <td id="L5568" class="blob-num js-line-number" data-line-number="5568"></td>
        <td id="LC5568" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># instead of &#39;foo_flymake.h&#39;</span></td>
      </tr>
      <tr>
        <td id="L5569" class="blob-num js-line-number" data-line-number="5569"></td>
        <td id="LC5569" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>abs_filename</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>sub</span>(<span class=pl-s>r&#39;_flymake\.cc$&#39;</span>, <span class=pl-s>&#39;.cc&#39;</span>, <span class=pl-s1>abs_filename</span>)</td>
      </tr>
      <tr>
        <td id="L5570" class="blob-num js-line-number" data-line-number="5570"></td>
        <td id="LC5570" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5571" class="blob-num js-line-number" data-line-number="5571"></td>
        <td id="LC5571" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># include_dict is modified during iteration, so we iterate over a copy of</span></td>
      </tr>
      <tr>
        <td id="L5572" class="blob-num js-line-number" data-line-number="5572"></td>
        <td id="LC5572" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># the keys.</span></td>
      </tr>
      <tr>
        <td id="L5573" class="blob-num js-line-number" data-line-number="5573"></td>
        <td id="LC5573" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>header_keys</span> <span class=pl-c1>=</span> <span class=pl-s1>include_dict</span>.<span class=pl-en>keys</span>()</td>
      </tr>
      <tr>
        <td id="L5574" class="blob-num js-line-number" data-line-number="5574"></td>
        <td id="LC5574" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>header</span> <span class=pl-c1>in</span> <span class=pl-s1>header_keys</span>:</td>
      </tr>
      <tr>
        <td id="L5575" class="blob-num js-line-number" data-line-number="5575"></td>
        <td id="LC5575" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>same_module</span>, <span class=pl-s1>common_path</span>) <span class=pl-c1>=</span> <span class=pl-v>FilesBelongToSameModule</span>(<span class=pl-s1>abs_filename</span>, <span class=pl-s1>header</span>)</td>
      </tr>
      <tr>
        <td id="L5576" class="blob-num js-line-number" data-line-number="5576"></td>
        <td id="LC5576" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>fullpath</span> <span class=pl-c1>=</span> <span class=pl-s1>common_path</span> <span class=pl-c1>+</span> <span class=pl-s1>header</span></td>
      </tr>
      <tr>
        <td id="L5577" class="blob-num js-line-number" data-line-number="5577"></td>
        <td id="LC5577" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>same_module</span> <span class=pl-c1>and</span> <span class=pl-v>UpdateIncludeState</span>(<span class=pl-s1>fullpath</span>, <span class=pl-s1>include_dict</span>, <span class=pl-s1>io</span>):</td>
      </tr>
      <tr>
        <td id="L5578" class="blob-num js-line-number" data-line-number="5578"></td>
        <td id="LC5578" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>header_found</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5579" class="blob-num js-line-number" data-line-number="5579"></td>
        <td id="LC5579" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5580" class="blob-num js-line-number" data-line-number="5580"></td>
        <td id="LC5580" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If we can&#39;t find the header file for a .cc, assume it&#39;s because we don&#39;t</span></td>
      </tr>
      <tr>
        <td id="L5581" class="blob-num js-line-number" data-line-number="5581"></td>
        <td id="LC5581" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># know where to look. In that case we&#39;ll give up as we&#39;re not sure they</span></td>
      </tr>
      <tr>
        <td id="L5582" class="blob-num js-line-number" data-line-number="5582"></td>
        <td id="LC5582" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># didn&#39;t include it in the .h file.</span></td>
      </tr>
      <tr>
        <td id="L5583" class="blob-num js-line-number" data-line-number="5583"></td>
        <td id="LC5583" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): Do a better job of finding .h files so we are confident that</span></td>
      </tr>
      <tr>
        <td id="L5584" class="blob-num js-line-number" data-line-number="5584"></td>
        <td id="LC5584" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># not having the .h file means there isn&#39;t one.</span></td>
      </tr>
      <tr>
        <td id="L5585" class="blob-num js-line-number" data-line-number="5585"></td>
        <td id="LC5585" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>filename</span>.<span class=pl-en>endswith</span>(<span class=pl-s>&#39;.cc&#39;</span>) <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-s1>header_found</span>:</td>
      </tr>
      <tr>
        <td id="L5586" class="blob-num js-line-number" data-line-number="5586"></td>
        <td id="LC5586" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5587" class="blob-num js-line-number" data-line-number="5587"></td>
        <td id="LC5587" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5588" class="blob-num js-line-number" data-line-number="5588"></td>
        <td id="LC5588" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># All the lines have been processed, report the errors found.</span></td>
      </tr>
      <tr>
        <td id="L5589" class="blob-num js-line-number" data-line-number="5589"></td>
        <td id="LC5589" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>required_header_unstripped</span> <span class=pl-c1>in</span> <span class=pl-s1>required</span>:</td>
      </tr>
      <tr>
        <td id="L5590" class="blob-num js-line-number" data-line-number="5590"></td>
        <td id="LC5590" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>template</span> <span class=pl-c1>=</span> <span class=pl-s1>required</span>[<span class=pl-s1>required_header_unstripped</span>][<span class=pl-c1>1</span>]</td>
      </tr>
      <tr>
        <td id="L5591" class="blob-num js-line-number" data-line-number="5591"></td>
        <td id="LC5591" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>required_header_unstripped</span>.<span class=pl-en>strip</span>(<span class=pl-s>&#39;&lt;&gt;&quot;&#39;</span>) <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>include_dict</span>:</td>
      </tr>
      <tr>
        <td id="L5592" class="blob-num js-line-number" data-line-number="5592"></td>
        <td id="LC5592" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>required</span>[<span class=pl-s1>required_header_unstripped</span>][<span class=pl-c1>0</span>],</td>
      </tr>
      <tr>
        <td id="L5593" class="blob-num js-line-number" data-line-number="5593"></td>
        <td id="LC5593" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;build/include_what_you_use&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5594" class="blob-num js-line-number" data-line-number="5594"></td>
        <td id="LC5594" class="blob-code blob-code-inner js-file-line">            <span class=pl-s>&#39;Add #include &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>required_header_unstripped</span> <span class=pl-c1>+</span> <span class=pl-s>&#39; for &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>template</span>)</td>
      </tr>
      <tr>
        <td id="L5595" class="blob-num js-line-number" data-line-number="5595"></td>
        <td id="LC5595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5596" class="blob-num js-line-number" data-line-number="5596"></td>
        <td id="LC5596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5597" class="blob-num js-line-number" data-line-number="5597"></td>
        <td id="LC5597" class="blob-code blob-code-inner js-file-line"><span class=pl-s1>_RE_PATTERN_EXPLICIT_MAKEPAIR</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s>r&#39;\bmake_pair\s*&lt;&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5598" class="blob-num js-line-number" data-line-number="5598"></td>
        <td id="LC5598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5599" class="blob-num js-line-number" data-line-number="5599"></td>
        <td id="LC5599" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5600" class="blob-num js-line-number" data-line-number="5600"></td>
        <td id="LC5600" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckMakePairUsesDeduction</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5601" class="blob-num js-line-number" data-line-number="5601"></td>
        <td id="LC5601" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check that make_pair&#39;s template arguments are deduced.</span></td>
      </tr>
      <tr>
        <td id="L5602" class="blob-num js-line-number" data-line-number="5602"></td>
        <td id="LC5602" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5603" class="blob-num js-line-number" data-line-number="5603"></td>
        <td id="LC5603" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  G++ 4.6 in C++11 mode fails badly if make_pair&#39;s template arguments are</span></td>
      </tr>
      <tr>
        <td id="L5604" class="blob-num js-line-number" data-line-number="5604"></td>
        <td id="LC5604" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  specified explicitly, and such use isn&#39;t intended in any case.</span></td>
      </tr>
      <tr>
        <td id="L5605" class="blob-num js-line-number" data-line-number="5605"></td>
        <td id="LC5605" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5606" class="blob-num js-line-number" data-line-number="5606"></td>
        <td id="LC5606" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5607" class="blob-num js-line-number" data-line-number="5607"></td>
        <td id="LC5607" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5608" class="blob-num js-line-number" data-line-number="5608"></td>
        <td id="LC5608" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5609" class="blob-num js-line-number" data-line-number="5609"></td>
        <td id="LC5609" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5610" class="blob-num js-line-number" data-line-number="5610"></td>
        <td id="LC5610" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5611" class="blob-num js-line-number" data-line-number="5611"></td>
        <td id="LC5611" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5612" class="blob-num js-line-number" data-line-number="5612"></td>
        <td id="LC5612" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5613" class="blob-num js-line-number" data-line-number="5613"></td>
        <td id="LC5613" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-s1>_RE_PATTERN_EXPLICIT_MAKEPAIR</span>.<span class=pl-en>search</span>(<span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5614" class="blob-num js-line-number" data-line-number="5614"></td>
        <td id="LC5614" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5615" class="blob-num js-line-number" data-line-number="5615"></td>
        <td id="LC5615" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/explicit_make_pair&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5616" class="blob-num js-line-number" data-line-number="5616"></td>
        <td id="LC5616" class="blob-code blob-code-inner js-file-line">          <span class=pl-c1>4</span>,  <span class=pl-c># 4 = high confidence</span></td>
      </tr>
      <tr>
        <td id="L5617" class="blob-num js-line-number" data-line-number="5617"></td>
        <td id="LC5617" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;For C++11-compatibility, omit template arguments from make_pair&#39;</span></td>
      </tr>
      <tr>
        <td id="L5618" class="blob-num js-line-number" data-line-number="5618"></td>
        <td id="LC5618" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39; OR use pair directly OR if appropriate, construct a pair directly&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5619" class="blob-num js-line-number" data-line-number="5619"></td>
        <td id="LC5619" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5620" class="blob-num js-line-number" data-line-number="5620"></td>
        <td id="LC5620" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5621" class="blob-num js-line-number" data-line-number="5621"></td>
        <td id="LC5621" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckRedundantVirtual</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5622" class="blob-num js-line-number" data-line-number="5622"></td>
        <td id="LC5622" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if line contains a redundant &quot;virtual&quot; function-specifier.</span></td>
      </tr>
      <tr>
        <td id="L5623" class="blob-num js-line-number" data-line-number="5623"></td>
        <td id="LC5623" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5624" class="blob-num js-line-number" data-line-number="5624"></td>
        <td id="LC5624" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5625" class="blob-num js-line-number" data-line-number="5625"></td>
        <td id="LC5625" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5626" class="blob-num js-line-number" data-line-number="5626"></td>
        <td id="LC5626" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5627" class="blob-num js-line-number" data-line-number="5627"></td>
        <td id="LC5627" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5628" class="blob-num js-line-number" data-line-number="5628"></td>
        <td id="LC5628" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5629" class="blob-num js-line-number" data-line-number="5629"></td>
        <td id="LC5629" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5630" class="blob-num js-line-number" data-line-number="5630"></td>
        <td id="LC5630" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Look for &quot;virtual&quot; on current line.</span></td>
      </tr>
      <tr>
        <td id="L5631" class="blob-num js-line-number" data-line-number="5631"></td>
        <td id="LC5631" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5632" class="blob-num js-line-number" data-line-number="5632"></td>
        <td id="LC5632" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>virtual</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^(.*)(\bvirtual\b)(.*)$&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5633" class="blob-num js-line-number" data-line-number="5633"></td>
        <td id="LC5633" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>virtual</span>: <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5634" class="blob-num js-line-number" data-line-number="5634"></td>
        <td id="LC5634" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5635" class="blob-num js-line-number" data-line-number="5635"></td>
        <td id="LC5635" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Ignore &quot;virtual&quot; keywords that are near access-specifiers.  These</span></td>
      </tr>
      <tr>
        <td id="L5636" class="blob-num js-line-number" data-line-number="5636"></td>
        <td id="LC5636" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># are only used in class base-specifier and do not apply to member</span></td>
      </tr>
      <tr>
        <td id="L5637" class="blob-num js-line-number" data-line-number="5637"></td>
        <td id="LC5637" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># functions.</span></td>
      </tr>
      <tr>
        <td id="L5638" class="blob-num js-line-number" data-line-number="5638"></td>
        <td id="LC5638" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> (<span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(public|protected|private)\s+$&#39;</span>, <span class=pl-s1>virtual</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)) <span class=pl-c1>or</span></td>
      </tr>
      <tr>
        <td id="L5639" class="blob-num js-line-number" data-line-number="5639"></td>
        <td id="LC5639" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s+(public|protected|private)\b&#39;</span>, <span class=pl-s1>virtual</span>.<span class=pl-en>group</span>(<span class=pl-c1>3</span>))):</td>
      </tr>
      <tr>
        <td id="L5640" class="blob-num js-line-number" data-line-number="5640"></td>
        <td id="LC5640" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5641" class="blob-num js-line-number" data-line-number="5641"></td>
        <td id="LC5641" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5642" class="blob-num js-line-number" data-line-number="5642"></td>
        <td id="LC5642" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Ignore the &quot;virtual&quot; keyword from virtual base classes.  Usually</span></td>
      </tr>
      <tr>
        <td id="L5643" class="blob-num js-line-number" data-line-number="5643"></td>
        <td id="LC5643" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># there is a column on the same line in these cases (virtual base</span></td>
      </tr>
      <tr>
        <td id="L5644" class="blob-num js-line-number" data-line-number="5644"></td>
        <td id="LC5644" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># classes are rare in google3 because multiple inheritance is rare).</span></td>
      </tr>
      <tr>
        <td id="L5645" class="blob-num js-line-number" data-line-number="5645"></td>
        <td id="LC5645" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^.*[^:]:[^:].*$&#39;</span>, <span class=pl-s1>line</span>): <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5646" class="blob-num js-line-number" data-line-number="5646"></td>
        <td id="LC5646" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5647" class="blob-num js-line-number" data-line-number="5647"></td>
        <td id="LC5647" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Look for the next opening parenthesis.  This is the start of the</span></td>
      </tr>
      <tr>
        <td id="L5648" class="blob-num js-line-number" data-line-number="5648"></td>
        <td id="LC5648" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># parameter list (possibly on the next line shortly after virtual).</span></td>
      </tr>
      <tr>
        <td id="L5649" class="blob-num js-line-number" data-line-number="5649"></td>
        <td id="LC5649" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># TODO(unknown): doesn&#39;t work if there are virtual functions with</span></td>
      </tr>
      <tr>
        <td id="L5650" class="blob-num js-line-number" data-line-number="5650"></td>
        <td id="LC5650" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># decltype() or other things that use parentheses, but csearch suggests</span></td>
      </tr>
      <tr>
        <td id="L5651" class="blob-num js-line-number" data-line-number="5651"></td>
        <td id="LC5651" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># that this is rare.</span></td>
      </tr>
      <tr>
        <td id="L5652" class="blob-num js-line-number" data-line-number="5652"></td>
        <td id="LC5652" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>end_col</span> <span class=pl-c1>=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L5653" class="blob-num js-line-number" data-line-number="5653"></td>
        <td id="LC5653" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>end_line</span> <span class=pl-c1>=</span> <span class=pl-c1>-</span><span class=pl-c1>1</span></td>
      </tr>
      <tr>
        <td id="L5654" class="blob-num js-line-number" data-line-number="5654"></td>
        <td id="LC5654" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>start_col</span> <span class=pl-c1>=</span> <span class=pl-en>len</span>(<span class=pl-s1>virtual</span>.<span class=pl-en>group</span>(<span class=pl-c1>2</span>))</td>
      </tr>
      <tr>
        <td id="L5655" class="blob-num js-line-number" data-line-number="5655"></td>
        <td id="LC5655" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>start_line</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>linenum</span>, <span class=pl-en>min</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>3</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>())):</td>
      </tr>
      <tr>
        <td id="L5656" class="blob-num js-line-number" data-line-number="5656"></td>
        <td id="LC5656" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>start_line</span>][<span class=pl-s1>start_col</span>:]</td>
      </tr>
      <tr>
        <td id="L5657" class="blob-num js-line-number" data-line-number="5657"></td>
        <td id="LC5657" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>parameter_list</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^([^(]*)\(&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5658" class="blob-num js-line-number" data-line-number="5658"></td>
        <td id="LC5658" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>parameter_list</span>:</td>
      </tr>
      <tr>
        <td id="L5659" class="blob-num js-line-number" data-line-number="5659"></td>
        <td id="LC5659" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Match parentheses to find the end of the parameter list</span></td>
      </tr>
      <tr>
        <td id="L5660" class="blob-num js-line-number" data-line-number="5660"></td>
        <td id="LC5660" class="blob-code blob-code-inner js-file-line">      (<span class=pl-s1>_</span>, <span class=pl-s1>end_line</span>, <span class=pl-s1>end_col</span>) <span class=pl-c1>=</span> <span class=pl-v>CloseExpression</span>(</td>
      </tr>
      <tr>
        <td id="L5661" class="blob-num js-line-number" data-line-number="5661"></td>
        <td id="LC5661" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>clean_lines</span>, <span class=pl-s1>start_line</span>, <span class=pl-s1>start_col</span> <span class=pl-c1>+</span> <span class=pl-en>len</span>(<span class=pl-s1>parameter_list</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L5662" class="blob-num js-line-number" data-line-number="5662"></td>
        <td id="LC5662" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L5663" class="blob-num js-line-number" data-line-number="5663"></td>
        <td id="LC5663" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>start_col</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L5664" class="blob-num js-line-number" data-line-number="5664"></td>
        <td id="LC5664" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5665" class="blob-num js-line-number" data-line-number="5665"></td>
        <td id="LC5665" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>end_col</span> <span class=pl-c1>&lt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5666" class="blob-num js-line-number" data-line-number="5666"></td>
        <td id="LC5666" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span>  <span class=pl-c># Couldn&#39;t find end of parameter list, give up</span></td>
      </tr>
      <tr>
        <td id="L5667" class="blob-num js-line-number" data-line-number="5667"></td>
        <td id="LC5667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5668" class="blob-num js-line-number" data-line-number="5668"></td>
        <td id="LC5668" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Look for &quot;override&quot; or &quot;final&quot; after the parameter list</span></td>
      </tr>
      <tr>
        <td id="L5669" class="blob-num js-line-number" data-line-number="5669"></td>
        <td id="LC5669" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># (possibly on the next few lines).</span></td>
      </tr>
      <tr>
        <td id="L5670" class="blob-num js-line-number" data-line-number="5670"></td>
        <td id="LC5670" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>i</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>end_line</span>, <span class=pl-en>min</span>(<span class=pl-s1>end_line</span> <span class=pl-c1>+</span> <span class=pl-c1>3</span>, <span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>())):</td>
      </tr>
      <tr>
        <td id="L5671" class="blob-num js-line-number" data-line-number="5671"></td>
        <td id="LC5671" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>i</span>][<span class=pl-s1>end_col</span>:]</td>
      </tr>
      <tr>
        <td id="L5672" class="blob-num js-line-number" data-line-number="5672"></td>
        <td id="LC5672" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>match</span> <span class=pl-c1>=</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\b(override|final)\b&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5673" class="blob-num js-line-number" data-line-number="5673"></td>
        <td id="LC5673" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>match</span>:</td>
      </tr>
      <tr>
        <td id="L5674" class="blob-num js-line-number" data-line-number="5674"></td>
        <td id="LC5674" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/inheritance&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5675" class="blob-num js-line-number" data-line-number="5675"></td>
        <td id="LC5675" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s>&#39;&quot;virtual&quot; is redundant since function is &#39;</span></td>
      </tr>
      <tr>
        <td id="L5676" class="blob-num js-line-number" data-line-number="5676"></td>
        <td id="LC5676" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;already declared as &quot;%s&quot;&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>match</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>)))</td>
      </tr>
      <tr>
        <td id="L5677" class="blob-num js-line-number" data-line-number="5677"></td>
        <td id="LC5677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5678" class="blob-num js-line-number" data-line-number="5678"></td>
        <td id="LC5678" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Set end_col to check whole lines after we are done with the</span></td>
      </tr>
      <tr>
        <td id="L5679" class="blob-num js-line-number" data-line-number="5679"></td>
        <td id="LC5679" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># first line.</span></td>
      </tr>
      <tr>
        <td id="L5680" class="blob-num js-line-number" data-line-number="5680"></td>
        <td id="LC5680" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>end_col</span> <span class=pl-c1>=</span> <span class=pl-c1>0</span></td>
      </tr>
      <tr>
        <td id="L5681" class="blob-num js-line-number" data-line-number="5681"></td>
        <td id="LC5681" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;[^\w]\s*$&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5682" class="blob-num js-line-number" data-line-number="5682"></td>
        <td id="LC5682" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span></td>
      </tr>
      <tr>
        <td id="L5683" class="blob-num js-line-number" data-line-number="5683"></td>
        <td id="LC5683" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5684" class="blob-num js-line-number" data-line-number="5684"></td>
        <td id="LC5684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5685" class="blob-num js-line-number" data-line-number="5685"></td>
        <td id="LC5685" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckRedundantOverrideOrFinal</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5686" class="blob-num js-line-number" data-line-number="5686"></td>
        <td id="LC5686" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Check if line contains a redundant &quot;override&quot; or &quot;final&quot; virt-specifier.</span></td>
      </tr>
      <tr>
        <td id="L5687" class="blob-num js-line-number" data-line-number="5687"></td>
        <td id="LC5687" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5688" class="blob-num js-line-number" data-line-number="5688"></td>
        <td id="LC5688" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5689" class="blob-num js-line-number" data-line-number="5689"></td>
        <td id="LC5689" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5690" class="blob-num js-line-number" data-line-number="5690"></td>
        <td id="LC5690" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5691" class="blob-num js-line-number" data-line-number="5691"></td>
        <td id="LC5691" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5692" class="blob-num js-line-number" data-line-number="5692"></td>
        <td id="LC5692" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5693" class="blob-num js-line-number" data-line-number="5693"></td>
        <td id="LC5693" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5694" class="blob-num js-line-number" data-line-number="5694"></td>
        <td id="LC5694" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Look for closing parenthesis nearby.  We need one to confirm where</span></td>
      </tr>
      <tr>
        <td id="L5695" class="blob-num js-line-number" data-line-number="5695"></td>
        <td id="LC5695" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># the declarator ends and where the virt-specifier starts to avoid</span></td>
      </tr>
      <tr>
        <td id="L5696" class="blob-num js-line-number" data-line-number="5696"></td>
        <td id="LC5696" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># false positives.</span></td>
      </tr>
      <tr>
        <td id="L5697" class="blob-num js-line-number" data-line-number="5697"></td>
        <td id="LC5697" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5698" class="blob-num js-line-number" data-line-number="5698"></td>
        <td id="LC5698" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>declarator_end</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>rfind</span>(<span class=pl-s>&#39;)&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5699" class="blob-num js-line-number" data-line-number="5699"></td>
        <td id="LC5699" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>declarator_end</span> <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5700" class="blob-num js-line-number" data-line-number="5700"></td>
        <td id="LC5700" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>[<span class=pl-s1>declarator_end</span>:]</td>
      </tr>
      <tr>
        <td id="L5701" class="blob-num js-line-number" data-line-number="5701"></td>
        <td id="LC5701" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5702" class="blob-num js-line-number" data-line-number="5702"></td>
        <td id="LC5702" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>linenum</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span> <span class=pl-c1>-</span> <span class=pl-c1>1</span>].<span class=pl-en>rfind</span>(<span class=pl-s>&#39;)&#39;</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L5703" class="blob-num js-line-number" data-line-number="5703"></td>
        <td id="LC5703" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>fragment</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span></td>
      </tr>
      <tr>
        <td id="L5704" class="blob-num js-line-number" data-line-number="5704"></td>
        <td id="LC5704" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5705" class="blob-num js-line-number" data-line-number="5705"></td>
        <td id="LC5705" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5706" class="blob-num js-line-number" data-line-number="5706"></td>
        <td id="LC5706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5707" class="blob-num js-line-number" data-line-number="5707"></td>
        <td id="LC5707" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check that at most one of &quot;override&quot; or &quot;final&quot; is present, not both</span></td>
      </tr>
      <tr>
        <td id="L5708" class="blob-num js-line-number" data-line-number="5708"></td>
        <td id="LC5708" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\boverride\b&#39;</span>, <span class=pl-s1>fragment</span>) <span class=pl-c1>and</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bfinal\b&#39;</span>, <span class=pl-s1>fragment</span>):</td>
      </tr>
      <tr>
        <td id="L5709" class="blob-num js-line-number" data-line-number="5709"></td>
        <td id="LC5709" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;readability/inheritance&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5710" class="blob-num js-line-number" data-line-number="5710"></td>
        <td id="LC5710" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s>&#39;&quot;override&quot; is redundant since function is &#39;</span></td>
      </tr>
      <tr>
        <td id="L5711" class="blob-num js-line-number" data-line-number="5711"></td>
        <td id="LC5711" class="blob-code blob-code-inner js-file-line">           <span class=pl-s>&#39;already declared as &quot;final&quot;&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L5712" class="blob-num js-line-number" data-line-number="5712"></td>
        <td id="LC5712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5713" class="blob-num js-line-number" data-line-number="5713"></td>
        <td id="LC5713" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5714" class="blob-num js-line-number" data-line-number="5714"></td>
        <td id="LC5714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5715" class="blob-num js-line-number" data-line-number="5715"></td>
        <td id="LC5715" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5716" class="blob-num js-line-number" data-line-number="5716"></td>
        <td id="LC5716" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Returns true if we are at a new block, and it is directly</span></td>
      </tr>
      <tr>
        <td id="L5717" class="blob-num js-line-number" data-line-number="5717"></td>
        <td id="LC5717" class="blob-code blob-code-inner js-file-line"><span class=pl-c># inside of a namespace.</span></td>
      </tr>
      <tr>
        <td id="L5718" class="blob-num js-line-number" data-line-number="5718"></td>
        <td id="LC5718" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>IsBlockInNameSpace</span>(<span class=pl-s1>nesting_state</span>, <span class=pl-s1>is_forward_declaration</span>):</td>
      </tr>
      <tr>
        <td id="L5719" class="blob-num js-line-number" data-line-number="5719"></td>
        <td id="LC5719" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Checks that the new block is directly in a namespace.</span></td>
      </tr>
      <tr>
        <td id="L5720" class="blob-num js-line-number" data-line-number="5720"></td>
        <td id="LC5720" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5721" class="blob-num js-line-number" data-line-number="5721"></td>
        <td id="LC5721" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5722" class="blob-num js-line-number" data-line-number="5722"></td>
        <td id="LC5722" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: The _NestingState object that contains info about our state.</span></td>
      </tr>
      <tr>
        <td id="L5723" class="blob-num js-line-number" data-line-number="5723"></td>
        <td id="LC5723" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    is_forward_declaration: If the class is a forward declared class.</span></td>
      </tr>
      <tr>
        <td id="L5724" class="blob-num js-line-number" data-line-number="5724"></td>
        <td id="LC5724" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5725" class="blob-num js-line-number" data-line-number="5725"></td>
        <td id="LC5725" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    Whether or not the new block is directly in a namespace.</span></td>
      </tr>
      <tr>
        <td id="L5726" class="blob-num js-line-number" data-line-number="5726"></td>
        <td id="LC5726" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5727" class="blob-num js-line-number" data-line-number="5727"></td>
        <td id="LC5727" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>is_forward_declaration</span>:</td>
      </tr>
      <tr>
        <td id="L5728" class="blob-num js-line-number" data-line-number="5728"></td>
        <td id="LC5728" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-en>len</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>) <span class=pl-c1>&gt;=</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span> (</td>
      </tr>
      <tr>
        <td id="L5729" class="blob-num js-line-number" data-line-number="5729"></td>
        <td id="LC5729" class="blob-code blob-code-inner js-file-line">        <span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>], <span class=pl-s1>_NamespaceInfo</span>)):</td>
      </tr>
      <tr>
        <td id="L5730" class="blob-num js-line-number" data-line-number="5730"></td>
        <td id="LC5730" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5731" class="blob-num js-line-number" data-line-number="5731"></td>
        <td id="LC5731" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L5732" class="blob-num js-line-number" data-line-number="5732"></td>
        <td id="LC5732" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5733" class="blob-num js-line-number" data-line-number="5733"></td>
        <td id="LC5733" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5734" class="blob-num js-line-number" data-line-number="5734"></td>
        <td id="LC5734" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> (<span class=pl-en>len</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>) <span class=pl-c1>&gt;</span> <span class=pl-c1>1</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5735" class="blob-num js-line-number" data-line-number="5735"></td>
        <td id="LC5735" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>1</span>].<span class=pl-s1>check_namespace_indentation</span> <span class=pl-c1>and</span></td>
      </tr>
      <tr>
        <td id="L5736" class="blob-num js-line-number" data-line-number="5736"></td>
        <td id="LC5736" class="blob-code blob-code-inner js-file-line">          <span class=pl-en>isinstance</span>(<span class=pl-s1>nesting_state</span>.<span class=pl-s1>stack</span>[<span class=pl-c1>-</span><span class=pl-c1>2</span>], <span class=pl-s1>_NamespaceInfo</span>))</td>
      </tr>
      <tr>
        <td id="L5737" class="blob-num js-line-number" data-line-number="5737"></td>
        <td id="LC5737" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5738" class="blob-num js-line-number" data-line-number="5738"></td>
        <td id="LC5738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5739" class="blob-num js-line-number" data-line-number="5739"></td>
        <td id="LC5739" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ShouldCheckNamespaceIndentation</span>(<span class=pl-s1>nesting_state</span>, <span class=pl-s1>is_namespace_indent_item</span>,</td>
      </tr>
      <tr>
        <td id="L5740" class="blob-num js-line-number" data-line-number="5740"></td>
        <td id="LC5740" class="blob-code blob-code-inner js-file-line">                                    <span class=pl-s1>raw_lines_no_comments</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5741" class="blob-num js-line-number" data-line-number="5741"></td>
        <td id="LC5741" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;This method determines if we should apply our namespace indentation check.</span></td>
      </tr>
      <tr>
        <td id="L5742" class="blob-num js-line-number" data-line-number="5742"></td>
        <td id="LC5742" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5743" class="blob-num js-line-number" data-line-number="5743"></td>
        <td id="LC5743" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5744" class="blob-num js-line-number" data-line-number="5744"></td>
        <td id="LC5744" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: The current nesting state.</span></td>
      </tr>
      <tr>
        <td id="L5745" class="blob-num js-line-number" data-line-number="5745"></td>
        <td id="LC5745" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    is_namespace_indent_item: If we just put a new class on the stack, True.</span></td>
      </tr>
      <tr>
        <td id="L5746" class="blob-num js-line-number" data-line-number="5746"></td>
        <td id="LC5746" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      If the top of the stack is not a class, or we did not recently</span></td>
      </tr>
      <tr>
        <td id="L5747" class="blob-num js-line-number" data-line-number="5747"></td>
        <td id="LC5747" class="blob-code blob-code-inner js-file-line"><span class=pl-s>      add the class, False.</span></td>
      </tr>
      <tr>
        <td id="L5748" class="blob-num js-line-number" data-line-number="5748"></td>
        <td id="LC5748" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    raw_lines_no_comments: The lines without the comments.</span></td>
      </tr>
      <tr>
        <td id="L5749" class="blob-num js-line-number" data-line-number="5749"></td>
        <td id="LC5749" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The current line number we are processing.</span></td>
      </tr>
      <tr>
        <td id="L5750" class="blob-num js-line-number" data-line-number="5750"></td>
        <td id="LC5750" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5751" class="blob-num js-line-number" data-line-number="5751"></td>
        <td id="LC5751" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5752" class="blob-num js-line-number" data-line-number="5752"></td>
        <td id="LC5752" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    True if we should apply our namespace indentation check. Currently, it</span></td>
      </tr>
      <tr>
        <td id="L5753" class="blob-num js-line-number" data-line-number="5753"></td>
        <td id="LC5753" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    only works for classes and namespaces inside of a namespace.</span></td>
      </tr>
      <tr>
        <td id="L5754" class="blob-num js-line-number" data-line-number="5754"></td>
        <td id="LC5754" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5755" class="blob-num js-line-number" data-line-number="5755"></td>
        <td id="LC5755" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5756" class="blob-num js-line-number" data-line-number="5756"></td>
        <td id="LC5756" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>is_forward_declaration</span> <span class=pl-c1>=</span> <span class=pl-v>IsForwardClassDeclaration</span>(<span class=pl-s1>raw_lines_no_comments</span>,</td>
      </tr>
      <tr>
        <td id="L5757" class="blob-num js-line-number" data-line-number="5757"></td>
        <td id="LC5757" class="blob-code blob-code-inner js-file-line">                                                     <span class=pl-s1>linenum</span>)</td>
      </tr>
      <tr>
        <td id="L5758" class="blob-num js-line-number" data-line-number="5758"></td>
        <td id="LC5758" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5759" class="blob-num js-line-number" data-line-number="5759"></td>
        <td id="LC5759" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> (<span class=pl-s1>is_namespace_indent_item</span> <span class=pl-c1>or</span> <span class=pl-s1>is_forward_declaration</span>):</td>
      </tr>
      <tr>
        <td id="L5760" class="blob-num js-line-number" data-line-number="5760"></td>
        <td id="LC5760" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5761" class="blob-num js-line-number" data-line-number="5761"></td>
        <td id="LC5761" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5762" class="blob-num js-line-number" data-line-number="5762"></td>
        <td id="LC5762" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If we are in a macro, we do not want to check the namespace indentation.</span></td>
      </tr>
      <tr>
        <td id="L5763" class="blob-num js-line-number" data-line-number="5763"></td>
        <td id="LC5763" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsMacroDefinition</span>(<span class=pl-s1>raw_lines_no_comments</span>, <span class=pl-s1>linenum</span>):</td>
      </tr>
      <tr>
        <td id="L5764" class="blob-num js-line-number" data-line-number="5764"></td>
        <td id="LC5764" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5765" class="blob-num js-line-number" data-line-number="5765"></td>
        <td id="LC5765" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5766" class="blob-num js-line-number" data-line-number="5766"></td>
        <td id="LC5766" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-v>IsBlockInNameSpace</span>(<span class=pl-s1>nesting_state</span>, <span class=pl-s1>is_forward_declaration</span>)</td>
      </tr>
      <tr>
        <td id="L5767" class="blob-num js-line-number" data-line-number="5767"></td>
        <td id="LC5767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5768" class="blob-num js-line-number" data-line-number="5768"></td>
        <td id="LC5768" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5769" class="blob-num js-line-number" data-line-number="5769"></td>
        <td id="LC5769" class="blob-code blob-code-inner js-file-line"><span class=pl-c># Call this method if the line is directly inside of a namespace.</span></td>
      </tr>
      <tr>
        <td id="L5770" class="blob-num js-line-number" data-line-number="5770"></td>
        <td id="LC5770" class="blob-code blob-code-inner js-file-line"><span class=pl-c># If the line above is blank (excluding comments) or the start of</span></td>
      </tr>
      <tr>
        <td id="L5771" class="blob-num js-line-number" data-line-number="5771"></td>
        <td id="LC5771" class="blob-code blob-code-inner js-file-line"><span class=pl-c># an inner namespace, it cannot be indented.</span></td>
      </tr>
      <tr>
        <td id="L5772" class="blob-num js-line-number" data-line-number="5772"></td>
        <td id="LC5772" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>CheckItemIndentationInNamespace</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines_no_comments</span>, <span class=pl-s1>linenum</span>,</td>
      </tr>
      <tr>
        <td id="L5773" class="blob-num js-line-number" data-line-number="5773"></td>
        <td id="LC5773" class="blob-code blob-code-inner js-file-line">                                    <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5774" class="blob-num js-line-number" data-line-number="5774"></td>
        <td id="LC5774" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>raw_lines_no_comments</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5775" class="blob-num js-line-number" data-line-number="5775"></td>
        <td id="LC5775" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;^\s+&#39;</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5776" class="blob-num js-line-number" data-line-number="5776"></td>
        <td id="LC5776" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;runtime/indentation_namespace&#39;</span>, <span class=pl-c1>4</span>,</td>
      </tr>
      <tr>
        <td id="L5777" class="blob-num js-line-number" data-line-number="5777"></td>
        <td id="LC5777" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&#39;Do not indent within a namespace&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5778" class="blob-num js-line-number" data-line-number="5778"></td>
        <td id="LC5778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5779" class="blob-num js-line-number" data-line-number="5779"></td>
        <td id="LC5779" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5780" class="blob-num js-line-number" data-line-number="5780"></td>
        <td id="LC5780" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessLine</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>,</td>
      </tr>
      <tr>
        <td id="L5781" class="blob-num js-line-number" data-line-number="5781"></td>
        <td id="LC5781" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>include_state</span>, <span class=pl-s1>function_state</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>,</td>
      </tr>
      <tr>
        <td id="L5782" class="blob-num js-line-number" data-line-number="5782"></td>
        <td id="LC5782" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>extra_check_functions</span><span class=pl-c1>=</span>[]):</td>
      </tr>
      <tr>
        <td id="L5783" class="blob-num js-line-number" data-line-number="5783"></td>
        <td id="LC5783" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Processes a single line in the file.</span></td>
      </tr>
      <tr>
        <td id="L5784" class="blob-num js-line-number" data-line-number="5784"></td>
        <td id="LC5784" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5785" class="blob-num js-line-number" data-line-number="5785"></td>
        <td id="LC5785" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5786" class="blob-num js-line-number" data-line-number="5786"></td>
        <td id="LC5786" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: Filename of the file that is being processed.</span></td>
      </tr>
      <tr>
        <td id="L5787" class="blob-num js-line-number" data-line-number="5787"></td>
        <td id="LC5787" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    file_extension: The extension (dot not included) of the file.</span></td>
      </tr>
      <tr>
        <td id="L5788" class="blob-num js-line-number" data-line-number="5788"></td>
        <td id="LC5788" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: An array of strings, each representing a line of the file,</span></td>
      </tr>
      <tr>
        <td id="L5789" class="blob-num js-line-number" data-line-number="5789"></td>
        <td id="LC5789" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                 with comments stripped.</span></td>
      </tr>
      <tr>
        <td id="L5790" class="blob-num js-line-number" data-line-number="5790"></td>
        <td id="LC5790" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    line: Number of line being processed.</span></td>
      </tr>
      <tr>
        <td id="L5791" class="blob-num js-line-number" data-line-number="5791"></td>
        <td id="LC5791" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    include_state: An _IncludeState instance in which the headers are inserted.</span></td>
      </tr>
      <tr>
        <td id="L5792" class="blob-num js-line-number" data-line-number="5792"></td>
        <td id="LC5792" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    function_state: A _FunctionState instance which counts function lines, etc.</span></td>
      </tr>
      <tr>
        <td id="L5793" class="blob-num js-line-number" data-line-number="5793"></td>
        <td id="LC5793" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    nesting_state: A NestingState instance which maintains information about</span></td>
      </tr>
      <tr>
        <td id="L5794" class="blob-num js-line-number" data-line-number="5794"></td>
        <td id="LC5794" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                   the current stack of nested blocks being parsed.</span></td>
      </tr>
      <tr>
        <td id="L5795" class="blob-num js-line-number" data-line-number="5795"></td>
        <td id="LC5795" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: A callable to which errors are reported, which takes 4 arguments:</span></td>
      </tr>
      <tr>
        <td id="L5796" class="blob-num js-line-number" data-line-number="5796"></td>
        <td id="LC5796" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           filename, line number, error level, and message</span></td>
      </tr>
      <tr>
        <td id="L5797" class="blob-num js-line-number" data-line-number="5797"></td>
        <td id="LC5797" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    extra_check_functions: An array of additional check functions that will be</span></td>
      </tr>
      <tr>
        <td id="L5798" class="blob-num js-line-number" data-line-number="5798"></td>
        <td id="LC5798" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           run on each source line. Each function takes 4</span></td>
      </tr>
      <tr>
        <td id="L5799" class="blob-num js-line-number" data-line-number="5799"></td>
        <td id="LC5799" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           arguments: filename, clean_lines, line, error</span></td>
      </tr>
      <tr>
        <td id="L5800" class="blob-num js-line-number" data-line-number="5800"></td>
        <td id="LC5800" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5801" class="blob-num js-line-number" data-line-number="5801"></td>
        <td id="LC5801" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>raw_lines</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>raw_lines</span></td>
      </tr>
      <tr>
        <td id="L5802" class="blob-num js-line-number" data-line-number="5802"></td>
        <td id="LC5802" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>ParseNolintSuppressions</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>raw_lines</span>[<span class=pl-s1>line</span>], <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5803" class="blob-num js-line-number" data-line-number="5803"></td>
        <td id="LC5803" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>nesting_state</span>.<span class=pl-v>Update</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5804" class="blob-num js-line-number" data-line-number="5804"></td>
        <td id="LC5804" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForNamespaceIndentation</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>,</td>
      </tr>
      <tr>
        <td id="L5805" class="blob-num js-line-number" data-line-number="5805"></td>
        <td id="LC5805" class="blob-code blob-code-inner js-file-line">                               <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5806" class="blob-num js-line-number" data-line-number="5806"></td>
        <td id="LC5806" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>nesting_state</span>.<span class=pl-v>InAsmBlock</span>(): <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5807" class="blob-num js-line-number" data-line-number="5807"></td>
        <td id="LC5807" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForFunctionLengths</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>function_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5808" class="blob-num js-line-number" data-line-number="5808"></td>
        <td id="LC5808" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForMultilineCommentsAndStrings</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5809" class="blob-num js-line-number" data-line-number="5809"></td>
        <td id="LC5809" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckStyle</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5810" class="blob-num js-line-number" data-line-number="5810"></td>
        <td id="LC5810" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckLanguage</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>include_state</span>,</td>
      </tr>
      <tr>
        <td id="L5811" class="blob-num js-line-number" data-line-number="5811"></td>
        <td id="LC5811" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5812" class="blob-num js-line-number" data-line-number="5812"></td>
        <td id="LC5812" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForNonConstReference</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5813" class="blob-num js-line-number" data-line-number="5813"></td>
        <td id="LC5813" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForNonStandardConstructs</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>,</td>
      </tr>
      <tr>
        <td id="L5814" class="blob-num js-line-number" data-line-number="5814"></td>
        <td id="LC5814" class="blob-code blob-code-inner js-file-line">                                <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5815" class="blob-num js-line-number" data-line-number="5815"></td>
        <td id="LC5815" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckVlogArguments</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5816" class="blob-num js-line-number" data-line-number="5816"></td>
        <td id="LC5816" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckPosixThreading</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5817" class="blob-num js-line-number" data-line-number="5817"></td>
        <td id="LC5817" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckInvalidIncrement</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5818" class="blob-num js-line-number" data-line-number="5818"></td>
        <td id="LC5818" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckMakePairUsesDeduction</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5819" class="blob-num js-line-number" data-line-number="5819"></td>
        <td id="LC5819" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckRedundantVirtual</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5820" class="blob-num js-line-number" data-line-number="5820"></td>
        <td id="LC5820" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckRedundantOverrideOrFinal</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5821" class="blob-num js-line-number" data-line-number="5821"></td>
        <td id="LC5821" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>check_fn</span> <span class=pl-c1>in</span> <span class=pl-s1>extra_check_functions</span>:</td>
      </tr>
      <tr>
        <td id="L5822" class="blob-num js-line-number" data-line-number="5822"></td>
        <td id="LC5822" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>check_fn</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5823" class="blob-num js-line-number" data-line-number="5823"></td>
        <td id="LC5823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5824" class="blob-num js-line-number" data-line-number="5824"></td>
        <td id="LC5824" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FlagCxx11Features</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5825" class="blob-num js-line-number" data-line-number="5825"></td>
        <td id="LC5825" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Flag those c++11 features that we only allow in certain places.</span></td>
      </tr>
      <tr>
        <td id="L5826" class="blob-num js-line-number" data-line-number="5826"></td>
        <td id="LC5826" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5827" class="blob-num js-line-number" data-line-number="5827"></td>
        <td id="LC5827" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5828" class="blob-num js-line-number" data-line-number="5828"></td>
        <td id="LC5828" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5829" class="blob-num js-line-number" data-line-number="5829"></td>
        <td id="LC5829" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5830" class="blob-num js-line-number" data-line-number="5830"></td>
        <td id="LC5830" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5831" class="blob-num js-line-number" data-line-number="5831"></td>
        <td id="LC5831" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5832" class="blob-num js-line-number" data-line-number="5832"></td>
        <td id="LC5832" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5833" class="blob-num js-line-number" data-line-number="5833"></td>
        <td id="LC5833" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5834" class="blob-num js-line-number" data-line-number="5834"></td>
        <td id="LC5834" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5835" class="blob-num js-line-number" data-line-number="5835"></td>
        <td id="LC5835" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#\s*include\s+[&lt;&quot;]([^&lt;&quot;]+)[&quot;&gt;]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5836" class="blob-num js-line-number" data-line-number="5836"></td>
        <td id="LC5836" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5837" class="blob-num js-line-number" data-line-number="5837"></td>
        <td id="LC5837" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Flag unapproved C++ TR1 headers.</span></td>
      </tr>
      <tr>
        <td id="L5838" class="blob-num js-line-number" data-line-number="5838"></td>
        <td id="LC5838" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>include</span> <span class=pl-c1>and</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>).<span class=pl-en>startswith</span>(<span class=pl-s>&#39;tr1/&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5839" class="blob-num js-line-number" data-line-number="5839"></td>
        <td id="LC5839" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/c++tr1&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L5840" class="blob-num js-line-number" data-line-number="5840"></td>
        <td id="LC5840" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s>&#39;C++ TR1 headers such as &lt;%s&gt; are unapproved.&#39;</span>) <span class=pl-c1>%</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L5841" class="blob-num js-line-number" data-line-number="5841"></td>
        <td id="LC5841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5842" class="blob-num js-line-number" data-line-number="5842"></td>
        <td id="LC5842" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Flag unapproved C++11 headers.</span></td>
      </tr>
      <tr>
        <td id="L5843" class="blob-num js-line-number" data-line-number="5843"></td>
        <td id="LC5843" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>include</span> <span class=pl-c1>and</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>in</span> (<span class=pl-s>&#39;cfenv&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5844" class="blob-num js-line-number" data-line-number="5844"></td>
        <td id="LC5844" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;condition_variable&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5845" class="blob-num js-line-number" data-line-number="5845"></td>
        <td id="LC5845" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;fenv.h&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5846" class="blob-num js-line-number" data-line-number="5846"></td>
        <td id="LC5846" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;future&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5847" class="blob-num js-line-number" data-line-number="5847"></td>
        <td id="LC5847" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;mutex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5848" class="blob-num js-line-number" data-line-number="5848"></td>
        <td id="LC5848" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;thread&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5849" class="blob-num js-line-number" data-line-number="5849"></td>
        <td id="LC5849" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;chrono&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5850" class="blob-num js-line-number" data-line-number="5850"></td>
        <td id="LC5850" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;ratio&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5851" class="blob-num js-line-number" data-line-number="5851"></td>
        <td id="LC5851" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;regex&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5852" class="blob-num js-line-number" data-line-number="5852"></td>
        <td id="LC5852" class="blob-code blob-code-inner js-file-line">                                      <span class=pl-s>&#39;system_error&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5853" class="blob-num js-line-number" data-line-number="5853"></td>
        <td id="LC5853" class="blob-code blob-code-inner js-file-line">                                     ):</td>
      </tr>
      <tr>
        <td id="L5854" class="blob-num js-line-number" data-line-number="5854"></td>
        <td id="LC5854" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/c++11&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L5855" class="blob-num js-line-number" data-line-number="5855"></td>
        <td id="LC5855" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s>&#39;&lt;%s&gt; is an unapproved C++11 header.&#39;</span>) <span class=pl-c1>%</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L5856" class="blob-num js-line-number" data-line-number="5856"></td>
        <td id="LC5856" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5857" class="blob-num js-line-number" data-line-number="5857"></td>
        <td id="LC5857" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># The only place where we need to worry about C++11 keywords and library</span></td>
      </tr>
      <tr>
        <td id="L5858" class="blob-num js-line-number" data-line-number="5858"></td>
        <td id="LC5858" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># features in preprocessor directives is in macro definitions.</span></td>
      </tr>
      <tr>
        <td id="L5859" class="blob-num js-line-number" data-line-number="5859"></td>
        <td id="LC5859" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#&#39;</span>, <span class=pl-s1>line</span>) <span class=pl-c1>and</span> <span class=pl-c1>not</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#\s*define\b&#39;</span>, <span class=pl-s1>line</span>): <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L5860" class="blob-num js-line-number" data-line-number="5860"></td>
        <td id="LC5860" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5861" class="blob-num js-line-number" data-line-number="5861"></td>
        <td id="LC5861" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># These are classes and free functions.  The classes are always</span></td>
      </tr>
      <tr>
        <td id="L5862" class="blob-num js-line-number" data-line-number="5862"></td>
        <td id="LC5862" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># mentioned as std::*, but we only catch the free functions if</span></td>
      </tr>
      <tr>
        <td id="L5863" class="blob-num js-line-number" data-line-number="5863"></td>
        <td id="LC5863" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># they&#39;re not found by ADL.  They&#39;re alphabetical by header.</span></td>
      </tr>
      <tr>
        <td id="L5864" class="blob-num js-line-number" data-line-number="5864"></td>
        <td id="LC5864" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>top_name</span> <span class=pl-c1>in</span> (</td>
      </tr>
      <tr>
        <td id="L5865" class="blob-num js-line-number" data-line-number="5865"></td>
        <td id="LC5865" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># type_traits</span></td>
      </tr>
      <tr>
        <td id="L5866" class="blob-num js-line-number" data-line-number="5866"></td>
        <td id="LC5866" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>&#39;alignment_of&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5867" class="blob-num js-line-number" data-line-number="5867"></td>
        <td id="LC5867" class="blob-code blob-code-inner js-file-line">      <span class=pl-s>&#39;aligned_union&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L5868" class="blob-num js-line-number" data-line-number="5868"></td>
        <td id="LC5868" class="blob-code blob-code-inner js-file-line">      ):</td>
      </tr>
      <tr>
        <td id="L5869" class="blob-num js-line-number" data-line-number="5869"></td>
        <td id="LC5869" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-v>Search</span>(<span class=pl-s>r&#39;\bstd::%s\b&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>top_name</span>, <span class=pl-s1>line</span>):</td>
      </tr>
      <tr>
        <td id="L5870" class="blob-num js-line-number" data-line-number="5870"></td>
        <td id="LC5870" class="blob-code blob-code-inner js-file-line">      <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/c++11&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L5871" class="blob-num js-line-number" data-line-number="5871"></td>
        <td id="LC5871" class="blob-code blob-code-inner js-file-line">            (<span class=pl-s>&#39;std::%s is an unapproved C++11 class or function.  Send c-style &#39;</span></td>
      </tr>
      <tr>
        <td id="L5872" class="blob-num js-line-number" data-line-number="5872"></td>
        <td id="LC5872" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;an example of where it would make your code more readable, and &#39;</span></td>
      </tr>
      <tr>
        <td id="L5873" class="blob-num js-line-number" data-line-number="5873"></td>
        <td id="LC5873" class="blob-code blob-code-inner js-file-line">             <span class=pl-s>&#39;they may let you use it.&#39;</span>) <span class=pl-c1>%</span> <span class=pl-s1>top_name</span>)</td>
      </tr>
      <tr>
        <td id="L5874" class="blob-num js-line-number" data-line-number="5874"></td>
        <td id="LC5874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5875" class="blob-num js-line-number" data-line-number="5875"></td>
        <td id="LC5875" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5876" class="blob-num js-line-number" data-line-number="5876"></td>
        <td id="LC5876" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>FlagCxx14Features</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>linenum</span>, <span class=pl-s1>error</span>):</td>
      </tr>
      <tr>
        <td id="L5877" class="blob-num js-line-number" data-line-number="5877"></td>
        <td id="LC5877" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Flag those C++14 features that we restrict.</span></td>
      </tr>
      <tr>
        <td id="L5878" class="blob-num js-line-number" data-line-number="5878"></td>
        <td id="LC5878" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5879" class="blob-num js-line-number" data-line-number="5879"></td>
        <td id="LC5879" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5880" class="blob-num js-line-number" data-line-number="5880"></td>
        <td id="LC5880" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the current file.</span></td>
      </tr>
      <tr>
        <td id="L5881" class="blob-num js-line-number" data-line-number="5881"></td>
        <td id="LC5881" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    clean_lines: A CleansedLines instance containing the file.</span></td>
      </tr>
      <tr>
        <td id="L5882" class="blob-num js-line-number" data-line-number="5882"></td>
        <td id="LC5882" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    linenum: The number of the line to check.</span></td>
      </tr>
      <tr>
        <td id="L5883" class="blob-num js-line-number" data-line-number="5883"></td>
        <td id="LC5883" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: The function to call with any errors found.</span></td>
      </tr>
      <tr>
        <td id="L5884" class="blob-num js-line-number" data-line-number="5884"></td>
        <td id="LC5884" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5885" class="blob-num js-line-number" data-line-number="5885"></td>
        <td id="LC5885" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>line</span> <span class=pl-c1>=</span> <span class=pl-s1>clean_lines</span>.<span class=pl-s1>elided</span>[<span class=pl-s1>linenum</span>]</td>
      </tr>
      <tr>
        <td id="L5886" class="blob-num js-line-number" data-line-number="5886"></td>
        <td id="LC5886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5887" class="blob-num js-line-number" data-line-number="5887"></td>
        <td id="LC5887" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include</span> <span class=pl-c1>=</span> <span class=pl-v>Match</span>(<span class=pl-s>r&#39;\s*#\s*include\s+[&lt;&quot;]([^&lt;&quot;]+)[&quot;&gt;]&#39;</span>, <span class=pl-s1>line</span>)</td>
      </tr>
      <tr>
        <td id="L5888" class="blob-num js-line-number" data-line-number="5888"></td>
        <td id="LC5888" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5889" class="blob-num js-line-number" data-line-number="5889"></td>
        <td id="LC5889" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Flag unapproved C++14 headers.</span></td>
      </tr>
      <tr>
        <td id="L5890" class="blob-num js-line-number" data-line-number="5890"></td>
        <td id="LC5890" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>include</span> <span class=pl-c1>and</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>) <span class=pl-c1>in</span> (<span class=pl-s>&#39;scoped_allocator&#39;</span>, <span class=pl-s>&#39;shared_mutex&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L5891" class="blob-num js-line-number" data-line-number="5891"></td>
        <td id="LC5891" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;build/c++14&#39;</span>, <span class=pl-c1>5</span>,</td>
      </tr>
      <tr>
        <td id="L5892" class="blob-num js-line-number" data-line-number="5892"></td>
        <td id="LC5892" class="blob-code blob-code-inner js-file-line">          (<span class=pl-s>&#39;&lt;%s&gt; is an unapproved C++14 header.&#39;</span>) <span class=pl-c1>%</span> <span class=pl-s1>include</span>.<span class=pl-en>group</span>(<span class=pl-c1>1</span>))</td>
      </tr>
      <tr>
        <td id="L5893" class="blob-num js-line-number" data-line-number="5893"></td>
        <td id="LC5893" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5894" class="blob-num js-line-number" data-line-number="5894"></td>
        <td id="LC5894" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5895" class="blob-num js-line-number" data-line-number="5895"></td>
        <td id="LC5895" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessFileData</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>,</td>
      </tr>
      <tr>
        <td id="L5896" class="blob-num js-line-number" data-line-number="5896"></td>
        <td id="LC5896" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>extra_check_functions</span><span class=pl-c1>=</span>[]):</td>
      </tr>
      <tr>
        <td id="L5897" class="blob-num js-line-number" data-line-number="5897"></td>
        <td id="LC5897" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Performs lint checks and reports any errors to the given error function.</span></td>
      </tr>
      <tr>
        <td id="L5898" class="blob-num js-line-number" data-line-number="5898"></td>
        <td id="LC5898" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5899" class="blob-num js-line-number" data-line-number="5899"></td>
        <td id="LC5899" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5900" class="blob-num js-line-number" data-line-number="5900"></td>
        <td id="LC5900" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: Filename of the file that is being processed.</span></td>
      </tr>
      <tr>
        <td id="L5901" class="blob-num js-line-number" data-line-number="5901"></td>
        <td id="LC5901" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    file_extension: The extension (dot not included) of the file.</span></td>
      </tr>
      <tr>
        <td id="L5902" class="blob-num js-line-number" data-line-number="5902"></td>
        <td id="LC5902" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    lines: An array of strings, each representing a line of the file, with the</span></td>
      </tr>
      <tr>
        <td id="L5903" class="blob-num js-line-number" data-line-number="5903"></td>
        <td id="LC5903" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           last element being empty if the file is terminated with a newline.</span></td>
      </tr>
      <tr>
        <td id="L5904" class="blob-num js-line-number" data-line-number="5904"></td>
        <td id="LC5904" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    error: A callable to which errors are reported, which takes 4 arguments:</span></td>
      </tr>
      <tr>
        <td id="L5905" class="blob-num js-line-number" data-line-number="5905"></td>
        <td id="LC5905" class="blob-code blob-code-inner js-file-line"><span class=pl-s>           filename, line number, error level, and message</span></td>
      </tr>
      <tr>
        <td id="L5906" class="blob-num js-line-number" data-line-number="5906"></td>
        <td id="LC5906" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    extra_check_functions: An array of additional check functions that will be</span></td>
      </tr>
      <tr>
        <td id="L5907" class="blob-num js-line-number" data-line-number="5907"></td>
        <td id="LC5907" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           run on each source line. Each function takes 4</span></td>
      </tr>
      <tr>
        <td id="L5908" class="blob-num js-line-number" data-line-number="5908"></td>
        <td id="LC5908" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           arguments: filename, clean_lines, line, error</span></td>
      </tr>
      <tr>
        <td id="L5909" class="blob-num js-line-number" data-line-number="5909"></td>
        <td id="LC5909" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5910" class="blob-num js-line-number" data-line-number="5910"></td>
        <td id="LC5910" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lines</span> <span class=pl-c1>=</span> ([<span class=pl-s>&#39;// marker so line numbers and indices both start at 1&#39;</span>] <span class=pl-c1>+</span> <span class=pl-s1>lines</span> <span class=pl-c1>+</span></td>
      </tr>
      <tr>
        <td id="L5911" class="blob-num js-line-number" data-line-number="5911"></td>
        <td id="LC5911" class="blob-code blob-code-inner js-file-line">           [<span class=pl-s>&#39;// marker so line numbers end in a known way&#39;</span>])</td>
      </tr>
      <tr>
        <td id="L5912" class="blob-num js-line-number" data-line-number="5912"></td>
        <td id="LC5912" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5913" class="blob-num js-line-number" data-line-number="5913"></td>
        <td id="LC5913" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>include_state</span> <span class=pl-c1>=</span> <span class=pl-en>_IncludeState</span>()</td>
      </tr>
      <tr>
        <td id="L5914" class="blob-num js-line-number" data-line-number="5914"></td>
        <td id="LC5914" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>function_state</span> <span class=pl-c1>=</span> <span class=pl-en>_FunctionState</span>()</td>
      </tr>
      <tr>
        <td id="L5915" class="blob-num js-line-number" data-line-number="5915"></td>
        <td id="LC5915" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>nesting_state</span> <span class=pl-c1>=</span> <span class=pl-v>NestingState</span>()</td>
      </tr>
      <tr>
        <td id="L5916" class="blob-num js-line-number" data-line-number="5916"></td>
        <td id="LC5916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5917" class="blob-num js-line-number" data-line-number="5917"></td>
        <td id="LC5917" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>ResetNolintSuppressions</span>()</td>
      </tr>
      <tr>
        <td id="L5918" class="blob-num js-line-number" data-line-number="5918"></td>
        <td id="LC5918" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5919" class="blob-num js-line-number" data-line-number="5919"></td>
        <td id="LC5919" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForCopyright</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5920" class="blob-num js-line-number" data-line-number="5920"></td>
        <td id="LC5920" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>ProcessGlobalSuppresions</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L5921" class="blob-num js-line-number" data-line-number="5921"></td>
        <td id="LC5921" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>RemoveMultiLineComments</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5922" class="blob-num js-line-number" data-line-number="5922"></td>
        <td id="LC5922" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>clean_lines</span> <span class=pl-c1>=</span> <span class=pl-v>CleansedLines</span>(<span class=pl-s1>lines</span>)</td>
      </tr>
      <tr>
        <td id="L5923" class="blob-num js-line-number" data-line-number="5923"></td>
        <td id="LC5923" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5924" class="blob-num js-line-number" data-line-number="5924"></td>
        <td id="LC5924" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-v>IsHeaderExtension</span>(<span class=pl-s1>file_extension</span>):</td>
      </tr>
      <tr>
        <td id="L5925" class="blob-num js-line-number" data-line-number="5925"></td>
        <td id="LC5925" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckForHeaderGuard</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5926" class="blob-num js-line-number" data-line-number="5926"></td>
        <td id="LC5926" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5927" class="blob-num js-line-number" data-line-number="5927"></td>
        <td id="LC5927" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-en>xrange</span>(<span class=pl-s1>clean_lines</span>.<span class=pl-v>NumLines</span>()):</td>
      </tr>
      <tr>
        <td id="L5928" class="blob-num js-line-number" data-line-number="5928"></td>
        <td id="LC5928" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>ProcessLine</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>,</td>
      </tr>
      <tr>
        <td id="L5929" class="blob-num js-line-number" data-line-number="5929"></td>
        <td id="LC5929" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>include_state</span>, <span class=pl-s1>function_state</span>, <span class=pl-s1>nesting_state</span>, <span class=pl-s1>error</span>,</td>
      </tr>
      <tr>
        <td id="L5930" class="blob-num js-line-number" data-line-number="5930"></td>
        <td id="LC5930" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>extra_check_functions</span>)</td>
      </tr>
      <tr>
        <td id="L5931" class="blob-num js-line-number" data-line-number="5931"></td>
        <td id="LC5931" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>FlagCxx11Features</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>line</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5932" class="blob-num js-line-number" data-line-number="5932"></td>
        <td id="LC5932" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>nesting_state</span>.<span class=pl-v>CheckCompletedBlocks</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5933" class="blob-num js-line-number" data-line-number="5933"></td>
        <td id="LC5933" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5934" class="blob-num js-line-number" data-line-number="5934"></td>
        <td id="LC5934" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForIncludeWhatYouUse</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>clean_lines</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5935" class="blob-num js-line-number" data-line-number="5935"></td>
        <td id="LC5935" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5936" class="blob-num js-line-number" data-line-number="5936"></td>
        <td id="LC5936" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Check that the .cc file has included its header if it exists.</span></td>
      </tr>
      <tr>
        <td id="L5937" class="blob-num js-line-number" data-line-number="5937"></td>
        <td id="LC5937" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-en>_IsSourceExtension</span>(<span class=pl-s1>file_extension</span>):</td>
      </tr>
      <tr>
        <td id="L5938" class="blob-num js-line-number" data-line-number="5938"></td>
        <td id="LC5938" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>CheckHeaderFileIncluded</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>include_state</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5939" class="blob-num js-line-number" data-line-number="5939"></td>
        <td id="LC5939" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5940" class="blob-num js-line-number" data-line-number="5940"></td>
        <td id="LC5940" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># We check here rather than inside ProcessLine so that we see raw</span></td>
      </tr>
      <tr>
        <td id="L5941" class="blob-num js-line-number" data-line-number="5941"></td>
        <td id="LC5941" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># lines rather than &quot;cleaned&quot; lines.</span></td>
      </tr>
      <tr>
        <td id="L5942" class="blob-num js-line-number" data-line-number="5942"></td>
        <td id="LC5942" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForBadCharacters</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5943" class="blob-num js-line-number" data-line-number="5943"></td>
        <td id="LC5943" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5944" class="blob-num js-line-number" data-line-number="5944"></td>
        <td id="LC5944" class="blob-code blob-code-inner js-file-line">  <span class=pl-v>CheckForNewlineAtEOF</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>lines</span>, <span class=pl-s1>error</span>)</td>
      </tr>
      <tr>
        <td id="L5945" class="blob-num js-line-number" data-line-number="5945"></td>
        <td id="LC5945" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5946" class="blob-num js-line-number" data-line-number="5946"></td>
        <td id="LC5946" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessConfigOverrides</span>(<span class=pl-s1>filename</span>):</td>
      </tr>
      <tr>
        <td id="L5947" class="blob-num js-line-number" data-line-number="5947"></td>
        <td id="LC5947" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot; Loads the configuration files and processes the config overrides.</span></td>
      </tr>
      <tr>
        <td id="L5948" class="blob-num js-line-number" data-line-number="5948"></td>
        <td id="LC5948" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5949" class="blob-num js-line-number" data-line-number="5949"></td>
        <td id="LC5949" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L5950" class="blob-num js-line-number" data-line-number="5950"></td>
        <td id="LC5950" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the file being processed by the linter.</span></td>
      </tr>
      <tr>
        <td id="L5951" class="blob-num js-line-number" data-line-number="5951"></td>
        <td id="LC5951" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L5952" class="blob-num js-line-number" data-line-number="5952"></td>
        <td id="LC5952" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L5953" class="blob-num js-line-number" data-line-number="5953"></td>
        <td id="LC5953" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    False if the current |filename| should not be processed further.</span></td>
      </tr>
      <tr>
        <td id="L5954" class="blob-num js-line-number" data-line-number="5954"></td>
        <td id="LC5954" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L5955" class="blob-num js-line-number" data-line-number="5955"></td>
        <td id="LC5955" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5956" class="blob-num js-line-number" data-line-number="5956"></td>
        <td id="LC5956" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>abs_filename</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>abspath</span>(<span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L5957" class="blob-num js-line-number" data-line-number="5957"></td>
        <td id="LC5957" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>cfg_filters</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L5958" class="blob-num js-line-number" data-line-number="5958"></td>
        <td id="LC5958" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>keep_looking</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L5959" class="blob-num js-line-number" data-line-number="5959"></td>
        <td id="LC5959" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>while</span> <span class=pl-s1>keep_looking</span>:</td>
      </tr>
      <tr>
        <td id="L5960" class="blob-num js-line-number" data-line-number="5960"></td>
        <td id="LC5960" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>abs_path</span>, <span class=pl-s1>base_name</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>split</span>(<span class=pl-s1>abs_filename</span>)</td>
      </tr>
      <tr>
        <td id="L5961" class="blob-num js-line-number" data-line-number="5961"></td>
        <td id="LC5961" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>base_name</span>:</td>
      </tr>
      <tr>
        <td id="L5962" class="blob-num js-line-number" data-line-number="5962"></td>
        <td id="LC5962" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>break</span>  <span class=pl-c># Reached the root directory.</span></td>
      </tr>
      <tr>
        <td id="L5963" class="blob-num js-line-number" data-line-number="5963"></td>
        <td id="LC5963" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5964" class="blob-num js-line-number" data-line-number="5964"></td>
        <td id="LC5964" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>cfg_file</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>abs_path</span>, <span class=pl-s>&quot;CPPLINT.cfg&quot;</span>)</td>
      </tr>
      <tr>
        <td id="L5965" class="blob-num js-line-number" data-line-number="5965"></td>
        <td id="LC5965" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>abs_filename</span> <span class=pl-c1>=</span> <span class=pl-s1>abs_path</span></td>
      </tr>
      <tr>
        <td id="L5966" class="blob-num js-line-number" data-line-number="5966"></td>
        <td id="LC5966" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>isfile</span>(<span class=pl-s1>cfg_file</span>):</td>
      </tr>
      <tr>
        <td id="L5967" class="blob-num js-line-number" data-line-number="5967"></td>
        <td id="LC5967" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L5968" class="blob-num js-line-number" data-line-number="5968"></td>
        <td id="LC5968" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5969" class="blob-num js-line-number" data-line-number="5969"></td>
        <td id="LC5969" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L5970" class="blob-num js-line-number" data-line-number="5970"></td>
        <td id="LC5970" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>with</span> <span class=pl-en>open</span>(<span class=pl-s1>cfg_file</span>) <span class=pl-k>as</span> <span class=pl-s1>file_handle</span>:</td>
      </tr>
      <tr>
        <td id="L5971" class="blob-num js-line-number" data-line-number="5971"></td>
        <td id="LC5971" class="blob-code blob-code-inner js-file-line">        <span class=pl-k>for</span> <span class=pl-s1>line</span> <span class=pl-c1>in</span> <span class=pl-s1>file_handle</span>:</td>
      </tr>
      <tr>
        <td id="L5972" class="blob-num js-line-number" data-line-number="5972"></td>
        <td id="LC5972" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>line</span>, <span class=pl-s1>_</span>, <span class=pl-s1>_</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>partition</span>(<span class=pl-s>&#39;#&#39;</span>)  <span class=pl-c># Remove comments.</span></td>
      </tr>
      <tr>
        <td id="L5973" class="blob-num js-line-number" data-line-number="5973"></td>
        <td id="LC5973" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>line</span>.<span class=pl-en>strip</span>():</td>
      </tr>
      <tr>
        <td id="L5974" class="blob-num js-line-number" data-line-number="5974"></td>
        <td id="LC5974" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>continue</span></td>
      </tr>
      <tr>
        <td id="L5975" class="blob-num js-line-number" data-line-number="5975"></td>
        <td id="LC5975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5976" class="blob-num js-line-number" data-line-number="5976"></td>
        <td id="LC5976" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>name</span>, <span class=pl-s1>_</span>, <span class=pl-s1>val</span> <span class=pl-c1>=</span> <span class=pl-s1>line</span>.<span class=pl-en>partition</span>(<span class=pl-s>&#39;=&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L5977" class="blob-num js-line-number" data-line-number="5977"></td>
        <td id="LC5977" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>name</span> <span class=pl-c1>=</span> <span class=pl-s1>name</span>.<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L5978" class="blob-num js-line-number" data-line-number="5978"></td>
        <td id="LC5978" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>val</span> <span class=pl-c1>=</span> <span class=pl-s1>val</span>.<span class=pl-en>strip</span>()</td>
      </tr>
      <tr>
        <td id="L5979" class="blob-num js-line-number" data-line-number="5979"></td>
        <td id="LC5979" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>if</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;set noparent&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L5980" class="blob-num js-line-number" data-line-number="5980"></td>
        <td id="LC5980" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>keep_looking</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5981" class="blob-num js-line-number" data-line-number="5981"></td>
        <td id="LC5981" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;filter&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L5982" class="blob-num js-line-number" data-line-number="5982"></td>
        <td id="LC5982" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>cfg_filters</span>.<span class=pl-en>append</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L5983" class="blob-num js-line-number" data-line-number="5983"></td>
        <td id="LC5983" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;exclude_files&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L5984" class="blob-num js-line-number" data-line-number="5984"></td>
        <td id="LC5984" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># When matching exclude_files pattern, use the base_name of</span></td>
      </tr>
      <tr>
        <td id="L5985" class="blob-num js-line-number" data-line-number="5985"></td>
        <td id="LC5985" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># the current file name or the directory name we are processing.</span></td>
      </tr>
      <tr>
        <td id="L5986" class="blob-num js-line-number" data-line-number="5986"></td>
        <td id="LC5986" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># For example, if we are checking for lint errors in /foo/bar/baz.cc</span></td>
      </tr>
      <tr>
        <td id="L5987" class="blob-num js-line-number" data-line-number="5987"></td>
        <td id="LC5987" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># and we found the .cfg file at /foo/CPPLINT.cfg, then the config</span></td>
      </tr>
      <tr>
        <td id="L5988" class="blob-num js-line-number" data-line-number="5988"></td>
        <td id="LC5988" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># file&#39;s &quot;exclude_files&quot; filter is meant to be checked against &quot;bar&quot;</span></td>
      </tr>
      <tr>
        <td id="L5989" class="blob-num js-line-number" data-line-number="5989"></td>
        <td id="LC5989" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># and not &quot;baz&quot; nor &quot;bar/baz.cc&quot;.</span></td>
      </tr>
      <tr>
        <td id="L5990" class="blob-num js-line-number" data-line-number="5990"></td>
        <td id="LC5990" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>if</span> <span class=pl-s1>base_name</span>:</td>
      </tr>
      <tr>
        <td id="L5991" class="blob-num js-line-number" data-line-number="5991"></td>
        <td id="LC5991" class="blob-code blob-code-inner js-file-line">              <span class=pl-s1>pattern</span> <span class=pl-c1>=</span> <span class=pl-s1>re</span>.<span class=pl-en>compile</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L5992" class="blob-num js-line-number" data-line-number="5992"></td>
        <td id="LC5992" class="blob-code blob-code-inner js-file-line">              <span class=pl-k>if</span> <span class=pl-s1>pattern</span>.<span class=pl-en>match</span>(<span class=pl-s1>base_name</span>):</td>
      </tr>
      <tr>
        <td id="L5993" class="blob-num js-line-number" data-line-number="5993"></td>
        <td id="LC5993" class="blob-code blob-code-inner js-file-line">                <span class=pl-k>if</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>quiet</span>:</td>
      </tr>
      <tr>
        <td id="L5994" class="blob-num js-line-number" data-line-number="5994"></td>
        <td id="LC5994" class="blob-code blob-code-inner js-file-line">                  <span class=pl-c># Suppress &quot;Ignoring file&quot; warning when using --quiet.</span></td>
      </tr>
      <tr>
        <td id="L5995" class="blob-num js-line-number" data-line-number="5995"></td>
        <td id="LC5995" class="blob-code blob-code-inner js-file-line">                  <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L5996" class="blob-num js-line-number" data-line-number="5996"></td>
        <td id="LC5996" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Ignoring &quot;%s&quot;: file excluded by &quot;%s&quot;. &#39;</span></td>
      </tr>
      <tr>
        <td id="L5997" class="blob-num js-line-number" data-line-number="5997"></td>
        <td id="LC5997" class="blob-code blob-code-inner js-file-line">                                 <span class=pl-s>&#39;File path component &quot;%s&quot; matches &#39;</span></td>
      </tr>
      <tr>
        <td id="L5998" class="blob-num js-line-number" data-line-number="5998"></td>
        <td id="LC5998" class="blob-code blob-code-inner js-file-line">                                 <span class=pl-s>&#39;pattern &quot;%s&quot;<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L5999" class="blob-num js-line-number" data-line-number="5999"></td>
        <td id="LC5999" class="blob-code blob-code-inner js-file-line">                                 (<span class=pl-s1>filename</span>, <span class=pl-s1>cfg_file</span>, <span class=pl-s1>base_name</span>, <span class=pl-s1>val</span>))</td>
      </tr>
      <tr>
        <td id="L6000" class="blob-num js-line-number" data-line-number="6000"></td>
        <td id="LC6000" class="blob-code blob-code-inner js-file-line">                <span class=pl-k>return</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L6001" class="blob-num js-line-number" data-line-number="6001"></td>
        <td id="LC6001" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;linelength&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6002" class="blob-num js-line-number" data-line-number="6002"></td>
        <td id="LC6002" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>global</span> <span class=pl-s1>_line_length</span></td>
      </tr>
      <tr>
        <td id="L6003" class="blob-num js-line-number" data-line-number="6003"></td>
        <td id="LC6003" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L6004" class="blob-num js-line-number" data-line-number="6004"></td>
        <td id="LC6004" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>_line_length</span> <span class=pl-c1>=</span> <span class=pl-en>int</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6005" class="blob-num js-line-number" data-line-number="6005"></td>
        <td id="LC6005" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>except</span> <span class=pl-v>ValueError</span>:</td>
      </tr>
      <tr>
        <td id="L6006" class="blob-num js-line-number" data-line-number="6006"></td>
        <td id="LC6006" class="blob-code blob-code-inner js-file-line">                <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Line length must be numeric.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6007" class="blob-num js-line-number" data-line-number="6007"></td>
        <td id="LC6007" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;root&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6008" class="blob-num js-line-number" data-line-number="6008"></td>
        <td id="LC6008" class="blob-code blob-code-inner js-file-line">            <span class=pl-k>global</span> <span class=pl-s1>_root</span></td>
      </tr>
      <tr>
        <td id="L6009" class="blob-num js-line-number" data-line-number="6009"></td>
        <td id="LC6009" class="blob-code blob-code-inner js-file-line">            <span class=pl-c># root directories are specified relative to CPPLINT.cfg dir.</span></td>
      </tr>
      <tr>
        <td id="L6010" class="blob-num js-line-number" data-line-number="6010"></td>
        <td id="LC6010" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>_root</span> <span class=pl-c1>=</span> <span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>join</span>(<span class=pl-s1>os</span>.<span class=pl-s1>path</span>.<span class=pl-en>dirname</span>(<span class=pl-s1>cfg_file</span>), <span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6011" class="blob-num js-line-number" data-line-number="6011"></td>
        <td id="LC6011" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>elif</span> <span class=pl-s1>name</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;headers&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6012" class="blob-num js-line-number" data-line-number="6012"></td>
        <td id="LC6012" class="blob-code blob-code-inner js-file-line">            <span class=pl-v>ProcessHppHeadersOption</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6013" class="blob-num js-line-number" data-line-number="6013"></td>
        <td id="LC6013" class="blob-code blob-code-inner js-file-line">          <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L6014" class="blob-num js-line-number" data-line-number="6014"></td>
        <td id="LC6014" class="blob-code blob-code-inner js-file-line">            <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(</td>
      </tr>
      <tr>
        <td id="L6015" class="blob-num js-line-number" data-line-number="6015"></td>
        <td id="LC6015" class="blob-code blob-code-inner js-file-line">                <span class=pl-s>&#39;Invalid configuration option (%s) in file %s<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span></td>
      </tr>
      <tr>
        <td id="L6016" class="blob-num js-line-number" data-line-number="6016"></td>
        <td id="LC6016" class="blob-code blob-code-inner js-file-line">                (<span class=pl-s1>name</span>, <span class=pl-s1>cfg_file</span>))</td>
      </tr>
      <tr>
        <td id="L6017" class="blob-num js-line-number" data-line-number="6017"></td>
        <td id="LC6017" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6018" class="blob-num js-line-number" data-line-number="6018"></td>
        <td id="LC6018" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>except</span> <span class=pl-v>IOError</span>:</td>
      </tr>
      <tr>
        <td id="L6019" class="blob-num js-line-number" data-line-number="6019"></td>
        <td id="LC6019" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(</td>
      </tr>
      <tr>
        <td id="L6020" class="blob-num js-line-number" data-line-number="6020"></td>
        <td id="LC6020" class="blob-code blob-code-inner js-file-line">          <span class=pl-s>&quot;Skipping config file &#39;%s&#39;: Can&#39;t open for reading<span class=pl-cce>\n</span>&quot;</span> <span class=pl-c1>%</span> <span class=pl-s1>cfg_file</span>)</td>
      </tr>
      <tr>
        <td id="L6021" class="blob-num js-line-number" data-line-number="6021"></td>
        <td id="LC6021" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>keep_looking</span> <span class=pl-c1>=</span> <span class=pl-c1>False</span></td>
      </tr>
      <tr>
        <td id="L6022" class="blob-num js-line-number" data-line-number="6022"></td>
        <td id="LC6022" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6023" class="blob-num js-line-number" data-line-number="6023"></td>
        <td id="LC6023" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Apply all the accumulated filters in reverse order (top-level directory</span></td>
      </tr>
      <tr>
        <td id="L6024" class="blob-num js-line-number" data-line-number="6024"></td>
        <td id="LC6024" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># config options having the least priority).</span></td>
      </tr>
      <tr>
        <td id="L6025" class="blob-num js-line-number" data-line-number="6025"></td>
        <td id="LC6025" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>filter</span> <span class=pl-c1>in</span> <span class=pl-en>reversed</span>(<span class=pl-s1>cfg_filters</span>):</td>
      </tr>
      <tr>
        <td id="L6026" class="blob-num js-line-number" data-line-number="6026"></td>
        <td id="LC6026" class="blob-code blob-code-inner js-file-line">     <span class=pl-en>_AddFilters</span>(<span class=pl-s1>filter</span>)</td>
      </tr>
      <tr>
        <td id="L6027" class="blob-num js-line-number" data-line-number="6027"></td>
        <td id="LC6027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6028" class="blob-num js-line-number" data-line-number="6028"></td>
        <td id="LC6028" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L6029" class="blob-num js-line-number" data-line-number="6029"></td>
        <td id="LC6029" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6030" class="blob-num js-line-number" data-line-number="6030"></td>
        <td id="LC6030" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6031" class="blob-num js-line-number" data-line-number="6031"></td>
        <td id="LC6031" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ProcessFile</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>vlevel</span>, <span class=pl-s1>extra_check_functions</span><span class=pl-c1>=</span>[]):</td>
      </tr>
      <tr>
        <td id="L6032" class="blob-num js-line-number" data-line-number="6032"></td>
        <td id="LC6032" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Does google-lint on a single file.</span></td>
      </tr>
      <tr>
        <td id="L6033" class="blob-num js-line-number" data-line-number="6033"></td>
        <td id="LC6033" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6034" class="blob-num js-line-number" data-line-number="6034"></td>
        <td id="LC6034" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L6035" class="blob-num js-line-number" data-line-number="6035"></td>
        <td id="LC6035" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    filename: The name of the file to parse.</span></td>
      </tr>
      <tr>
        <td id="L6036" class="blob-num js-line-number" data-line-number="6036"></td>
        <td id="LC6036" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6037" class="blob-num js-line-number" data-line-number="6037"></td>
        <td id="LC6037" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    vlevel: The level of errors to report.  Every error of confidence</span></td>
      </tr>
      <tr>
        <td id="L6038" class="blob-num js-line-number" data-line-number="6038"></td>
        <td id="LC6038" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    &gt;= verbose_level will be reported.  0 is a good default.</span></td>
      </tr>
      <tr>
        <td id="L6039" class="blob-num js-line-number" data-line-number="6039"></td>
        <td id="LC6039" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6040" class="blob-num js-line-number" data-line-number="6040"></td>
        <td id="LC6040" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    extra_check_functions: An array of additional check functions that will be</span></td>
      </tr>
      <tr>
        <td id="L6041" class="blob-num js-line-number" data-line-number="6041"></td>
        <td id="LC6041" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           run on each source line. Each function takes 4</span></td>
      </tr>
      <tr>
        <td id="L6042" class="blob-num js-line-number" data-line-number="6042"></td>
        <td id="LC6042" class="blob-code blob-code-inner js-file-line"><span class=pl-s>                           arguments: filename, clean_lines, line, error</span></td>
      </tr>
      <tr>
        <td id="L6043" class="blob-num js-line-number" data-line-number="6043"></td>
        <td id="LC6043" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L6044" class="blob-num js-line-number" data-line-number="6044"></td>
        <td id="LC6044" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6045" class="blob-num js-line-number" data-line-number="6045"></td>
        <td id="LC6045" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetVerboseLevel</span>(<span class=pl-s1>vlevel</span>)</td>
      </tr>
      <tr>
        <td id="L6046" class="blob-num js-line-number" data-line-number="6046"></td>
        <td id="LC6046" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_BackupFilters</span>()</td>
      </tr>
      <tr>
        <td id="L6047" class="blob-num js-line-number" data-line-number="6047"></td>
        <td id="LC6047" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>old_errors</span> <span class=pl-c1>=</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>error_count</span></td>
      </tr>
      <tr>
        <td id="L6048" class="blob-num js-line-number" data-line-number="6048"></td>
        <td id="LC6048" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6049" class="blob-num js-line-number" data-line-number="6049"></td>
        <td id="LC6049" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-v>ProcessConfigOverrides</span>(<span class=pl-s1>filename</span>):</td>
      </tr>
      <tr>
        <td id="L6050" class="blob-num js-line-number" data-line-number="6050"></td>
        <td id="LC6050" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>_RestoreFilters</span>()</td>
      </tr>
      <tr>
        <td id="L6051" class="blob-num js-line-number" data-line-number="6051"></td>
        <td id="LC6051" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L6052" class="blob-num js-line-number" data-line-number="6052"></td>
        <td id="LC6052" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6053" class="blob-num js-line-number" data-line-number="6053"></td>
        <td id="LC6053" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>lf_lines</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L6054" class="blob-num js-line-number" data-line-number="6054"></td>
        <td id="LC6054" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>crlf_lines</span> <span class=pl-c1>=</span> []</td>
      </tr>
      <tr>
        <td id="L6055" class="blob-num js-line-number" data-line-number="6055"></td>
        <td id="LC6055" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L6056" class="blob-num js-line-number" data-line-number="6056"></td>
        <td id="LC6056" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Support the UNIX convention of using &quot;-&quot; for stdin.  Note that</span></td>
      </tr>
      <tr>
        <td id="L6057" class="blob-num js-line-number" data-line-number="6057"></td>
        <td id="LC6057" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># we are not opening the file with universal newline support</span></td>
      </tr>
      <tr>
        <td id="L6058" class="blob-num js-line-number" data-line-number="6058"></td>
        <td id="LC6058" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># (which codecs doesn&#39;t support anyway), so the resulting lines do</span></td>
      </tr>
      <tr>
        <td id="L6059" class="blob-num js-line-number" data-line-number="6059"></td>
        <td id="LC6059" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># contain trailing &#39;\r&#39; characters if we are reading a file that</span></td>
      </tr>
      <tr>
        <td id="L6060" class="blob-num js-line-number" data-line-number="6060"></td>
        <td id="LC6060" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># has CRLF endings.</span></td>
      </tr>
      <tr>
        <td id="L6061" class="blob-num js-line-number" data-line-number="6061"></td>
        <td id="LC6061" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If after the split a trailing &#39;\r&#39; is present, it is removed</span></td>
      </tr>
      <tr>
        <td id="L6062" class="blob-num js-line-number" data-line-number="6062"></td>
        <td id="LC6062" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># below.</span></td>
      </tr>
      <tr>
        <td id="L6063" class="blob-num js-line-number" data-line-number="6063"></td>
        <td id="LC6063" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>filename</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;-&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6064" class="blob-num js-line-number" data-line-number="6064"></td>
        <td id="LC6064" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>lines</span> <span class=pl-c1>=</span> <span class=pl-s1>codecs</span>.<span class=pl-v>StreamReaderWriter</span>(<span class=pl-s1>sys</span>.<span class=pl-s1>stdin</span>,</td>
      </tr>
      <tr>
        <td id="L6065" class="blob-num js-line-number" data-line-number="6065"></td>
        <td id="LC6065" class="blob-code blob-code-inner js-file-line">                                        <span class=pl-s1>codecs</span>.<span class=pl-en>getreader</span>(<span class=pl-s>&#39;utf8&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L6066" class="blob-num js-line-number" data-line-number="6066"></td>
        <td id="LC6066" class="blob-code blob-code-inner js-file-line">                                        <span class=pl-s1>codecs</span>.<span class=pl-en>getwriter</span>(<span class=pl-s>&#39;utf8&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L6067" class="blob-num js-line-number" data-line-number="6067"></td>
        <td id="LC6067" class="blob-code blob-code-inner js-file-line">                                        <span class=pl-s>&#39;replace&#39;</span>).<span class=pl-en>read</span>().<span class=pl-en>split</span>(<span class=pl-s>&#39;<span class=pl-cce>\n</span>&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6068" class="blob-num js-line-number" data-line-number="6068"></td>
        <td id="LC6068" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L6069" class="blob-num js-line-number" data-line-number="6069"></td>
        <td id="LC6069" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>lines</span> <span class=pl-c1>=</span> <span class=pl-s1>codecs</span>.<span class=pl-en>open</span>(<span class=pl-s1>filename</span>, <span class=pl-s>&#39;r&#39;</span>, <span class=pl-s>&#39;utf8&#39;</span>, <span class=pl-s>&#39;replace&#39;</span>).<span class=pl-en>read</span>().<span class=pl-en>split</span>(<span class=pl-s>&#39;<span class=pl-cce>\n</span>&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6070" class="blob-num js-line-number" data-line-number="6070"></td>
        <td id="LC6070" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6071" class="blob-num js-line-number" data-line-number="6071"></td>
        <td id="LC6071" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Remove trailing &#39;\r&#39;.</span></td>
      </tr>
      <tr>
        <td id="L6072" class="blob-num js-line-number" data-line-number="6072"></td>
        <td id="LC6072" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># The -1 accounts for the extra trailing blank line we get from split()</span></td>
      </tr>
      <tr>
        <td id="L6073" class="blob-num js-line-number" data-line-number="6073"></td>
        <td id="LC6073" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>for</span> <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-en>range</span>(<span class=pl-en>len</span>(<span class=pl-s1>lines</span>) <span class=pl-c1>-</span> <span class=pl-c1>1</span>):</td>
      </tr>
      <tr>
        <td id="L6074" class="blob-num js-line-number" data-line-number="6074"></td>
        <td id="LC6074" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>].<span class=pl-en>endswith</span>(<span class=pl-s>&#39;<span class=pl-cce>\r</span>&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L6075" class="blob-num js-line-number" data-line-number="6075"></td>
        <td id="LC6075" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>] <span class=pl-c1>=</span> <span class=pl-s1>lines</span>[<span class=pl-s1>linenum</span>].<span class=pl-en>rstrip</span>(<span class=pl-s>&#39;<span class=pl-cce>\r</span>&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6076" class="blob-num js-line-number" data-line-number="6076"></td>
        <td id="LC6076" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>crlf_lines</span>.<span class=pl-en>append</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L6077" class="blob-num js-line-number" data-line-number="6077"></td>
        <td id="LC6077" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L6078" class="blob-num js-line-number" data-line-number="6078"></td>
        <td id="LC6078" class="blob-code blob-code-inner js-file-line">        <span class=pl-s1>lf_lines</span>.<span class=pl-en>append</span>(<span class=pl-s1>linenum</span> <span class=pl-c1>+</span> <span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L6079" class="blob-num js-line-number" data-line-number="6079"></td>
        <td id="LC6079" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6080" class="blob-num js-line-number" data-line-number="6080"></td>
        <td id="LC6080" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>except</span> <span class=pl-v>IOError</span>:</td>
      </tr>
      <tr>
        <td id="L6081" class="blob-num js-line-number" data-line-number="6081"></td>
        <td id="LC6081" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(</td>
      </tr>
      <tr>
        <td id="L6082" class="blob-num js-line-number" data-line-number="6082"></td>
        <td id="LC6082" class="blob-code blob-code-inner js-file-line">        <span class=pl-s>&quot;Skipping input &#39;%s&#39;: Can&#39;t open for reading<span class=pl-cce>\n</span>&quot;</span> <span class=pl-c1>%</span> <span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L6083" class="blob-num js-line-number" data-line-number="6083"></td>
        <td id="LC6083" class="blob-code blob-code-inner js-file-line">    <span class=pl-en>_RestoreFilters</span>()</td>
      </tr>
      <tr>
        <td id="L6084" class="blob-num js-line-number" data-line-number="6084"></td>
        <td id="LC6084" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>return</span></td>
      </tr>
      <tr>
        <td id="L6085" class="blob-num js-line-number" data-line-number="6085"></td>
        <td id="LC6085" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6086" class="blob-num js-line-number" data-line-number="6086"></td>
        <td id="LC6086" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Note, if no dot is found, this will give the entire filename as the ext.</span></td>
      </tr>
      <tr>
        <td id="L6087" class="blob-num js-line-number" data-line-number="6087"></td>
        <td id="LC6087" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>file_extension</span> <span class=pl-c1>=</span> <span class=pl-s1>filename</span>[<span class=pl-s1>filename</span>.<span class=pl-en>rfind</span>(<span class=pl-s>&#39;.&#39;</span>) <span class=pl-c1>+</span> <span class=pl-c1>1</span>:]</td>
      </tr>
      <tr>
        <td id="L6088" class="blob-num js-line-number" data-line-number="6088"></td>
        <td id="LC6088" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6089" class="blob-num js-line-number" data-line-number="6089"></td>
        <td id="LC6089" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># When reading from stdin, the extension is unknown, so no cpplint tests</span></td>
      </tr>
      <tr>
        <td id="L6090" class="blob-num js-line-number" data-line-number="6090"></td>
        <td id="LC6090" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># should rely on the extension.</span></td>
      </tr>
      <tr>
        <td id="L6091" class="blob-num js-line-number" data-line-number="6091"></td>
        <td id="LC6091" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>filename</span> <span class=pl-c1>!=</span> <span class=pl-s>&#39;-&#39;</span> <span class=pl-c1>and</span> <span class=pl-s1>file_extension</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> <span class=pl-s1>_valid_extensions</span>:</td>
      </tr>
      <tr>
        <td id="L6092" class="blob-num js-line-number" data-line-number="6092"></td>
        <td id="LC6092" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Ignoring %s; not a valid file name &#39;</span></td>
      </tr>
      <tr>
        <td id="L6093" class="blob-num js-line-number" data-line-number="6093"></td>
        <td id="LC6093" class="blob-code blob-code-inner js-file-line">                     <span class=pl-s>&#39;(%s)<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> (<span class=pl-s1>filename</span>, <span class=pl-s>&#39;, &#39;</span>.<span class=pl-en>join</span>(<span class=pl-s1>_valid_extensions</span>)))</td>
      </tr>
      <tr>
        <td id="L6094" class="blob-num js-line-number" data-line-number="6094"></td>
        <td id="LC6094" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L6095" class="blob-num js-line-number" data-line-number="6095"></td>
        <td id="LC6095" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>ProcessFileData</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>file_extension</span>, <span class=pl-s1>lines</span>, <span class=pl-v>Error</span>,</td>
      </tr>
      <tr>
        <td id="L6096" class="blob-num js-line-number" data-line-number="6096"></td>
        <td id="LC6096" class="blob-code blob-code-inner js-file-line">                    <span class=pl-s1>extra_check_functions</span>)</td>
      </tr>
      <tr>
        <td id="L6097" class="blob-num js-line-number" data-line-number="6097"></td>
        <td id="LC6097" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6098" class="blob-num js-line-number" data-line-number="6098"></td>
        <td id="LC6098" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># If end-of-line sequences are a mix of LF and CR-LF, issue</span></td>
      </tr>
      <tr>
        <td id="L6099" class="blob-num js-line-number" data-line-number="6099"></td>
        <td id="LC6099" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># warnings on the lines with CR.</span></td>
      </tr>
      <tr>
        <td id="L6100" class="blob-num js-line-number" data-line-number="6100"></td>
        <td id="LC6100" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L6101" class="blob-num js-line-number" data-line-number="6101"></td>
        <td id="LC6101" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># Don&#39;t issue any warnings if all lines are uniformly LF or CR-LF,</span></td>
      </tr>
      <tr>
        <td id="L6102" class="blob-num js-line-number" data-line-number="6102"></td>
        <td id="LC6102" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># since critique can handle these just fine, and the style guide</span></td>
      </tr>
      <tr>
        <td id="L6103" class="blob-num js-line-number" data-line-number="6103"></td>
        <td id="LC6103" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># doesn&#39;t dictate a particular end of line sequence.</span></td>
      </tr>
      <tr>
        <td id="L6104" class="blob-num js-line-number" data-line-number="6104"></td>
        <td id="LC6104" class="blob-code blob-code-inner js-file-line">    <span class=pl-c>#</span></td>
      </tr>
      <tr>
        <td id="L6105" class="blob-num js-line-number" data-line-number="6105"></td>
        <td id="LC6105" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># We can&#39;t depend on os.linesep to determine what the desired</span></td>
      </tr>
      <tr>
        <td id="L6106" class="blob-num js-line-number" data-line-number="6106"></td>
        <td id="LC6106" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># end-of-line sequence should be, since that will return the</span></td>
      </tr>
      <tr>
        <td id="L6107" class="blob-num js-line-number" data-line-number="6107"></td>
        <td id="LC6107" class="blob-code blob-code-inner js-file-line">    <span class=pl-c># server-side end-of-line sequence.</span></td>
      </tr>
      <tr>
        <td id="L6108" class="blob-num js-line-number" data-line-number="6108"></td>
        <td id="LC6108" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>lf_lines</span> <span class=pl-c1>and</span> <span class=pl-s1>crlf_lines</span>:</td>
      </tr>
      <tr>
        <td id="L6109" class="blob-num js-line-number" data-line-number="6109"></td>
        <td id="LC6109" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># Warn on every line with CR.  An alternative approach might be to</span></td>
      </tr>
      <tr>
        <td id="L6110" class="blob-num js-line-number" data-line-number="6110"></td>
        <td id="LC6110" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># check whether the file is mostly CRLF or just LF, and warn on the</span></td>
      </tr>
      <tr>
        <td id="L6111" class="blob-num js-line-number" data-line-number="6111"></td>
        <td id="LC6111" class="blob-code blob-code-inner js-file-line">      <span class=pl-c># minority, we bias toward LF here since most tools prefer LF.</span></td>
      </tr>
      <tr>
        <td id="L6112" class="blob-num js-line-number" data-line-number="6112"></td>
        <td id="LC6112" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>for</span> <span class=pl-s1>linenum</span> <span class=pl-c1>in</span> <span class=pl-s1>crlf_lines</span>:</td>
      </tr>
      <tr>
        <td id="L6113" class="blob-num js-line-number" data-line-number="6113"></td>
        <td id="LC6113" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>Error</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>linenum</span>, <span class=pl-s>&#39;whitespace/newline&#39;</span>, <span class=pl-c1>1</span>,</td>
      </tr>
      <tr>
        <td id="L6114" class="blob-num js-line-number" data-line-number="6114"></td>
        <td id="LC6114" class="blob-code blob-code-inner js-file-line">              <span class=pl-s>&#39;Unexpected <span class=pl-cce>\\</span>r (^M) found; better to use only <span class=pl-cce>\\</span>n&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6115" class="blob-num js-line-number" data-line-number="6115"></td>
        <td id="LC6115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6116" class="blob-num js-line-number" data-line-number="6116"></td>
        <td id="LC6116" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Suppress printing anything if --quiet was passed unless the error</span></td>
      </tr>
      <tr>
        <td id="L6117" class="blob-num js-line-number" data-line-number="6117"></td>
        <td id="LC6117" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># count has increased after processing this file.</span></td>
      </tr>
      <tr>
        <td id="L6118" class="blob-num js-line-number" data-line-number="6118"></td>
        <td id="LC6118" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>quiet</span> <span class=pl-c1>or</span> <span class=pl-s1>old_errors</span> <span class=pl-c1>!=</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>error_count</span>:</td>
      </tr>
      <tr>
        <td id="L6119" class="blob-num js-line-number" data-line-number="6119"></td>
        <td id="LC6119" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-s1>stdout</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;Done processing %s<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>filename</span>)</td>
      </tr>
      <tr>
        <td id="L6120" class="blob-num js-line-number" data-line-number="6120"></td>
        <td id="LC6120" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_RestoreFilters</span>()</td>
      </tr>
      <tr>
        <td id="L6121" class="blob-num js-line-number" data-line-number="6121"></td>
        <td id="LC6121" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6122" class="blob-num js-line-number" data-line-number="6122"></td>
        <td id="LC6122" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6123" class="blob-num js-line-number" data-line-number="6123"></td>
        <td id="LC6123" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>PrintUsage</span>(<span class=pl-s1>message</span>):</td>
      </tr>
      <tr>
        <td id="L6124" class="blob-num js-line-number" data-line-number="6124"></td>
        <td id="LC6124" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Prints a brief usage string and exits, optionally with an error message.</span></td>
      </tr>
      <tr>
        <td id="L6125" class="blob-num js-line-number" data-line-number="6125"></td>
        <td id="LC6125" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6126" class="blob-num js-line-number" data-line-number="6126"></td>
        <td id="LC6126" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L6127" class="blob-num js-line-number" data-line-number="6127"></td>
        <td id="LC6127" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    message: The optional error message.</span></td>
      </tr>
      <tr>
        <td id="L6128" class="blob-num js-line-number" data-line-number="6128"></td>
        <td id="LC6128" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L6129" class="blob-num js-line-number" data-line-number="6129"></td>
        <td id="LC6129" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s1>_USAGE</span>)</td>
      </tr>
      <tr>
        <td id="L6130" class="blob-num js-line-number" data-line-number="6130"></td>
        <td id="LC6130" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-s1>message</span>:</td>
      </tr>
      <tr>
        <td id="L6131" class="blob-num js-line-number" data-line-number="6131"></td>
        <td id="LC6131" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-en>exit</span>(<span class=pl-s>&#39;<span class=pl-cce>\n</span>FATAL ERROR: &#39;</span> <span class=pl-c1>+</span> <span class=pl-s1>message</span>)</td>
      </tr>
      <tr>
        <td id="L6132" class="blob-num js-line-number" data-line-number="6132"></td>
        <td id="LC6132" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>else</span>:</td>
      </tr>
      <tr>
        <td id="L6133" class="blob-num js-line-number" data-line-number="6133"></td>
        <td id="LC6133" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>sys</span>.<span class=pl-en>exit</span>(<span class=pl-c1>1</span>)</td>
      </tr>
      <tr>
        <td id="L6134" class="blob-num js-line-number" data-line-number="6134"></td>
        <td id="LC6134" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6135" class="blob-num js-line-number" data-line-number="6135"></td>
        <td id="LC6135" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6136" class="blob-num js-line-number" data-line-number="6136"></td>
        <td id="LC6136" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>PrintCategories</span>():</td>
      </tr>
      <tr>
        <td id="L6137" class="blob-num js-line-number" data-line-number="6137"></td>
        <td id="LC6137" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Prints a list of all the error-categories used by error messages.</span></td>
      </tr>
      <tr>
        <td id="L6138" class="blob-num js-line-number" data-line-number="6138"></td>
        <td id="LC6138" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6139" class="blob-num js-line-number" data-line-number="6139"></td>
        <td id="LC6139" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  These are the categories used to filter messages via --filter.</span></td>
      </tr>
      <tr>
        <td id="L6140" class="blob-num js-line-number" data-line-number="6140"></td>
        <td id="LC6140" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L6141" class="blob-num js-line-number" data-line-number="6141"></td>
        <td id="LC6141" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>.<span class=pl-en>write</span>(<span class=pl-s>&#39;&#39;</span>.<span class=pl-en>join</span>(<span class=pl-s>&#39;  %s<span class=pl-cce>\n</span>&#39;</span> <span class=pl-c1>%</span> <span class=pl-s1>cat</span> <span class=pl-k>for</span> <span class=pl-s1>cat</span> <span class=pl-c1>in</span> <span class=pl-s1>_ERROR_CATEGORIES</span>))</td>
      </tr>
      <tr>
        <td id="L6142" class="blob-num js-line-number" data-line-number="6142"></td>
        <td id="LC6142" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>sys</span>.<span class=pl-en>exit</span>(<span class=pl-c1>0</span>)</td>
      </tr>
      <tr>
        <td id="L6143" class="blob-num js-line-number" data-line-number="6143"></td>
        <td id="LC6143" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6144" class="blob-num js-line-number" data-line-number="6144"></td>
        <td id="LC6144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6145" class="blob-num js-line-number" data-line-number="6145"></td>
        <td id="LC6145" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-v>ParseArguments</span>(<span class=pl-s1>args</span>):</td>
      </tr>
      <tr>
        <td id="L6146" class="blob-num js-line-number" data-line-number="6146"></td>
        <td id="LC6146" class="blob-code blob-code-inner js-file-line">  <span class=pl-s>&quot;&quot;&quot;Parses the command line arguments.</span></td>
      </tr>
      <tr>
        <td id="L6147" class="blob-num js-line-number" data-line-number="6147"></td>
        <td id="LC6147" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6148" class="blob-num js-line-number" data-line-number="6148"></td>
        <td id="LC6148" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  This may set the output format and verbosity level as side-effects.</span></td>
      </tr>
      <tr>
        <td id="L6149" class="blob-num js-line-number" data-line-number="6149"></td>
        <td id="LC6149" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6150" class="blob-num js-line-number" data-line-number="6150"></td>
        <td id="LC6150" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Args:</span></td>
      </tr>
      <tr>
        <td id="L6151" class="blob-num js-line-number" data-line-number="6151"></td>
        <td id="LC6151" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    args: The command line arguments:</span></td>
      </tr>
      <tr>
        <td id="L6152" class="blob-num js-line-number" data-line-number="6152"></td>
        <td id="LC6152" class="blob-code blob-code-inner js-file-line"><span class=pl-s></span></td>
      </tr>
      <tr>
        <td id="L6153" class="blob-num js-line-number" data-line-number="6153"></td>
        <td id="LC6153" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  Returns:</span></td>
      </tr>
      <tr>
        <td id="L6154" class="blob-num js-line-number" data-line-number="6154"></td>
        <td id="LC6154" class="blob-code blob-code-inner js-file-line"><span class=pl-s>    The list of filenames to lint.</span></td>
      </tr>
      <tr>
        <td id="L6155" class="blob-num js-line-number" data-line-number="6155"></td>
        <td id="LC6155" class="blob-code blob-code-inner js-file-line"><span class=pl-s>  &quot;&quot;&quot;</span></td>
      </tr>
      <tr>
        <td id="L6156" class="blob-num js-line-number" data-line-number="6156"></td>
        <td id="LC6156" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L6157" class="blob-num js-line-number" data-line-number="6157"></td>
        <td id="LC6157" class="blob-code blob-code-inner js-file-line">    (<span class=pl-s1>opts</span>, <span class=pl-s1>filenames</span>) <span class=pl-c1>=</span> <span class=pl-s1>getopt</span>.<span class=pl-en>getopt</span>(<span class=pl-s1>args</span>, <span class=pl-s>&#39;&#39;</span>, [<span class=pl-s>&#39;help&#39;</span>, <span class=pl-s>&#39;output=&#39;</span>, <span class=pl-s>&#39;verbose=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6158" class="blob-num js-line-number" data-line-number="6158"></td>
        <td id="LC6158" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;counting=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6159" class="blob-num js-line-number" data-line-number="6159"></td>
        <td id="LC6159" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;filter=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6160" class="blob-num js-line-number" data-line-number="6160"></td>
        <td id="LC6160" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;root=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6161" class="blob-num js-line-number" data-line-number="6161"></td>
        <td id="LC6161" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;linelength=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6162" class="blob-num js-line-number" data-line-number="6162"></td>
        <td id="LC6162" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;extensions=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6163" class="blob-num js-line-number" data-line-number="6163"></td>
        <td id="LC6163" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;headers=&#39;</span>,</td>
      </tr>
      <tr>
        <td id="L6164" class="blob-num js-line-number" data-line-number="6164"></td>
        <td id="LC6164" class="blob-code blob-code-inner js-file-line">                                                 <span class=pl-s>&#39;quiet&#39;</span>])</td>
      </tr>
      <tr>
        <td id="L6165" class="blob-num js-line-number" data-line-number="6165"></td>
        <td id="LC6165" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>except</span> <span class=pl-s1>getopt</span>.<span class=pl-v>GetoptError</span>:</td>
      </tr>
      <tr>
        <td id="L6166" class="blob-num js-line-number" data-line-number="6166"></td>
        <td id="LC6166" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;Invalid arguments.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6167" class="blob-num js-line-number" data-line-number="6167"></td>
        <td id="LC6167" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6168" class="blob-num js-line-number" data-line-number="6168"></td>
        <td id="LC6168" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>verbosity</span> <span class=pl-c1>=</span> <span class=pl-en>_VerboseLevel</span>()</td>
      </tr>
      <tr>
        <td id="L6169" class="blob-num js-line-number" data-line-number="6169"></td>
        <td id="LC6169" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>output_format</span> <span class=pl-c1>=</span> <span class=pl-en>_OutputFormat</span>()</td>
      </tr>
      <tr>
        <td id="L6170" class="blob-num js-line-number" data-line-number="6170"></td>
        <td id="LC6170" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filters</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L6171" class="blob-num js-line-number" data-line-number="6171"></td>
        <td id="LC6171" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>quiet</span> <span class=pl-c1>=</span> <span class=pl-en>_Quiet</span>()</td>
      </tr>
      <tr>
        <td id="L6172" class="blob-num js-line-number" data-line-number="6172"></td>
        <td id="LC6172" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>counting_style</span> <span class=pl-c1>=</span> <span class=pl-s>&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L6173" class="blob-num js-line-number" data-line-number="6173"></td>
        <td id="LC6173" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6174" class="blob-num js-line-number" data-line-number="6174"></td>
        <td id="LC6174" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> (<span class=pl-s1>opt</span>, <span class=pl-s1>val</span>) <span class=pl-c1>in</span> <span class=pl-s1>opts</span>:</td>
      </tr>
      <tr>
        <td id="L6175" class="blob-num js-line-number" data-line-number="6175"></td>
        <td id="LC6175" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>if</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--help&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6176" class="blob-num js-line-number" data-line-number="6176"></td>
        <td id="LC6176" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>PrintUsage</span>(<span class=pl-c1>None</span>)</td>
      </tr>
      <tr>
        <td id="L6177" class="blob-num js-line-number" data-line-number="6177"></td>
        <td id="LC6177" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--output&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6178" class="blob-num js-line-number" data-line-number="6178"></td>
        <td id="LC6178" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>val</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;emacs&#39;</span>, <span class=pl-s>&#39;vs7&#39;</span>, <span class=pl-s>&#39;eclipse&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L6179" class="blob-num js-line-number" data-line-number="6179"></td>
        <td id="LC6179" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;The only allowed output formats are emacs, vs7 and eclipse.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6180" class="blob-num js-line-number" data-line-number="6180"></td>
        <td id="LC6180" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>output_format</span> <span class=pl-c1>=</span> <span class=pl-s1>val</span></td>
      </tr>
      <tr>
        <td id="L6181" class="blob-num js-line-number" data-line-number="6181"></td>
        <td id="LC6181" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--quiet&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6182" class="blob-num js-line-number" data-line-number="6182"></td>
        <td id="LC6182" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>quiet</span> <span class=pl-c1>=</span> <span class=pl-c1>True</span></td>
      </tr>
      <tr>
        <td id="L6183" class="blob-num js-line-number" data-line-number="6183"></td>
        <td id="LC6183" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--verbose&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6184" class="blob-num js-line-number" data-line-number="6184"></td>
        <td id="LC6184" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>verbosity</span> <span class=pl-c1>=</span> <span class=pl-en>int</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6185" class="blob-num js-line-number" data-line-number="6185"></td>
        <td id="LC6185" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--filter&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6186" class="blob-num js-line-number" data-line-number="6186"></td>
        <td id="LC6186" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>filters</span> <span class=pl-c1>=</span> <span class=pl-s1>val</span></td>
      </tr>
      <tr>
        <td id="L6187" class="blob-num js-line-number" data-line-number="6187"></td>
        <td id="LC6187" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>filters</span>:</td>
      </tr>
      <tr>
        <td id="L6188" class="blob-num js-line-number" data-line-number="6188"></td>
        <td id="LC6188" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>PrintCategories</span>()</td>
      </tr>
      <tr>
        <td id="L6189" class="blob-num js-line-number" data-line-number="6189"></td>
        <td id="LC6189" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--counting&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6190" class="blob-num js-line-number" data-line-number="6190"></td>
        <td id="LC6190" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>if</span> <span class=pl-s1>val</span> <span class=pl-c1>not</span> <span class=pl-c1>in</span> (<span class=pl-s>&#39;total&#39;</span>, <span class=pl-s>&#39;toplevel&#39;</span>, <span class=pl-s>&#39;detailed&#39;</span>):</td>
      </tr>
      <tr>
        <td id="L6191" class="blob-num js-line-number" data-line-number="6191"></td>
        <td id="LC6191" class="blob-code blob-code-inner js-file-line">        <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;Valid counting options are total, toplevel, and detailed&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6192" class="blob-num js-line-number" data-line-number="6192"></td>
        <td id="LC6192" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>counting_style</span> <span class=pl-c1>=</span> <span class=pl-s1>val</span></td>
      </tr>
      <tr>
        <td id="L6193" class="blob-num js-line-number" data-line-number="6193"></td>
        <td id="LC6193" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--root&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6194" class="blob-num js-line-number" data-line-number="6194"></td>
        <td id="LC6194" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>global</span> <span class=pl-s1>_root</span></td>
      </tr>
      <tr>
        <td id="L6195" class="blob-num js-line-number" data-line-number="6195"></td>
        <td id="LC6195" class="blob-code blob-code-inner js-file-line">      <span class=pl-s1>_root</span> <span class=pl-c1>=</span> <span class=pl-s1>val</span></td>
      </tr>
      <tr>
        <td id="L6196" class="blob-num js-line-number" data-line-number="6196"></td>
        <td id="LC6196" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--linelength&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6197" class="blob-num js-line-number" data-line-number="6197"></td>
        <td id="LC6197" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>global</span> <span class=pl-s1>_line_length</span></td>
      </tr>
      <tr>
        <td id="L6198" class="blob-num js-line-number" data-line-number="6198"></td>
        <td id="LC6198" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L6199" class="blob-num js-line-number" data-line-number="6199"></td>
        <td id="LC6199" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>_line_length</span> <span class=pl-c1>=</span> <span class=pl-en>int</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6200" class="blob-num js-line-number" data-line-number="6200"></td>
        <td id="LC6200" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>except</span> <span class=pl-v>ValueError</span>:</td>
      </tr>
      <tr>
        <td id="L6201" class="blob-num js-line-number" data-line-number="6201"></td>
        <td id="LC6201" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;Line length must be digits.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6202" class="blob-num js-line-number" data-line-number="6202"></td>
        <td id="LC6202" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--extensions&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6203" class="blob-num js-line-number" data-line-number="6203"></td>
        <td id="LC6203" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>global</span> <span class=pl-s1>_valid_extensions</span></td>
      </tr>
      <tr>
        <td id="L6204" class="blob-num js-line-number" data-line-number="6204"></td>
        <td id="LC6204" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>try</span>:</td>
      </tr>
      <tr>
        <td id="L6205" class="blob-num js-line-number" data-line-number="6205"></td>
        <td id="LC6205" class="blob-code blob-code-inner js-file-line">          <span class=pl-s1>_valid_extensions</span> <span class=pl-c1>=</span> <span class=pl-en>set</span>(<span class=pl-s1>val</span>.<span class=pl-en>split</span>(<span class=pl-s>&#39;,&#39;</span>))</td>
      </tr>
      <tr>
        <td id="L6206" class="blob-num js-line-number" data-line-number="6206"></td>
        <td id="LC6206" class="blob-code blob-code-inner js-file-line">      <span class=pl-k>except</span> <span class=pl-v>ValueError</span>:</td>
      </tr>
      <tr>
        <td id="L6207" class="blob-num js-line-number" data-line-number="6207"></td>
        <td id="LC6207" class="blob-code blob-code-inner js-file-line">          <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;Extensions must be comma separated list.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6208" class="blob-num js-line-number" data-line-number="6208"></td>
        <td id="LC6208" class="blob-code blob-code-inner js-file-line">    <span class=pl-k>elif</span> <span class=pl-s1>opt</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;--headers&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6209" class="blob-num js-line-number" data-line-number="6209"></td>
        <td id="LC6209" class="blob-code blob-code-inner js-file-line">      <span class=pl-v>ProcessHppHeadersOption</span>(<span class=pl-s1>val</span>)</td>
      </tr>
      <tr>
        <td id="L6210" class="blob-num js-line-number" data-line-number="6210"></td>
        <td id="LC6210" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6211" class="blob-num js-line-number" data-line-number="6211"></td>
        <td id="LC6211" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>filenames</span>:</td>
      </tr>
      <tr>
        <td id="L6212" class="blob-num js-line-number" data-line-number="6212"></td>
        <td id="LC6212" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>PrintUsage</span>(<span class=pl-s>&#39;No files were specified.&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6213" class="blob-num js-line-number" data-line-number="6213"></td>
        <td id="LC6213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6214" class="blob-num js-line-number" data-line-number="6214"></td>
        <td id="LC6214" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetOutputFormat</span>(<span class=pl-s1>output_format</span>)</td>
      </tr>
      <tr>
        <td id="L6215" class="blob-num js-line-number" data-line-number="6215"></td>
        <td id="LC6215" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetQuiet</span>(<span class=pl-s1>quiet</span>)</td>
      </tr>
      <tr>
        <td id="L6216" class="blob-num js-line-number" data-line-number="6216"></td>
        <td id="LC6216" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetVerboseLevel</span>(<span class=pl-s1>verbosity</span>)</td>
      </tr>
      <tr>
        <td id="L6217" class="blob-num js-line-number" data-line-number="6217"></td>
        <td id="LC6217" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetFilters</span>(<span class=pl-s1>filters</span>)</td>
      </tr>
      <tr>
        <td id="L6218" class="blob-num js-line-number" data-line-number="6218"></td>
        <td id="LC6218" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>_SetCountingStyle</span>(<span class=pl-s1>counting_style</span>)</td>
      </tr>
      <tr>
        <td id="L6219" class="blob-num js-line-number" data-line-number="6219"></td>
        <td id="LC6219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6220" class="blob-num js-line-number" data-line-number="6220"></td>
        <td id="LC6220" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>return</span> <span class=pl-s1>filenames</span></td>
      </tr>
      <tr>
        <td id="L6221" class="blob-num js-line-number" data-line-number="6221"></td>
        <td id="LC6221" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6222" class="blob-num js-line-number" data-line-number="6222"></td>
        <td id="LC6222" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6223" class="blob-num js-line-number" data-line-number="6223"></td>
        <td id="LC6223" class="blob-code blob-code-inner js-file-line"><span class=pl-k>def</span> <span class=pl-en>main</span>():</td>
      </tr>
      <tr>
        <td id="L6224" class="blob-num js-line-number" data-line-number="6224"></td>
        <td id="LC6224" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>filenames</span> <span class=pl-c1>=</span> <span class=pl-v>ParseArguments</span>(<span class=pl-s1>sys</span>.<span class=pl-s1>argv</span>[<span class=pl-c1>1</span>:])</td>
      </tr>
      <tr>
        <td id="L6225" class="blob-num js-line-number" data-line-number="6225"></td>
        <td id="LC6225" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6226" class="blob-num js-line-number" data-line-number="6226"></td>
        <td id="LC6226" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># Change stderr to write with replacement characters so we don&#39;t die</span></td>
      </tr>
      <tr>
        <td id="L6227" class="blob-num js-line-number" data-line-number="6227"></td>
        <td id="LC6227" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># if we try to print something containing non-ASCII characters.</span></td>
      </tr>
      <tr>
        <td id="L6228" class="blob-num js-line-number" data-line-number="6228"></td>
        <td id="LC6228" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span> <span class=pl-c1>=</span> <span class=pl-s1>codecs</span>.<span class=pl-v>StreamReaderWriter</span>(<span class=pl-s1>sys</span>.<span class=pl-s1>stderr</span>,</td>
      </tr>
      <tr>
        <td id="L6229" class="blob-num js-line-number" data-line-number="6229"></td>
        <td id="LC6229" class="blob-code blob-code-inner js-file-line">                                         <span class=pl-s1>codecs</span>.<span class=pl-en>getreader</span>(<span class=pl-s>&#39;utf8&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L6230" class="blob-num js-line-number" data-line-number="6230"></td>
        <td id="LC6230" class="blob-code blob-code-inner js-file-line">                                         <span class=pl-s1>codecs</span>.<span class=pl-en>getwriter</span>(<span class=pl-s>&#39;utf8&#39;</span>),</td>
      </tr>
      <tr>
        <td id="L6231" class="blob-num js-line-number" data-line-number="6231"></td>
        <td id="LC6231" class="blob-code blob-code-inner js-file-line">                                         <span class=pl-s>&#39;replace&#39;</span>)</td>
      </tr>
      <tr>
        <td id="L6232" class="blob-num js-line-number" data-line-number="6232"></td>
        <td id="LC6232" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6233" class="blob-num js-line-number" data-line-number="6233"></td>
        <td id="LC6233" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>ResetErrorCounts</span>()</td>
      </tr>
      <tr>
        <td id="L6234" class="blob-num js-line-number" data-line-number="6234"></td>
        <td id="LC6234" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>for</span> <span class=pl-s1>filename</span> <span class=pl-c1>in</span> <span class=pl-s1>filenames</span>:</td>
      </tr>
      <tr>
        <td id="L6235" class="blob-num js-line-number" data-line-number="6235"></td>
        <td id="LC6235" class="blob-code blob-code-inner js-file-line">    <span class=pl-v>ProcessFile</span>(<span class=pl-s1>filename</span>, <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>verbose_level</span>)</td>
      </tr>
      <tr>
        <td id="L6236" class="blob-num js-line-number" data-line-number="6236"></td>
        <td id="LC6236" class="blob-code blob-code-inner js-file-line">  <span class=pl-c># If --quiet is passed, suppress printing error count unless there are errors.</span></td>
      </tr>
      <tr>
        <td id="L6237" class="blob-num js-line-number" data-line-number="6237"></td>
        <td id="LC6237" class="blob-code blob-code-inner js-file-line">  <span class=pl-k>if</span> <span class=pl-c1>not</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>quiet</span> <span class=pl-c1>or</span> <span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>error_count</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>:</td>
      </tr>
      <tr>
        <td id="L6238" class="blob-num js-line-number" data-line-number="6238"></td>
        <td id="LC6238" class="blob-code blob-code-inner js-file-line">    <span class=pl-s1>_cpplint_state</span>.<span class=pl-v>PrintErrorCounts</span>()</td>
      </tr>
      <tr>
        <td id="L6239" class="blob-num js-line-number" data-line-number="6239"></td>
        <td id="LC6239" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6240" class="blob-num js-line-number" data-line-number="6240"></td>
        <td id="LC6240" class="blob-code blob-code-inner js-file-line">  <span class=pl-s1>sys</span>.<span class=pl-en>exit</span>(<span class=pl-s1>_cpplint_state</span>.<span class=pl-s1>error_count</span> <span class=pl-c1>&gt;</span> <span class=pl-c1>0</span>)</td>
      </tr>
      <tr>
        <td id="L6241" class="blob-num js-line-number" data-line-number="6241"></td>
        <td id="LC6241" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6242" class="blob-num js-line-number" data-line-number="6242"></td>
        <td id="LC6242" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6243" class="blob-num js-line-number" data-line-number="6243"></td>
        <td id="LC6243" class="blob-code blob-code-inner js-file-line"><span class=pl-k>if</span> <span class=pl-s1>__name__</span> <span class=pl-c1>==</span> <span class=pl-s>&#39;__main__&#39;</span>:</td>
      </tr>
      <tr>
        <td id="L6244" class="blob-num js-line-number" data-line-number="6244"></td>
        <td id="LC6244" class="blob-code blob-code-inner js-file-line">  <span class=pl-en>main</span>()</td>
      </tr>
</table>

  <details class="details-reset details-overlay BlobToolbar position-absolute js-file-line-actions dropdown d-none" aria-hidden="true">
    <summary class="btn-octicon ml-0 px-2 p-0 color-bg-primary border color-border-tertiary rounded-1" aria-label="Inline file action toolbar">
      <svg class="octicon octicon-kebab-horizontal" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="M8 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zM1.5 9a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm13 0a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path></svg>
    </summary>
    <details-menu>
      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se mt-2" style="width:185px">
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-lines" style="cursor:pointer;">
            Copy lines
          </clipboard-copy>
        </li>
        <li>
          <clipboard-copy role="menuitem" class="dropdown-item" id="js-copy-permalink" style="cursor:pointer;">
            Copy permalink
          </clipboard-copy>
        </li>
        <li><a class="dropdown-item js-update-url-with-hash" id="js-view-git-blame" role="menuitem" href="/google/styleguide/blame/6e239d7f906ee456b926be229f3e4ee6bad53e42/cpplint/cpplint.py">View git blame</a></li>
          <li><a class="dropdown-item" id="js-new-issue" role="menuitem" href="/google/styleguide/issues/new">Reference in new issue</a></li>
      </ul>
    </details-menu>
  </details>

  </div>

    </div>

  

  <details class="details-reset details-overlay details-overlay-dark" id="jumpto-line-details-dialog">
    <summary data-hotkey="l" aria-label="Jump to line"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast linejump" aria-label="Jump to line">
      <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-jump-to-line-form Box-body d-flex" action="" accept-charset="UTF-8" method="get">
        <input class="form-control flex-auto mr-3 linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
        <button type="submit" class="btn" data-close-dialog>Go</button>
</form>    </details-dialog>
  </details>

    <div class="Popover anim-scale-in js-tagsearch-popover"
     hidden
     data-tagsearch-url="/google/styleguide/find-definition"
     data-tagsearch-ref="gh-pages"
     data-tagsearch-path="cpplint/cpplint.py"
     data-tagsearch-lang="Python"
     data-hydro-click="{&quot;event_type&quot;:&quot;code_navigation.click_on_symbol&quot;,&quot;payload&quot;:{&quot;action&quot;:&quot;click_on_symbol&quot;,&quot;repository_id&quot;:35969061,&quot;ref&quot;:&quot;gh-pages&quot;,&quot;language&quot;:&quot;Python&quot;,&quot;originating_url&quot;:&quot;https://github.com/google/styleguide/blob/gh-pages/cpplint/cpplint.py&quot;,&quot;user_id&quot;:null}}"
     data-hydro-click-hmac="a278418e7598b0556c88b35dae8f5b7c44cfa82da478f9ae683bac638350cfa6">
  <div class="Popover-message Popover-message--large Popover-message--top-left TagsearchPopover mt-1 mb-4 mx-auto Box color-shadow-large">
    <div class="TagsearchPopover-content js-tagsearch-popover-content overflow-auto" style="will-change:transform;">
    </div>
  </div>
</div>


</div>



  </div>
</div>

    </main>
  </div>


  </div>

          
<div class="footer container-xl width-full p-responsive" role="contentinfo">
  <div class="position-relative d-flex flex-row-reverse flex-lg-row flex-wrap flex-lg-nowrap flex-justify-center flex-lg-justify-between pt-6 pb-2 mt-6 f6 color-text-secondary border-top color-border-secondary ">
    <ul class="list-style-none d-flex flex-wrap col-12 col-lg-5 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0">
      <li class="mr-3 mr-lg-0">&copy; 2021 GitHub, Inc.</li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3 mr-lg-0"><a data-ga-click="Footer, go to security, text:security" href="https://github.com/security">Security</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://www.githubstatus.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:Docs" href="https://docs.github.com">Docs</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon d-none d-lg-block mx-lg-4" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path></svg>
</a>
    <ul class="list-style-none d-flex flex-wrap col-12 col-lg-5 flex-justify-center flex-lg-justify-between mb-2 mb-lg-0">
        <li class="mr-3 mr-lg-0"><a href="https://support.github.com" data-ga-click="Footer, go to contact, text:contact">Contact GitHub</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://github.com/pricing" data-ga-click="Footer, go to Pricing, text:Pricing">Pricing</a></li>
      <li class="mr-3 mr-lg-0"><a href="https://docs.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3 mr-lg-0"><a href="https://services.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
        <li class="mr-3 mr-lg-0"><a href="https://github.blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>
    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 color-text-tertiary"></span>
  </div>

  
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"></path></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
    </button>
    You can’t perform that action at this time.
  </div>

  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden
    >
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z"></path></svg>
    <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-text-primary hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z"></path></svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>



  </body>
</html>

