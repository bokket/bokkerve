!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOKKET_LOG_DEBUG	log.h	31;"	d
BOKKET_LOG_ERROR	log.h	34;"	d
BOKKET_LOG_FATAL	log.h	35;"	d
BOKKET_LOG_FMT_DEBUG	log.h	44;"	d
BOKKET_LOG_FMT_ERROR	log.h	47;"	d
BOKKET_LOG_FMT_FATAL	log.h	48;"	d
BOKKET_LOG_FMT_INFO	log.h	45;"	d
BOKKET_LOG_FMT_LEVEL	log.h	38;"	d
BOKKET_LOG_FMT_WARN	log.h	46;"	d
BOKKET_LOG_INFO	log.h	32;"	d
BOKKET_LOG_LEVEL	log.h	25;"	d
BOKKET_LOG_ROOT	log.h	51;"	d
BOKKET_LOG_WARN	log.h	33;"	d
C_2_LOG_H	log.h	6;"	d
CoreadIdFmtItem	log.cpp	/^    CoreadIdFmtItem(const string & str="")$/;"	f	class:bokket::CoreadIdFmtItem
CoreadIdFmtItem	log.cpp	/^class CoreadIdFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
DEBUG	log.h	/^        DEBUG=1,$/;"	e	enum:bokket::LogLevel::Level
ERROR	log.h	/^        ERROR=4,$/;"	e	enum:bokket::LogLevel::Level
FATAL	log.h	/^        FATAL=5$/;"	e	enum:bokket::LogLevel::Level
FilenameFmtItem	log.cpp	/^    FilenameFmtItem(const string & str="")$/;"	f	class:bokket::FilenameFmtItem
FilenameFmtItem	log.cpp	/^class FilenameFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
FmtItem	log.h	/^    class FmtItem$/;"	c	class:bokket::LogFmtter
GetInstance	singleton.h	/^        static T* GetInstance()$/;"	f	class:bokket::Singleton
GetInstance	singleton.h	/^        static shared_ptr<T> GetInstance()$/;"	f	class:bokket::SingletonPtr
GetInstance	singleton_back.h	/^        static Singleton* GetInstance()$/;"	f	class:bokket::Singleton
GetInstance	singleton_back.h	/^        static SingletonPtr* GetInstance()$/;"	f	class:bokket::SingletonPtr
INFO	log.h	/^        INFO=2,$/;"	e	enum:bokket::LogLevel::Level
Level	log.h	/^    enum Level$/;"	g	class:bokket::LogLevel
LevelFmtItem	log.cpp	/^    LevelFmtItem(const string& str="")$/;"	f	class:bokket::LevelFmtItem
LevelFmtItem	log.cpp	/^class LevelFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
LineFmtItem	log.cpp	/^    LineFmtItem(const string & str="")$/;"	f	class:bokket::LineFmtItem
LineFmtItem	log.cpp	/^class LineFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
LogAppender	log.h	/^class LogAppender$/;"	c	namespace:bokket
LogEvent	log.cpp	/^LogEvent::LogEvent(shared_ptr <Logger> logger, LogLevel::Level level$/;"	f	class:bokket::LogEvent
LogEvent	log.h	/^class LogEvent$/;"	c	namespace:bokket
LogEventWrap	log.cpp	/^LogEventWrap::LogEventWrap(LogEvent::ptr ptr)$/;"	f	class:bokket::LogEventWrap
LogEventWrap	log.h	/^class LogEventWrap$/;"	c	namespace:bokket
LogFmtter	log.cpp	/^LogFmtter::LogFmtter(const string &pattern)$/;"	f	class:bokket::LogFmtter
LogFmtter	log.h	/^class LogFmtter$/;"	c	namespace:bokket
LogLevel	log.h	/^class LogLevel$/;"	c	namespace:bokket
LogPrintFile	log.cpp	/^LogPrintFile::LogPrintFile(const string &filename)$/;"	f	class:bokket::LogPrintFile
LogPrintFile	log.h	/^class LogPrintFile: public LogAppender$/;"	c	namespace:bokket
LogPrintStdout	log.h	/^class LogPrintStdout: public LogAppender$/;"	c	namespace:bokket
Logger	log.cpp	/^Logger::Logger(const string & name)$/;"	f	class:bokket::Logger
Logger	log.h	/^class Logger: public enable_shared_from_this<Logger>$/;"	c	namespace:bokket
LoggerManager	log.cpp	/^LoggerManager::LoggerManager()$/;"	f	class:bokket::LoggerManager
LoggerManager	log.h	/^class LoggerManager$/;"	c	namespace:bokket
LoggerMgr	log.h	/^    typedef bokket::Singleton<LoggerManager> LoggerMgr;$/;"	t	namespace:bokket
MessgeFmtItem	log.cpp	/^    MessgeFmtItem(const string& str="")$/;"	f	class:bokket::MessgeFmtItem
MessgeFmtItem	log.cpp	/^class MessgeFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
MsecFmtItem	log.cpp	/^    MsecFmtItem(const string& str="")$/;"	f	class:bokket::MsecFmtItem
MsecFmtItem	log.cpp	/^class MsecFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
NameFmtItem	log.cpp	/^    NameFmtItem(const string & str="")$/;"	f	class:bokket::NameFmtItem
NameFmtItem	log.cpp	/^class NameFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
NewLineFmtItem	log.cpp	/^    NewLineFmtItem(const string & str="")$/;"	f	class:bokket::NewLineFmtItem
NewLineFmtItem	log.cpp	/^class NewLineFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
Singleton	singleton.h	/^    class Singleton: public boost::noncopyable$/;"	c	namespace:bokket
Singleton	singleton_back.h	/^    class Singleton: public boost::noncopyable$/;"	c	namespace:bokket
SingletonPtr	singleton.h	/^    class SingletonPtr: public boost::noncopyable$/;"	c	namespace:bokket
SingletonPtr	singleton_back.h	/^    class SingletonPtr: public boost::noncopyable$/;"	c	namespace:bokket
StringFmtItem	log.cpp	/^    StringFmtItem(const string & str="")$/;"	f	class:bokket::StringFmtItem
StringFmtItem	log.cpp	/^class StringFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
TabFmtItem	log.cpp	/^    TabFmtItem(const string & str="")$/;"	f	class:bokket::TabFmtItem
TabFmtItem	log.cpp	/^class TabFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
ThreadIdFmtItem	log.cpp	/^    ThreadIdFmtItem(const string & str="")$/;"	f	class:bokket::ThreadIdFmtItem
ThreadIdFmtItem	log.cpp	/^class ThreadIdFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
TimeFmtItem	log.cpp	/^    TimeFmtItem(const string & fmt="%Y-%m-%d %H:%M:%S")$/;"	f	class:bokket::TimeFmtItem
TimeFmtItem	log.cpp	/^class TimeFmtItem: public LogFmtter::FmtItem$/;"	c	namespace:bokket	file:
ToString	log.cpp	/^const char * LogLevel::ToString(LogLevel::Level level)$/;"	f	class:bokket::LogLevel
UNKNOW	log.h	/^        UNKNOW=0,$/;"	e	enum:bokket::LogLevel::Level
WARN	log.h	/^        WARN=3,$/;"	e	enum:bokket::LogLevel::Level
addPrint	log.cpp	/^void Logger::addPrint(LogPrint::ptr printer)$/;"	f	class:bokket::Logger
bokket	log.cpp	/^namespace bokket$/;"	n	file:
bokket	log.h	/^namespace bokket$/;"	n
bokket	singleton.h	/^namespace bokket {$/;"	n
bokket	singleton_back.h	/^namespace bokket {$/;"	n
debug	log.cpp	/^void Logger::debug(LogEvent::ptr event)$/;"	f	class:bokket::Logger
delPrint	log.cpp	/^void Logger::delPrint(LogPrint::ptr printer)$/;"	f	class:bokket::Logger
error	log.cpp	/^void Logger::error(LogEvent::ptr event)$/;"	f	class:bokket::Logger
fatal	log.cpp	/^void Logger::fatal(LogEvent::ptr event)$/;"	f	class:bokket::Logger
fmt	log.cpp	/^string LogFmtter::fmt(shared_ptr <Logger> logger, LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:bokket::LogFmtter
fmt	log.cpp	/^void LogEvent::fmt(const char *format, ...)$/;"	f	class:bokket::LogEvent
fmt	log.cpp	/^void LogEvent::fmt(const char *format, va_list vaList)$/;"	f	class:bokket::LogEvent
getContent	log.h	/^    string getContent() const { return m_stream.str(); }$/;"	f	class:bokket::LogEvent
getCoreadId	log.h	/^    uint32_t getCoreadId() const { return m_coreadId; }$/;"	f	class:bokket::LogEvent
getEvent	log.h	/^    LogEvent::ptr getEvent() const { return m_event; }$/;"	f	class:bokket::LogEventWrap
getFile	log.h	/^    const char* getFile() const { return m_file; }$/;"	f	class:bokket::LogEvent
getFmtter	log.h	/^    LogFmtter::ptr getFmtter() const { return m_fmtter; }$/;"	f	class:bokket::LogAppender
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:bokket::LogAppender
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_level; }$/;"	f	class:bokket::LogEvent
getLevel	log.h	/^    LogLevel::Level getLevel() const { return m_lever; }$/;"	f	class:bokket::Logger
getLine	log.h	/^    int32_t getLine() const { return m_line; }$/;"	f	class:bokket::LogEvent
getLogger	log.cpp	/^Logger::ptr LoggerManager::getLogger(const string &name)$/;"	f	class:bokket::LoggerManager
getLogger	log.h	/^    shared_ptr<Logger> getLogger() const { return m_logger; }$/;"	f	class:bokket::LogEvent
getMsec	log.h	/^    uint32_t getMsec() const { return m_msec; }$/;"	f	class:bokket::LogEvent
getName	log.h	/^    const string & getName() const { return m_name; }$/;"	f	class:bokket::Logger
getRoot	log.h	/^    Logger::ptr getRoot() const { return m_root; }$/;"	f	class:bokket::LoggerManager
getStringStream	log.cpp	/^stringstream & LogEventWrap::getStringStream()$/;"	f	class:bokket::LogEventWrap
getStringStream	log.h	/^    stringstream & getStringStream() { return m_stream; }$/;"	f	class:bokket::LogEvent
getThreadId	log.h	/^    uint32_t getThreadId() const { return m_threadId; }$/;"	f	class:bokket::LogEvent
getTime	log.h	/^    uint64_t getTime() const { return m_time; }$/;"	f	class:bokket::LogEvent
info	log.cpp	/^void Logger::info(LogEvent::ptr event)$/;"	f	class:bokket::Logger
init	log.cpp	/^void LogFmtter::init()$/;"	f	class:bokket::LogFmtter
log	log.cpp	/^void LogPrintFile::log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:bokket::LogPrintFile
log	log.cpp	/^void LogPrintStdout::log(Logger::ptr logger, LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:bokket::LogPrintStdout
log	log.cpp	/^void Logger::log(LogLevel::Level level, LogEvent::ptr event)$/;"	f	class:bokket::Logger
m_appenders	log.h	/^    list<LogPrint::ptr> m_appenders;     \/\/Appender集合，保存Appender地址$/;"	m	class:bokket::Logger
m_coreadId	log.h	/^    uint32_t m_coreadId=0;    \/\/协程ID$/;"	m	class:bokket::LogEvent
m_event	log.h	/^    LogEvent::ptr m_event;$/;"	m	class:bokket::LogEventWrap
m_file	log.h	/^    const char* m_file=NULL;  \/\/文件名$/;"	m	class:bokket::LogEvent
m_filename	log.h	/^    string m_filename;$/;"	m	class:bokket::LogPrintFile
m_filestream	log.h	/^    ofstream m_filestream;$/;"	m	class:bokket::LogPrintFile
m_fmtter	log.h	/^    LogFmtter::ptr  m_fmtter;$/;"	m	class:bokket::LogAppender
m_fmtter	log.h	/^    LogFmtter::ptr m_fmtter;$/;"	m	class:bokket::Logger
m_items	log.h	/^    vector<FmtItem::ptr> m_items;$/;"	m	class:bokket::LogFmtter
m_level	log.h	/^    LogLevel::Level m_level;$/;"	m	class:bokket::LogEvent
m_level	log.h	/^    LogLevel::Level m_level=LogLevel::DEBUG;$/;"	m	class:bokket::LogAppender
m_lever	log.h	/^    LogLevel::Level m_lever;            \/\/日志级别$/;"	m	class:bokket::Logger
m_line	log.h	/^    int32_t m_line=0;         \/\/行号$/;"	m	class:bokket::LogEvent
m_logger	log.h	/^    shared_ptr<Logger> m_logger;$/;"	m	class:bokket::LogEvent
m_loggers	log.h	/^    map<string,Logger::ptr> m_loggers;$/;"	m	class:bokket::LoggerManager
m_msec	log.h	/^    uint32_t m_msec=0;        \/\/程序启动开始到现在的毫秒$/;"	m	class:bokket::LogEvent
m_name	log.h	/^    string m_name;                      \/\/日志名称$/;"	m	class:bokket::Logger
m_pattern	log.h	/^    string m_pattern;$/;"	m	class:bokket::LogFmtter
m_root	log.h	/^    Logger::ptr m_root;$/;"	m	class:bokket::LoggerManager
m_stream	log.h	/^    stringstream m_stream;$/;"	m	class:bokket::LogEvent
m_string	log.cpp	/^    string m_string;$/;"	m	class:bokket::StringFmtItem	file:
m_string	log.cpp	/^    string m_string;$/;"	m	class:bokket::TimeFmtItem	file:
m_threadId	log.h	/^    uint32_t m_threadId=0;    \/\/线程ID$/;"	m	class:bokket::LogEvent
m_time	log.h	/^    uint64_t m_time=0;        \/\/时间戳$/;"	m	class:bokket::LogEvent
override	log.h	/^    void log(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event) override;$/;"	m	class:bokket::LogPrintFile
override	log.h	/^    void log(Logger::ptr logger,LogLevel::Level level,LogEvent::ptr event) override;$/;"	m	class:bokket::LogPrintStdout
ptr	log.h	/^        typedef shared_ptr<FmtItem> ptr;$/;"	t	class:bokket::LogFmtter::FmtItem
ptr	log.h	/^    typedef shared_ptr<LogAppender> ptr;$/;"	t	class:bokket::LogAppender
ptr	log.h	/^    typedef shared_ptr<LogEvent> ptr;$/;"	t	class:bokket::LogEvent
ptr	log.h	/^    typedef shared_ptr<LogFmtter> ptr;$/;"	t	class:bokket::LogFmtter
ptr	log.h	/^    typedef shared_ptr<LogPrintFile> ptr;$/;"	t	class:bokket::LogPrintFile
ptr	log.h	/^    typedef shared_ptr<LogPrintStdout> ptr;$/;"	t	class:bokket::LogPrintStdout
ptr	log.h	/^    typedef shared_ptr<Logger> ptr;$/;"	t	class:bokket::Logger
ptr	singleton_back.h	/^        static shared_ptr<Singleton> ptr;$/;"	m	class:bokket::Singleton
ptr	singleton_back.h	/^        static shared_ptr<SingletonPtr> ptr;$/;"	m	class:bokket::SingletonPtr
reopen	log.cpp	/^bool LogPrintFile::reopen()$/;"	f	class:bokket::LogPrintFile
setFmtter	log.h	/^    void setFmtter(LogFmtter::ptr val) { m_fmtter=val; }$/;"	f	class:bokket::LogAppender
setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_level=level; }$/;"	f	class:bokket::LogAppender
setLevel	log.h	/^    void setLevel(LogLevel::Level level) { m_lever=level; }$/;"	f	class:bokket::Logger
setRoot	log.h	/^    void setRoot(Logger::ptr root) { m_root=root; }$/;"	f	class:bokket::LoggerManager
warn	log.cpp	/^void Logger::warn(LogEvent::ptr event)$/;"	f	class:bokket::Logger
~FmtItem	log.h	/^        virtual ~FmtItem() {}$/;"	f	class:bokket::LogFmtter::FmtItem
~LogAppender	log.h	/^    virtual ~LogAppender() {}$/;"	f	class:bokket::LogAppender
~LogEventWrap	log.cpp	/^LogEventWrap::~LogEventWrap()$/;"	f	class:bokket::LogEventWrap
